%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: finalDrift.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Dan Gezelter
%%CreationDate: 9/12/14
%%BoundingBox: 0 0 658 512
%%HiResBoundingBox: 0 0 657.6167 511.9092
%%CropBox: 0 0 657.6167 511.9092
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.4%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.4 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 10170 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD08FFAE2652FD247D52FD257D52FD257D527D7D7D52FD08FF5727%58AEA8AEA8AEA8FD0BFF7DFD12FFA8FD12FF7DFD12FFA8FD12FF7DFD12FF%A8FFFFFF7DFD09FF27FD08FFCFA8CFA8CFA8CFA8CFA8CFFD12FFA8FD25FF%7DFD13FF7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA87DFFFFFF7DFD09FF%7DFD13FFAEA8AEA8AEA8AEA8AEA8AEA8FD06FF83A8FD37FF7DFD13FF7DFF%FF7DFD09FF7DFD1FFFA8FFA8CFA8835782FD37FFA8FFA882FFFFFF83A7FF%7DA8A8FFFFFFA8FFFFFFA8FFFF7DFD09FF7DFD24FFA882A7AEA8FD35FF7D%AE57577CAE835757AE27FD04522727FFFFFF7DFFFF7DFD07FF52FF7DFD29%FFA8CFAEFD32FFA8FFA77CFFFFFF83A7FF275227F827F827FFFFFFA8FFFF%7DFD06FFFD04527DA8FD2AFFA8AEA8FD2FFF7DFF7DA2A8FFA8A27DFF7D7D%5252A8A8A8FFFFFF7DA87D52FD06FF7D277D7DFD2FFFA8CFFD2DFFA8FF71%4CA2A8A24C71FF7D275227A8FD05FFA8FFFF7DFD07FFA8FF7DFD31FFAEA8%FD2BFF7DFF464C7DFF7D4C46FF5227277DFD06FF7DFFFF7DFD09FF7DFD33%FFAECFA8FD28FFA8FFA2A2FFFFFFA2A2FFFFA8A8FD07FFA8FFFF7DFD09FF%7DFD36FFA8AEA8FD25FF7DFFC8C8FFFFFFC8C8FFA87D7D7D527DA8FFFFFF%7DFFFF7DFD09FF7DFD39FFA8CFFD23FFA8CFC7C1C8CACEC1C7CA527D2727%7D27A8FFFFFFA8FFFF7DFD09FF7DFD3BFFCFA8FD21FF7DFFC9C8FFFFFFC9%C8FF277D2727F87DA8FFFFFF7DFFFF7DFD09FF52A8FD3DFFCFA8FD1EFFA8%FFFF7FFFFFFF7FA9FF7D52FF527D52FD04FFA8FFFF5252272727A8FD04FF%7DFD40FFA8AEA8FD1BFF7DFF2A2B7EA97F2B08FF272752F82727A8FFFFFF%7DFFFF7DFFFF52277DFD04FF7DFD43FFA8CFAEFD18FFA8A92B2B7FFFA92B%31A9A8527D27F87DFD04FFA8FFFF7D5252277DFD05FF7DFD46FFA8AEFD16%FF7DFD09FFFD05A8FD05FF7DFFFF7D52F8F87DFD05FF7DFD48FFCFA8FF7C%CFFD11FFA8FD09FF7D7DFD04FF7DA8A8FFA8FFFF7D7D27F8A8FD05FF7DFD%4AFF7C5757FD11FF7DFFFFFFA8FFA8FFFFFF272752522727275227FF7DFF%FF7DFD06FFA87DFF7DFD4BFF7CAEA8CFFD0FFFA8FD09FF2727A8F827F827%2727FFA8FFFF7D52272727A8A85227FF527DA8FD4DFFCFA8FD0DFF7DA87D%A87DA87DA87DA87D7D7DA8FD057DA87DA87D52FFFF52277D7D5227FF7DFD%51FFAECFAEFD21FF7DFFFF52F852FFA8A8FF7DFD54FFA8AEFD1FFF7DFF7D%5252FD05FF7DFD57FFA8FD1DFF7DFF27F827FD05FF7DFD58FFA8AEA8FD1A%FF7DFF2752A8FD05FF7DFD5BFFA8FD19FF7D7D27F8A8FD05FF7DFD5CFFA8%AEA8FD16FF7DFD09FF52FD5FFFA8FD15FF52FD09FF7DFD62FFA8FD12FF7D%FD09FF7DFD63FFCFCFA8FD0FFF7DFD09FF7DFD66FFA8AEFD0DFF7DFD08FF%77217DFD10FFA2A2A2FD54FFCFA8FD0BFF7DFD07FFA84C2777A8A8CBA8A8%A8CBA8A8A8CBA8A8A2CBA8714677FD56FFA8AEA8FD08FF7DFD05FFA8A8F8%A24CA8FD10FF714C4CCBA8CBA2CBA8CBA8FD51FFA8FD07FF7DFD05FF7D52%F8A8527DA8FD1AFFA2A8A8A8A2A8A8A8774C4CFD47FFAEAEA8A783A87D52%FD09FF7DFD24FF9C4C77A8CBA8CBA8CBA8FD43FF5757A8FF7DFD09FF52FD%12FFA1FD11FFA8A1A2FD07FFA8A8A8CBA8A8A8CBA8774C77FD07FF774DA2%FD06FFA85377FD07FFA154A8FD07FF537DFD10FFA8534DFFFF7DFD08FFA1%28A0CACFA8CFA7CFCACAA7CFA8CFA7CFCACF7C2AA0CACACFA8CFA7CFCACA%A7CFA8CFA7CFCAA02A7DCACACACFA8CFA7CFCACAA7CFA8CFA7CFA02B53CA%A1A8A1A87DA2292B76A27DA27DA27D7D2A4E7DA27DA277A27D4E2A777DA2%7DA27DA2762A2AA17DA27DA27DA27DA27DA27DA27DA27D7D2A5477A24CFD%08FF08022A857EA97E857EA97E857EA97E857EA97E2A032A7E857EA97E85%7EA97E857EA97E857EA92A0803A97E857EA97E857EA97E857EA97E857E2A%03097EA97E8584FFAE2A0254AECFAEFFAECF292A03A9AEFFAECFAEFF032A%29FFAECFAEFFAE54022A7ECFAEFFAECFAEFFAECFAEFFAECFAEFF532A0278%AE7DFD09FF51FFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAECFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAEFFAEFF7DFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFF83FFAEFFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAECFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFF7D%CFAEFF58FD09FF52FD12AE7DFD12AE83FD12AE7DFD12AE83FD12AE7DFD12%AE83AEAEAE7DFD09FFF82727522752275227522752275227522752272727%522752275227522752275227522752275227522752275227522752275227%522752275227272752275227522752275227522752275227522752275227%522752275227522752275227522727275227522752275227522752275227%52275227522752F8FD09FF52FD12FFA8FD12FFA8FD12FFA8FD12FFA8FD12%FFA8FD12FFA8FFFFFF7DFD08FFAE27CFFD24FFA8FD25FFA8FD25FFA8FFFF%FF7DFD06FFA87D582D58AEA8AEA8AEA8AEA8AEA8FD6AFF7DFD06FFA827A8%51FD0BFFCFCFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8FD09FF82FD4FFF7DFD%06FF7D277D527DA8FD1AFFA8AEA8AEA8AEA8AE585757CFFD4BFFA87D52FD%07FF7DFF7DFD25FF58CFFFCFA8FFA8FD49FF7DFD09FF7DFD2CFFA8AEA8AE%A8FD44FF7DFD09FF7DFD31FFA8CFA8CFCFFD3FFF7DFD09FF52A8FD35FFA8%AEA8AEAEFD39FFA852FD09FF7DFD3BFFA8FFA8FD37FF7DFD09FF7DFD3EFF%CFAEA8AEA8FD32FF7DFD09FF7DFD43FFCFCFA8CFA8FFFFFFA7FD29FF7DFD%06FFA87DA87DFD48FFA8AE7C5757FD28FF7DFD06FF7D527D52A8A8FD49FF%5882A8FD25FFA8A852FD06FF5227527DFD4EFFA8AEA8FD24FF7DFD07FFA8%FF7DFD51FFA8CFFD22FF7D52272752A8FD04FF7DFD53FFAEA8FD20FF7DFF%FF7D277DFD04FF7DFD55FFAECFFD1EFF7D522727A8FD05FF52A8FD56FFCF%A8FD1BFFA8527DF8277DFD05FF7DFD59FFAECFAEFD19FF7D7D2727A8FD05%FF7DFD5CFFA8AEFD17FF7DA82727A8FFFFA87DFF7DFD5FFFA8FD15FF7D52%272727A8FF5227FF7DFD60FFA8AEA8FD12FF7DFFFF52277D7D5227FF52A8%A8FD10FFA8FD50FFA8FD0FFFA8A852FFFFA8A8A8FFA8A8774C7DFD11FF7D%FD51FFA8AEA8FD0EFF7DFF7D27277DFFFFFF772177A8CBA8FD0DFFA277A2%FD53FFA8FD0DFF7DFF52F827FD04FF772777FFFFFFA8CBA8A8A8CBA8A8A8%CBA8A8A2774671FD55FFAEA8FD0AFF7DFF7D52A8FD05FF52A8FD10FF4C71%71CBA8CBA8CBA8CBA8CBFD07FFCB77A8FD44FFAECFAEFD07FF52FF5227A8%FD05FF7DFD12FF77FD0AFFA8A2A8A8A8A2A8774C4CFD47FFA8CFFFFFA8FF%FF7DA827F8A8FD05FF7DFD12FFA2FD11FF7D4C77A8CBA8CBA8CBA8FD0AFF%A8FD37FFAE5782CFFF7DA8FFA8FD06FF7DFD12FFA8FD12FFA2FD08FFA8CB%A8A8A8CBA8A8A8774671FD07FFA277CBFD24FFA8FD07FFA85857FFFF7DFD%07FFA8FF7DFD37FF777171CBA8CBA8CBA8CB4C4C77FD23FFA8A8FD08FFCF%FFFFFF7DFD05FFA8A8F8FF527DA8FD35FFA871A8FD07FF4C4677A2A8A8FD%21FF7EFD0AFFA87D52FD05FF7D7DF8FF7DFD42FFCBFD04FFA8CBA8CB77A2%FD08FFA8FD12FFA9FD0CFF7DFD09FF7DA8FFA8FFA9FFA8FFA8FFFFFFA8FF%A8FFA8FFA9FFA8FFA8FFA9FFA8FFA8FFFFFFA8FFA8FFA8FFA9FFA8FFA8FF%A9FFA8FFA8FFFFFFA8FFA8FFA8FFA9FFA8FFA8FFA9FFA8FFA8FFFFFFA8FF%774D4CFFA9FFA8FFA8FFA9A2A8FFA8FFFFFFA8FFA8FFA8FFA9FFA8FFA8FF%7EFFA8FFA8FFFFFFA8FFA8FFA87DFD09FF7DFD4AFFA84C77A8CBA8FD05FF%7DFD08FFCBA8FD08FFA8FD0CFF7DFD09FF7DAEFFAEFFAEFFAEFFAEFFAEFF%AEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFF%AEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFF%AEFFAEFFAEFFAEFFA8A8A8FF7D77A8FFAEFFAEFFAEFFA2A8AEFFAEFFAEFF%AEFF84FFAEFFAEFFAEFFAEFFAEFFAE7DFD09FF52A8AEFFCFFFAEFFCFFFAE%FFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCF%FFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFFAE%FFCFFFAEFFCFFFAEFFCFFFAEFFA8774C77A8FFAEFFCFFFA2774CFFAEFFCF%FFAEFFCFA8AEFFCFFFAEFFCFFFAEFFCFAE52FD08FFA929AECFAEFFAECFAE%FFAECFAEFFAECFAEFFAECF76FFAECFAEFFAECFAEFFAECFAEFFAECFAEFFAE%CEAEFFAECFAEFFAECFAEFFAECFAEFFAECFAEFF53CFAEFFAECFAEFFAECF53%FFAECFAEFFAECFAE7FAECFAEFFAECFAEFF4C7077FFA8A87DA8A87D4C70A8%A87DA8A8CFAEA87DA8AEFFAECFAEFFAEA6A0FFAE7DFD08FF550155848584%A984A9AEFFAEFFAEFFAEFFAEFFC72AC1CFAEFFAEFFAEFFAEFFAEFFAEFFAE%FFAEFF7CFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFA72B53FFAEFFAEFFAE%FF7D2AAEFFAEFFAEFFAEFF53FFAEFFAEFFAEFFAEA808CFAEFFAEFFAEFFA8%4E4DFFAEFFAEFFA8A8A7A8A8A8A7A8A8A8A7A09FC1A0A751FD07FF7D5228%59AEA7CEA7CEA77E7D847D7E7D847D7E7D540354A7CEA7CEA7CEA7CEA7CE%A7CEA7CEA7C99F769FCEA7CEA7CEA7CEA7CEA7CEA7A77D847D54032A7D7E%7D847D7E7D2A03537D84A7CEA7CEA62A76CEA7CEA7A77D7E23094D7E7D84%7D7E7E84032A7EA8A7CEA7CEA7CEA7CEA7CEA7CEA7A8774D4C7DA859FD05%FFA8A8F89F74C8ADCFAEFFAEFFAEFFAEFFAEFFAEFFAEFF542B54AF84A984%A984A9AEFFAEFFAEFFAEFFAECF52C9AEFFAEFFAEFFAEA984A984A984FFAE%FFAEA0AEFFAEFFAEFFAEFF5A5484FFAEA984A9847E082A84A984A984FFAE%7E2984AEFFAEFFAECF532A2AA7A7A984A984A984A984A984A984A9848508%2B7EA952FD05FF7D525252517D83AEAEAECFAEAEAECFAEAEAECFAEAEAECF%5AAEAECFAEAEAECFAE847E847E847EFD04AE2B84AEA8847E847E84A8AEAE%CFAEAEAECFAEAEAECFAEAEAECFAEAEAECF54AEAECFAEAEAECF5A2A2ACFAE%AEAECFAEAEAEA8AEAEAECFAEAEAECF7D7DAECFAEAEAECFAEAEAECFAEAEAE%CFAEAE5A2B085A7D52FD07FF7DFF75CFAEFFAECFAEFFAECFAEFFAECFAEFF%AECFAEFFAECFAEFFAECFAEFFAECFAEFFAECF84A98455033184A8AEFFAECF%AEFFAECFAEFFAECFAEFFAECFAEFFAECFAEFFAECFAEFFAECFAEFFAECFAEFF%5ACFAEFFAECFAEFFAECFAEFFAECFAEFFAECFAECFA7CFAEFFAECFAEFFAECF%AEFFAECFAEFFAECF84A9AECF58FD09FF58FD24AE542A2AFD24AE54FD12AE%A7FD12AE8484AEAE58FD09FF52CFAEFFAECFAEFFAECFAEFFAECFAEFFAECF%AEAEAECFAEFFAECFAEFFAECFAEFFAECFAEFFAECF2FFFAECFAEFFAECFAEFF%AECFAEFFAECFAEFFAEAEAEFFAECFAEFFAECFAEFFAECFAEFFAECFAEFF83CF%AEFFAECFAEFFAECFAEFFAECFAEFFAECFAEAEAECFAEFFAECFAEFFAECFAEFF%AECFAEFFAECF83FFAECF58FD09FF275258527C5858527C5858527C585852%7C58582D7C5858527C5858527C5858527C5858527C5828527C5858527C58%58527C5858527C5858527C2D58527C5858527C5858527C5858527C585852%525858527C5858527C5858527C5858527C58582D7C5858527C5858527C58%58527C5858527C5852527C5227FD08FFA852FD23FFA87DAEA8A8FD21FFAE%7DA8A8A8FD22FF7DA8A852FD0AFF27527DFD22FF7D527D7D7DFD21FF7D52%7D5252FD21FFA852275227A8FD09FF5227A8FD22FF7D527DA852FD21FF7D%527D277DFD21FFA852277D27A8FD09FFA8A8FD24FF7DFFA8A8FD22FF7DFF%A8FD23FFA8FFA8A8FD49FF7D7DFD79FFA8FF527D7D7D52A8FD75FF277DFF%52FF2752FFFFFF52FD74FFA827F8FF27A82727A8FFFF7DA8FD74FFA8A8FF%7DFFFFA8FFFFFF52FDB5FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2014-09-12T10:02:08-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXi3lX8rr258/8A&#xA;mi51fUppobaaKKP0rm5jL+rbxSjkqOigfGa79fbMPDp5xPP9u7TDGQebOf8AlWukjYSSEeJudRr9&#xA;NLwfqzJqXePl+1t3d/yrvSk/3Q83v+kdSi/D1ZcfV5Lu7/AGkLu1hMw8E1bUCf8AhnQfjjcu77Vs&#xA;u/wP5d/6tepf9xGf/ssx4j3H7P1rfksh8k+U44USe21P1FVQzG51JixAoT+7mcfjjx+9bX/4O8kD&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>657.616699</stDim:w>
            <stDim:h>511.909180</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -511.909 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 511.909 li
657.617 511.909 li
657.617 0 li
cp
clp
656.699 462.391 mo
48.3081 462.391 li
48.3081 399.016 li
656.699 399.016 li
656.699 462.391 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 511.909 ]ct
[610.08 0 0 64.8 47.52 48.7092 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 1271 
/H 135 
/M[1271 0 0 -135 0 135 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&rW%NM
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPcMJcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&rW%NMJcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPcMJcUH(JcUH(
JcUH(JcUH(JcUH(!!.]PJcLB&JcLB&JcLB&JcLB&JcPfNKE6Z*JcUH(JcUH(JcUH(JcUH(rW.TNJcLB&
JcLB&JcLB&JcLB&JcGcNK*$W+Jc^N*Jc^N*Jc^N*Jc^N*rrRiRJcLB&JcLB&JcLB&JcLB&JcPcMJcgT,
JcgT,JcgT,JcgT,JcgT,!!@iRJcLB&JcLB&JcLB&JcLB&JcPfNKEHf.JcgT,JcgT,JcgT,JcgT,rW@`P
JcLB&JcLB&JcLB&JcLB&JcGcNK*6c/JcpZ.JcpZ.JcpZ.JcpZ.rrduTJcLB&JcLB&JcLB&JcLB&JcPcM
JcgT,JcgT,JcgT,JcgT,JcgT,!!@iRJcLB&JcLB&JcLB&JcLB&JcPfNKEZr2Jd$`0Jd$`0Jd$`0Jd$`0
rWRlRJcLB&JcLB&JcLB&JcLB&JcGcNK*6c/JcpZ.JcpZ.JcpZ.JcpZ.rrduTJcLB&JcLB&JcLB&JcLB&
JcPcMJd6l4Jd6l4Jd6l4Jd6l4Jd6l4!!e,VJcLB&JcLB&JcLB&JcLB&JcPfNKEd#4Jd-f2Jd-f2Jd-f2
Jd-f2rW[rSJcLB&JcLB&JcLB&JcLB&JcGcNK*d,9JdI#8JdI#8JdI#8JdI#8rs=>YJcLB&JcLB&JcLB&
JcLB&JcPcMJd-f2Jd-f2Jd-f2Jd-f2Jd-f2!!\&UJcLB&JcLB&JcLB&JcLB&JcPfNKF*5:JdI#8JdI#8
JdI#8JdI#8rX"/VJcLB&JcLB&JcLB&JcLB&JcGcNK*Qu5Jd6l4Jd6l4Jd6l4Jd6l4rs+2WJcLB&JcLB&
JcLB&JcLB&JcPcMJd[/<Jd[/<Jd[/<Jd[/<Jd[/<!"4DZJcLB&JcLB&JcLB&JcLB&JcPfNKF!/8Jd?r6
Jd?r6Jd?r6Jd?r6rWn)UJcLB&JcLB&JcLB&JcLB&JcGcNK+3DAJdm;@Jdm;@Jdm;@Jdm;@rsaV]JcLB&
JcLB&JcLB&JcLB&JcPcMJd?r6Jd?r6Jd?r6Jd?r6Jd?r6!!n2WJcLB&JcLB&JcLB&JcLB&JcPfNKF`YF
Je*GDJe*GDJe*GDJe*GDrXXS\JcLB&JcLB&JcLB&JcLB&JcGcNK*d,9JdI#8JdI#8JdI#8JdI#8rs=>Y
JcLB&JcLB&JcLB&JcLB&JcPcMJe3MFJe3MFJe3MFJe3MFJe3MF!"ab_JcLB&JcLB&JcLB&JcLB&JcPfN
KF3;<JdR):JdR):JdR):JdR):rX+5WJcLB&JcLB&JcLB&JcLB&JcGcNK+NVGJe3MFJe3MFJe3MFJe3MF
rt'h`JcLB&JcLB&JcLB&JcLB&JcPcMJdR):JdR):JdR):JdR):JdR):!"+>YJcLB&JcLB&JcLB&JcLB&
JcPfNKG&kLJeEYJJeEYJJeEYJJeEYJrXse_JcLB&JcLB&JcLB&JcLB&JcGcNK+*>?Jdd5>Jdd5>Jdd5>
Jdd5>rsXP\JcLB&JcLB&JcLB&JcLB&JcPcMJeWeNJeWeNJeWeNJeWeNJeWeN!#1%cJcLB&JcLB&JcLB&
JcLB&JcPfNKFNMBJdm;@Jdm;@Jdm;@Jdm;@rXFGZJcLB&JcLB&JcLB&JcLB&JcGcNK,9+UJes"TJes"T
Jes"TJes"Trtg=gJcLB&JcLB&JcLB&JcLB&JcPcMJe!ABJe!ABJe!ABJe!ABJe!AB!"OV]JcLB&JcLB&
JcLB&JcLB&JcPfNKGT4VJes"TJes"TJes"TJes"TrYL.dJcLB&JcLB&JcLB&JcLB&JcGcNK+<JCJe!AB
Je!ABJe!ABJe!ABrsj\^JcLB&JcLB&JcLB&JcLB&JcPcMJf'(VJf'(VJf'(VJf'(VJf'(V!#U=gJcLB&
JcLB&JcLB&JcLB&JcPfNKF`YFJe*GDJe*GDJe*GDJe*GDrXXS\JcLB&JcLB&JcLB&JcLB&JcGcNK,T=[
Jf94ZJf94ZJf94ZJf94Zru-OjJcLB&JcLB&JcLB&JcLB&JcPcMJe3MFJe3MFJe3MFJe3MFJe3MF!"ab_
JcLB&JcLB&JcLB&JcLB&JcPfNKH#L^JfB:\JfB:\JfB:\JfB:\rYpFhJcLB&JcLB&JcLB&JcLB&JcGcN
K+NVGJe3MFJe3MFJe3MFJe3MFrt'h`JcLB&JcLB&JcLB&JcLB&JcPcMJfTF`JfTF`JfTF`JfTF`JfTF`
!$-[lJcLB&JcLB&JcLB&JcLB&JcPfNKFreJJe<SHJe<SHJe<SHJe<SHrXj_^JcLB&JcLB&JcLB&JcLB&
JcGcNK,oOaJfTF`JfTF`JfTF`JfTF`ruHamJcLB&JcLB&JcLB&JcLB&JcPcMJeEYJJeEYJJeEYJJeEYJ
JeEYJ!"snaJcLB&JcLB&JcLB&JcLB&JcPfNKHGdfJffRdJffRdJffRdJffRdrZ?^lJcLB&JcLB&JcLB&
JcLB&JcGcNK+ihMJeN_LJeN_LJeN_LJeN_LrtC%cJcLB&JcLB&JcLB&JcLB&JcPcMJfoXfJfoXfJfoXf
JfoXfJfoXf!$HmoJcLB&JcLB&JcLB&JcLB&JcPfNKG9"PJeWeNJeWeNJeWeNJeWeNrY0qaJcLB&JcLB&
JcLB&JcLB&JcGcNK->giJg#^hJg#^hJg#^hJg#^hrum$qJcLB&JcLB&JcLB&JcLB&JcPcMJeWeNJeWeN
JeWeNJeWeNJeWeN!#1%cJcLB&JcLB&JcLB&JcLB&JcPfNKHc!lJg,djJg,djJg,djJg,djrZZpoJcLB&
JcLB&JcLB&JcLB&JcGcNK,&tQJe`kPJe`kPJe`kPJe`kPrtU1eJcLB&JcLB&JcLB&JcLB&JcPcMJg>pn
Jg>pnJg>pnJg>pnJg>pn!$m0sJcLB&JcLB&JcLB&JcLB&JcPfNKGK.TJeiqRJeiqRJeiqRJeiqRrYC(c
JcLB&JcLB&JcLB&JcLB&JcGcNK-c*qJgH!pJgH!pJgH!pJgH!ps!<<uJcLB&JcLB&JcLB&JcLB&JcPcM
JeiqRJeiqRJeiqRJeiqRJeiqR!#C1eJcLB&JcLB&JcLB&JcLB&JcPfNKI)3rJgH!pJgH!pJgH!pJgH!p
r[!-rJcLB&JcLB&JcLB&JcLB&JcGcNK,9+UJes"TJes"TJes"TJes"Trtg=gJcLB&JcLB&JcLB&JcLB&
JcPcMJgZ-tJgZ-tJgZ-tJgZ-tJgZ-t!%3C!JcLB&JcLB&JcLB&JcLB&JcPfNKGT4VJes"TJes"TJes"T
Jes"TrYL.dJcLB&JcLB&JcLB&JcLB&JcGcNK.)="Jgc4!Jgc4!Jgc4!Jgc4!s!WO#JcLB&JcLB&JcLB&
JcLB&JcPcMJf'(VJf'(VJf'(VJf'(VJf'(V!#U=gJcLB&JcLB&JcLB&JcLB&JcPfNKIDF#Jgc4!Jgc4!
Jgc4!Jgc4!r[<?uJcLB&JcLB&JcLB&JcLB&JcGcNK,K7YJf0.XJf0.XJf0.XJf0.Xru$IiJcLB&JcLB&
JcLB&JcLB&JcPcMJgl:#Jgl:#Jgl:#Jgl:#Jgl:#!%EO#JcLB&JcLB&JcLB&JcLB&JcPfNKGf@ZJf0.X
Jf0.XJf0.XJf0.XrY^:fJcLB&JcLB&JcLB&JcLB&JcGcNK.DO(Jh)F'Jh)F'Jh)F'Jh)F's!ra&JcLB&
JcLB&JcLB&JcLB&JcPcMJf94ZJf94ZJf94ZJf94ZJf94Z!#gIiJcLB&JcLB&JcLB&JcLB&JcPfNKI_X)
Jh)F'Jh)F'Jh)F'Jh)F'r[WR#JcLB&JcLB&JcLB&JcLB&JcGcNK,T=[Jf94ZJf94ZJf94ZJf94Zru-Oj
JcLB&JcLB&JcLB&JcLB&JcPcMJh2L)Jh2L)Jh2L)Jh2L)Jh2L)!%`a&JcLB&JcLB&JcLB&JcLB&JcPfN
KH#L^JfB:\JfB:\JfB:\JfB:\rYpFhJcLB&JcLB&JcLB&JcLB&JcGcNK.V[,Jh;R+Jh;R+Jh;R+Jh;R+
s"/m(JcLB&JcLB&JcLB&JcLB&JcPcMJfB:\JfB:\JfB:\JfB:\JfB:\!#pOjJcLB&JcLB&JcLB&JcLB&
JcPfNKIqd-Jh;R+Jh;R+Jh;R+Jh;R+r[i^%JcLB&JcLB&JcLB&JcLB&JcGcNK,]C]JfB:\JfB:\JfB:\
JfB:\ru6UkJcLB&JcLB&JcLB&JcLB&JcPcMJh;R+Jh;R+Jh;R+Jh;R+Jh;R+!%ig'JcLB&JcLB&JcLB&
JcLB&JcPfNKH,R`JfK@^JfK@^JfK@^JfK@^rZ$LiJcLB&JcLB&JcLB&JcLB&JcGcNK.hg0JhM^/JhM^/
JhM^/JhM^/s"B$*JcLB&JcLB&JcLB&JcLB&JcPcMJfTF`JfTF`JfTF`JfTF`JfTF`!$-[lJcLB&JcLB&
JcLB&JcLB&JcPfNKJ8!3JhVd1JhVd1JhVd1JhVd1r\/p(JcLB&JcLB&JcLB&JcLB&JcGcNK,oOaJfTF`
JfTF`JfTF`JfTF`ruHamJcLB&JcLB&JcLB&JcLB&JcPcMJhVd1JhVd1JhVd1JhVd1JhVd1!&0$*JcLB&
JcLB&JcLB&JcLB&JcPfNKH>^dJf]LbJf]LbJf]LbJf]LbrZ6XkJcLB&JcLB&JcLB&JcLB&JcGcNK//$6
Jhhp5Jhhp5Jhhp5Jhhp5s"]6-JcLB&JcLB&JcLB&JcLB&JcPcMJf]LbJf]LbJf]LbJf]LbJf]Lb!$6am
JcLB&JcLB&JcLB&JcLB&JcPfNKJJ-7Jhhp5Jhhp5Jhhp5Jhhp5r\B'*JcLB&JcLB&JcLB&JcLB&JcGcN
K-#UcJf]LbJf]LbJf]LbJf]LbruQgnJcLB&JcLB&JcLB&JcLB&JcPcMJhhp5Jhhp5Jhhp5Jhhp5Jhhp5
!&B0,JcLB&JcLB&JcLB&JcLB&JcPfNKH>^dJf]LbJf]LbJf]LbJf]LbrZ6XkJcLB&JcLB&JcLB&JcLB&
JcGcNK/8*8Jhr!7Jhr!7Jhr!7Jhr!7s"f<.JcLB&JcLB&JcLB&JcLB&JcPcMJffRdJffRdJffRdJffRd
JffRd!$?gnJcLB&JcLB&JcLB&JcLB&JcPfNKJ\9;Ji&'9Ji&'9Ji&'9Ji&'9r\T3,JcLB&JcLB&JcLB&
JcLB&JcGcNK-5agJfoXfJfoXfJfoXfJfoXfrucspJcLB&JcLB&JcLB&JcLB&JcPcMJi/-;Ji/-;Ji/-;
Ji/-;Ji/-;!&]B/JcLB&JcLB&JcLB&JcLB&JcPfNKHPjhJfoXfJfoXfJfoXfJfoXfrZHdmJcLB&JcLB&
JcLB&JcLB&JcGcNK/J6<Ji/-;Ji/-;Ji/-;Ji/-;s##H0JcLB&JcLB&JcLB&JcLB&JcPcMJfoXfJfoXf
JfoXfJfoXfJfoXf!$HmoJcLB&JcLB&JcLB&JcLB&JcPfNKK"KAJiA9?JiA9?JiA9?JiA9?r\oE/JcLB&
JcLB&JcLB&JcLB&JcGcNK-5agJfoXfJfoXfJfoXfJfoXfrucspJcLB&JcLB&JcLB&JcLB&JcPcMJiA9?
JiA9?JiA9?JiA9?JiA9?!&oN1JcLB&JcLB&JcLB&JcLB&JcPfNKHPjhJfoXfJfoXfJfoXfJfoXfrZHdm
JcLB&JcLB&JcLB&JcLB&JcGcNK/\B@JiA9?JiA9?JiA9?JiA9?s#5T2JcLB&JcLB&JcLB&JcLB&JcPcM
JfoXfJfoXfJfoXfJfoXfJfoXf!$HmoJcLB&JcLB&JcLB&JcLB&JcPfNKK"KAJiA9?JiA9?JiA9?JiA9?
r\oE/JcLB&JcLB&JcLB&JcLB&JcGcNK->giJg#^hJg#^hJg#^hJg#^hrum$qJcLB&JcLB&JcLB&JcLB&
JcPcMJiA9?JiA9?JiA9?JiA9?JiA9?!&oN1JcLB&JcLB&JcLB&JcLB&JcPfNKHYpjJg#^hJg#^hJg#^h
Jg#^hrZQjnJcLB&JcLB&JcLB&JcLB&JcGcNK/\B@JiA9?JiA9?JiA9?JiA9?s#5T2JcLB&JcLB&JcLB&
JcLB&JcPcMJg#^hJg#^hJg#^hJg#^hJg#^h!$QspJcLB&JcLB&JcLB&JcLB&JcPfNKK+QCJiJ?AJiJ?A
JiJ?AJiJ?Ar]#K0JcLB&JcLB&JcLB&JcLB&JcGcNK->giJg#^hJg#^hJg#^hJg#^hrum$qJcLB&JcLB&
JcLB&JcLB&JcPcMJiJ?AJiJ?AJiJ?AJiJ?AJiJ?A!'#T2JcLB&JcLB&JcLB&JcLB&JcPfNKHc!lJg,dj
Jg,djJg,djJg,djrZZpoJcLB&JcLB&JcLB&JcLB&JcGcNK/eHBJiJ?AJiJ?AJiJ?AJiJ?As#>Z3JcLB&
JcLB&JcLB&JcLB&JcPcMJg,djJg,djJg,djJg,djJg,dj!$[$qJcLB&JcLB&JcLB&JcLB&JcPfNKK+QC
JiJ?AJiJ?AJiJ?AJiJ?Ar]#K0JcLB&JcLB&JcLB&JcLB&JcGcNK-GmkJg,djJg,djJg,djJg,djs!!*r
JcLB&JcLB&JcLB&JcLB&JcPcMJiSECJiSECJiSECJiSECJiSEC!',Z3JcLB&JcLB&JcLB&JcLB&JcPfN
KHc!lJg,djJg,djJg,djJg,djrZZpoJcLB&JcLB&JcLB&JcLB&JcGcNK/nNDJiSECJiSECJiSECJiSEC
s#G`4JcLB&JcLB&JcLB&JcLB&JcPcMJg,djJg,djJg,djJg,djJg,dj!$[$qJcLB&JcLB&JcLB&JcLB&
JcPfNKK4WEJiSECJiSECJiSECJiSECr],Q1JcLB&JcLB&JcLB&JcLB&JcGcNK-GmkJg,djJg,djJg,dj
Jg,djs!!*rJcLB&JcLB&JcLB&JcLB&JcPcMJiSECJiSECJiSECJiSECJiSEC!',Z3JcLB&JcLB&JcLB&
JcLB&JcPfNKHc!lJg,djJg,djJg,djJg,djrZZpoJcLB&JcLB&JcLB&JcLB&JcGcNK/nNDJiSECJiSEC
JiSECJiSECs#G`4JcLB&JcLB&JcLB&JcLB&JcPcMJg,djJg,djJg,djJg,djJg,dj!$[$qJcLB&JcLB&
JcLB&JcLB&JcPfNKK4WEJiSECJiSECJiSECJiSECr],Q1JcLB&JcLB&JcLB&JcLB&JcGcNK-GmkJg,dj
Jg,djJg,djJg,djs!!*rJcLB&JcLB&JcLB&JcLB&JcPcMJiSECJiSECJiSECJiSECJiSEC!',Z3JcLB&
JcLB&JcLB&JcLB&JcPfNKHc!lJg,djJg,djJg,djJg,djrZZpoJcLB&JcLB&JcLB&JcLB&JcGcNK/nND
JiSECJiSECJiSECJiSECs#G`4JcLB&JcLB&JcLB&JcLB&JcPcMJg,djJg,djJg,djJg,djJg,dj!$[$q
JcLB&JcLB&JcLB&JcLB&JcPfNKKFcIJieQGJieQGJieQGJieQGr]>]3JcLB&JcLB&JcLB&JcLB&JcGcN
K-GmkJg,djJg,djJg,djJg,djs!!*rJcLB&JcLB&JcLB&JcLB&JcPcMJieQGJieQGJieQGJieQGJieQG
!'>f5JcLB&JcLB&JcLB&JcLB&JcPfNKHl'nJg5jlJg5jlJg5jlJg5jlrZd!pJcLB&JcLB&JcLB&JcLB&
JcGcNK0+ZHJieQGJieQGJieQGJieQGs#Yl6JcLB&JcLB&JcLB&JcLB&JcPcMJg5jlJg5jlJg5jlJg5jl
Jg5jl!$d*rJcLB&JcLB&JcLB&JcLB&JcPfNKKFcIJieQGJieQGJieQGJieQGr]>]3JcLB&JcLB&JcLB&
JcLB&JcGcNK-PsmJg5jlJg5jlJg5jlJg5jls!*0sJcLB&JcLB&JcLB&JcLB&JcPcMJieQGJieQGJieQG
JieQGJieQG!'>f5JcLB&JcLB&JcLB&JcLB&JcPfNKHl'nJg5jlJg5jlJg5jlJg5jlrZd!pJcLB&JcLB&
JcLB&JcLB&JcGcNK0+ZHJieQGJieQGJieQGJieQGs#Yl6JcLB&JcLB&JcLB&JcLB&JcPcMJg5jlJg5jl
Jg5jlJg5jlJg5jl!$d*rJcLB&JcLB&JcLB&JcLB&JcPfNKKFcIJieQGJieQGJieQGJieQGr]>]3JcLB&
JcLB&JcLB&JcLB&JcGcNK-PsmJg5jlJg5jlJg5jlJg5jls!*0sJcLB&JcLB&JcLB&JcLB&JcPcMJinWI
JinWIJinWIJinWIJinWI!'Gl6JcLB&JcLB&JcLB&JcLB&JcPfNKHl'nJg5jlJg5jlJg5jlJg5jlrZd!p
JcLB&JcLB&JcLB&JcLB&JcGcNK04`JJinWIJinWIJinWIJinWIs#br7JcLB&JcLB&JcLB&JcLB&JcPcM
Jg5jlJg5jlJg5jlJg5jlJg5jl!$d*rJcLB&JcLB&JcLB&JcLB&JcPfNKKOiKJinWIJinWIJinWIJinWI
r]Gc4JcLB&JcLB&JcLB&JcLB&JcGcNK-PsmJg5jlJg5jlJg5jlJg5jls!*0sJcLB&JcLB&JcLB&JcLB&
JcPcMJinWIJinWIJinWIJinWIJinWI!'Gl6JcLB&JcLB&JcLB&JcLB&JcPfNKHl'nJg5jlJg5jlJg5jl
Jg5jlrZd!pJcLB&JcLB&JcLB&JcLB&JcGcNK04`JJinWIJinWIJinWIJinWIs#br7JcLB&JcLB&JcLB&
JcLB&JcPcMJg5jlJg5jlJg5jlJg5jlJg5jl!$d*rJcLB&JcLB&JcLB&JcLB&JcPfNKKOiKJinWIJinWI
JinWIJinWIr]Gc4JcLB&JcLB&JcLB&JcLB&JcGcNK-PsmJg5jlJg5jlJg5jlJg5jls!*0sJcLB&JcLB&
JcLB&JcLB&JcPcMJj"]KJj"]KJj"]KJj"]KJj"]K!'Pr7JcLB&JcLB&JcLB&JcLB&JcPfNKHl'nJg5jl
Jg5jlJg5jlJg5jlrZd!pJcLB&JcLB&JcLB&JcLB&JcGcNK0=fLJj"]KJj"]KJj"]KJj"]Ks#l#8JcLB&
JcLB&JcLB&JcLB&JcPcMJg>pnJg>pnJg>pnJg>pnJg>pn!$m0sJcLB&JcLB&JcLB&JcLB&JcPfNKKauO
Jj+cMJj+cMJj+cMJj+cMr]Yo6JcLB&JcLB&JcLB&JcLB&JcGcNK-Z$oJg>pnJg>pnJg>pnJg>pns!36t
JcLB&JcLB&JcLB&JcLB&JcPcMJj+cMJj+cMJj+cMJj+cMJj+cM!'Z#8JcLB&JcLB&JcLB&JcLB&JcPfN
KHu-pJg>pnJg>pnJg>pnJg>pnrZm'qJcLB&JcLB&JcLB&JcLB&JcGcNK0FlNJj+cMJj+cMJj+cMJj+cM
s#u)9JcLB&JcLB&JcLB&JcLB&JcPcMJg>pnJg>pnJg>pnJg>pnJg>pn!$m0sJcLB&JcLB&JcLB&JcLB&
JcPfNKKauOJj+cMJj+cMJj+cMJj+cMr]Yo6JcLB&JcLB&JcLB&JcLB&JcGcNK-Z$oJg>pnJg>pnJg>pn
Jg>pns!36tJcLB&JcLB&JcLB&JcLB&JcPcMJj4iOJj4iOJj4iOJj4iOJj4iO!'c)9JcLB&JcLB&JcLB&
JcLB&JcPfNKHu-pJg>pnJg>pnJg>pnJg>pnrZm'qJcLB&JcLB&JcLB&JcLB&JcGcNK0OrPJj4iOJj4iO
Jj4iOJj4iOs$)/:JcLB&JcLB&JcLB&JcLB&JcPcMJg>pnJg>pnJg>pnJg>pnJg>pn!$m0sJcLB&JcLB&
JcLB&JcLB&JcPfNKKk&QJj4iOJj4iOJj4iOJj4iOr]bu7JcLB&JcLB&JcLB&JcLB&JcGcNK-Z$oJg>pn
Jg>pnJg>pnJg>pns!36tJcLB&JcLB&JcLB&JcLB&JcPcMJj4iOJj4iOJj4iOJj4iOJj4iO!'c)9JcLB&
JcLB&JcLB&JcLB&JcPfNKHu-pJg>pnJg>pnJg>pnJg>pnrZm'qJcLB&JcLB&JcLB&JcLB&JcGcNK0OrP
Jj4iOJj4iOJj4iOJj4iOs$)/:JcLB&JcLB&JcLB&JcLB&JcPcMJg>pnJg>pnJg>pnJg>pnJg>pn!$m0s
JcLB&JcLB&JcLB&JcLB&JcPfNKKk&QJj4iOJj4iOJj4iOJj4iOr]bu7JcLB&JcLB&JcLB&JcLB&JcGcN
K-Z$oJg>pnJg>pnJg>pnJg>pns!36tJcLB&JcLB&JcLB&JcLB&JcPcMJj=oQJj=oQJj=oQJj=oQJj=oQ
!'l/:JcLB&JcLB&JcLB&JcLB&JcPfNKHu-pJg>pnJg>pnJg>pnJg>pnrZm'qJcLB&JcLB&JcLB&JcLB&
JcGcNK0Y#RJj=oQJj=oQJj=oQJj=oQs$25;JcLB&JcLB&JcLB&JcLB&JcPcMJg>pnJg>pnJg>pnJg>pn
Jg>pn!$m0sJcLB&JcLB&JcLB&JcLB&JcPfNKKt,SJj=oQJj=oQJj=oQJj=oQr]l&8JcLB&JcLB&JcLB&
JcLB&JcGcNK-Z$oJg>pnJg>pnJg>pnJg>pns!36tJcLB&JcLB&JcLB&JcLB&JcPcMJj=oQJj=oQJj=oQ
Jj=oQJj=oQ!'l/:JcLB&JcLB&JcLB&JcLB&JcPfNKI)3rJgH!pJgH!pJgH!pJgH!pr[!-rJcLB&JcLB&
JcLB&JcLB&JcGcNK0Y#RJj=oQJj=oQJj=oQJj=oQs$25;JcLB&JcLB&JcLB&JcLB&JcPcMJgH!pJgH!p
JgH!pJgH!pJgH!p!%!6tJcLB&JcLB&JcLB&JcLB&JcPfNKKt,SJj=oQJj=oQJj=oQJj=oQr]l&8JcLB&
JcLB&JcLB&JcLB&JcGcNK-c*qJgH!pJgH!pJgH!pJgH!ps!<<uJcLB&JcLB&JcLB&JcLB&JcPcMJj=oQ
Jj=oQJj=oQJj=oQJj=oQ!'l/:JcLB&JcLB&JcLB&JcLB&JcPfNKI29tJgQ'rJgQ'rJgQ'rJgQ'rr[*3s
JcLB&JcLB&JcLB&JcLB&JcGcNK0k/VJjP&UJjP&UJjP&UJjP&Us$DA=JcLB&JcLB&JcLB&JcLB&JcPcM
JgQ'rJgQ'rJgQ'rJgQ'rJgQ'r!%*<uJcLB&JcLB&JcLB&JcLB&JcPfNKL18WJjP&UJjP&UJjP&UJjP&U
r^)2:JcLB&JcLB&JcLB&JcLB&JcGcNK-l0sJgQ'rJgQ'rJgQ'rJgQ'rs!EC!JcLB&JcLB&JcLB&JcLB&
JcPcMJjP&UJjP&UJjP&UJjP&UJjP&U!();<JcLB&JcLB&JcLB&JcLB&JcPfNKI29tJgQ'rJgQ'rJgQ'r
JgQ'rr[*3sJcLB&JcLB&JcLB&JcLB&JcGcNK0k/VJjP&UJjP&UJjP&UJjP&Us$DA=JcLB&JcLB&JcLB&
JcLB&JcPcMJgQ'rJgQ'rJgQ'rJgQ'rJgQ'r!%*<uJcLB&JcLB&JcLB&JcLB&JcPfNKL18WJjP&UJjP&U
JjP&UJjP&Ur^)2:JcLB&JcLB&JcLB&JcLB&JcGcNK-l0sJgQ'rJgQ'rJgQ'rJgQ'rs!EC!JcLB&JcLB&
JcLB&JcLB&JcPcMJjP&UJjP&UJjP&UJjP&UJjP&U!();<JcLB&JcLB&JcLB&JcLB&JcPfNKI29tJgQ'r
JgQ'rJgQ'rJgQ'rr[*3sJcLB&JcLB&JcLB&JcLB&JcGcNK0t5XJjY,WJjY,WJjY,WJjY,Ws$MG>JcLB&
JcLB&JcLB&JcLB&JcPcMJgQ'rJgQ'rJgQ'rJgQ'rJgQ'r!%*<uJcLB&JcLB&JcLB&JcLB&JcPfNKL:>Y
JjY,WJjY,WJjY,WJjY,Wr^28;JcLB&JcLB&JcLB&JcLB&JcGcNK-l0sJgQ'rJgQ'rJgQ'rJgQ'rs!EC!
JcLB&JcLB&JcLB&JcLB&JcPcMJjY,WJjY,WJjY,WJjY,WJjY,W!(2A=JcLB&JcLB&JcLB&JcLB&JcPfN
KI29tJgQ'rJgQ'rJgQ'rJgQ'rr[*3sJcLB&JcLB&JcLB&JcLB&JcGcNK0t5XJjY,WJjY,WJjY,WJjY,W
s$MG>JcLB&JcLB&JcLB&JcLB&JcPcMJgZ-tJgZ-tJgZ-tJgZ-tJgZ-t!%3C!JcLB&JcLB&JcLB&JcLB&
JcPfNKL:>YJjY,WJjY,WJjY,WJjY,Wr^28;JcLB&JcLB&JcLB&JcLB&JcGcNK-u6uJgZ-tJgZ-tJgZ-t
JgZ-ts!NI"JcLB&JcLB&JcLB&JcLB&JcPcMJjY,WJjY,WJjY,WJjY,WJjY,W!(2A=JcLB&JcLB&JcLB&
JcLB&JcPfNKI;@!JgZ-tJgZ-tJgZ-tJgZ-tr[39tJcLB&JcLB&JcLB&JcLB&JcGcNK11A\Jjk8[Jjk8[
Jjk8[Jjk8[s$_S@JcLB&JcLB&JcLB&JcLB&JcPcMJgZ-tJgZ-tJgZ-tJgZ-tJgZ-t!%3C!JcLB&JcLB&
JcLB&JcLB&JcPfNKLLJ]Jjk8[Jjk8[Jjk8[Jjk8[r^DD=JcLB&JcLB&JcLB&JcLB&JcGcNK-u6uJgZ-t
JgZ-tJgZ-tJgZ-ts!NI"JcLB&JcLB&JcLB&JcLB&JcPcMJjk8[Jjk8[Jjk8[Jjk8[Jjk8[!(DM?JcLB&
JcLB&JcLB&JcLB&JcPfNKI;@!JgZ-tJgZ-tJgZ-tJgZ-tr[39tJcLB&JcLB&JcLB&JcLB&JcGcNK11A\
Jjk8[Jjk8[Jjk8[Jjk8[s$_S@JcLB&JcLB&JcLB&JcLB&JcPcMJgZ-tJgZ-tJgZ-tJgZ-tJgZ-t!%3C!
JcLB&JcLB&JcLB&JcLB&JcPfNKLLJ]Jjk8[Jjk8[Jjk8[Jjk8[r^DD=JcLB&JcLB&JcLB&JcLB&JcGcN
K-u6uJgZ-tJgZ-tJgZ-tJgZ-ts!NI"JcLB&JcLB&JcLB&JcLB&JcPcMJjk8[Jjk8[Jjk8[Jjk8[Jjk8[
!(DM?JcLB&JcLB&JcLB&JcLB&JcPfNKI;@!JgZ-tJgZ-tJgZ-tJgZ-tr[39tJcLB&JcLB&JcLB&JcLB&
JcGcNK11A\Jjk8[Jjk8[Jjk8[Jjk8[s$_S@JcLB&JcLB&JcLB&JcLB&JcPcMJgZ-tJgZ-tJgZ-tJgZ-t
JgZ-t!%3C!JcLB&JcLB&JcLB&JcLB&JcPfNKLUP_Jjt>]Jjt>]Jjt>]Jjt>]r^MJ>JcLB&JcLB&JcLB&
JcLB&JcGcNK-u6uJgZ-tJgZ-tJgZ-tJgZ-ts!NI"JcLB&JcLB&JcLB&JcLB&JcPcMJjt>]Jjt>]Jjt>]
Jjt>]Jjt>]!(MS@JcLB&JcLB&JcLB&JcLB&JcPfNKI;@!JgZ-tJgZ-tJgZ-tJgZ-tr[39tJcLB&JcLB&
JcLB&JcLB&JcGcNK1:G^Jjt>]Jjt>]Jjt>]Jjt>]s$hYAJcLB&JcLB&JcLB&JcLB&JcPcMJgZ-tJgZ-t
JgZ-tJgZ-tJgZ-t!%3C!JcLB&JcLB&JcLB&JcLB&JcPfNKLUP_Jjt>]Jjt>]Jjt>]Jjt>]r^MJ>JcLB&
JcLB&JcLB&JcLB&JcGcNK.)="Jgc4!Jgc4!Jgc4!Jgc4!s!WO#JcLB&JcLB&JcLB&JcLB&JcPcMJjt>]
Jjt>]Jjt>]Jjt>]Jjt>]!(MS@JcLB&JcLB&JcLB&JcLB&JcPfNKIDF#Jgc4!Jgc4!Jgc4!Jgc4!r[<?u
JcLB&JcLB&JcLB&JcLB&JcGcNK1:G^Jjt>]Jjt>]Jjt>]Jjt>]s$hYAJcLB&JcLB&JcLB&JcLB&JcPcM
Jgc4!Jgc4!Jgc4!Jgc4!Jgc4!!%<I"JcLB&JcLB&JcLB&JcLB&JcPfNKLg\cJk1JaJk1JaJk1JaJk1Ja
r^_V@JcLB&JcLB&JcLB&JcLB&JcGcNK.)="Jgc4!Jgc4!Jgc4!Jgc4!s!WO#JcLB&JcLB&JcLB&JcLB&
JcPcMJk1JaJk1JaJk1JaJk1JaJk1Ja!(__BJcLB&JcLB&JcLB&JcLB&JcPfNKIDF#Jgc4!Jgc4!Jgc4!
Jgc4!r[<?uJcLB&JcLB&JcLB&JcLB&JcGcNK1LSbJk1JaJk1JaJk1JaJk1Jas%%eCJcLB&JcLB&JcLB&
JcLB&JcPcMJgc4!Jgc4!Jgc4!Jgc4!Jgc4!!%<I"JcLB&JcLB&JcLB&JcLB&JcPfNKLg\cJk1JaJk1Ja
Jk1JaJk1Jar^_V@JcLB&JcLB&JcLB&JcLB&JcGcNK.)="Jgc4!Jgc4!Jgc4!Jgc4!s!WO#JcLB&JcLB&
JcLB&JcLB&JcPcMJk1JaJk1JaJk1JaJk1JaJk1Ja!(__BJcLB&JcLB&JcLB&JcLB&JcPfNKIDF#Jgc4!
Jgc4!Jgc4!Jgc4!r[<?uJcLB&JcLB&JcLB&JcLB&JcGcNK1LSbJk1JaJk1JaJk1JaJk1Jas%%eCJcLB&
JcLB&JcLB&JcLB&JcPcMJgc4!Jgc4!Jgc4!Jgc4!Jgc4!!%<I"JcLB&JcLB&JcLB&JcLB&JcPfNKLpbe
Jk:PcJk:PcJk:PcJk:Pcr^h\AJcLB&JcLB&JcLB&JcLB&JcGcNK.)="Jgc4!Jgc4!Jgc4!Jgc4!s!WO#
JcLB&JcLB&JcLB&JcLB&JcPcMJk:PcJk:PcJk:PcJk:PcJk:Pc!(heCJcLB&JcLB&JcLB&JcLB&JcPfN
KIDF#Jgc4!Jgc4!Jgc4!Jgc4!r[<?uJcLB&JcLB&JcLB&JcLB&JcGcNK1UYdJk:PcJk:PcJk:PcJk:Pc
s%.kDJcLB&JcLB&JcLB&JcLB&JcPcMJ,~>

%%EndBinary
grestore
np
655.699 216.811 mo
47.311 216.811 li
47.311 195.919 li
655.699 195.919 li
655.699 216.811 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 511.909 ]ct
[610.08 0 0 22.08 46.56 294.469 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 1271 
/H 46 
/M[1271 0 0 -46 0 46 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 1271 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&rW%NM
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPcMJcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&rr@]RJc^N*Jc^N*Jc^N*Jc^N*JcboQJcLB&
JcLB&JcLB&JcLB&JcLB&!!%WQJc^N*Jc^N*Jc^N*Jc^N*JcbrRKE-T(JcLB&JcLB&JcLB&JcLB&rW%NQ
JcpZ.JcpZ.JcpZ.JcpZ.Jcl&VK)gK'JcLB&JcLB&JcLB&JcLB&rr@]WJd6l4Jd6l4Jd6l4Jd6l4Jd;8[
JcLB&JcLB&JcLB&JcLB&JcLB&!!%WVJd6l4Jd6l4Jd6l4Jd6l4Jd;;\KE-T(JcLB&JcLB&JcLB&JcLB&
rW%NXJd[/<Jd[/<Jd[/<Jd[/<JdVPdK)gK'JcLB&JcLB&JcLB&JcLB&rr@]YJdI#8JdI#8JdI#8JdI#8
JdMD_JcLB&JcLB&JcLB&JcLB&JcLB&!!%W_Je3MFJe3MFJe3MFJe3MFJe7qnKE-T(JcLB&JcLB&JcLB&
JcLB&rW%NYJdd5>Jdd5>Jdd5>Jdd5>Jd_VfK)gK'JcLB&JcLB&JcLB&JcLB&rr@]dJeWeNJeWeNJeWeN
JeWeNJe\1uJcLB&JcLB&JcLB&JcLB&JcLB&!!%W]Je!ABJe!ABJe!ABJe!ABJe%ejKE-T(JcLB&JcLB&
JcLB&JcLB&rW%NeJf'(VJf'(VJf'(VJf'(VJf"J)K)gK'JcLB&JcLB&JcLB&JcLB&rr@]`Je3MFJe3MF
Je3MFJe3MFJe7nmJcLB&JcLB&JcLB&JcLB&JcLB&!!%WlJfTF`JfTF`JfTF`JfTF`JfXk3KE-T(JcLB&
JcLB&JcLB&JcLB&rW%N`JeN_LJeN_LJeN_LJeN_LJeJ+tK)gK'JcLB&JcLB&JcLB&JcLB&rr@]pJfoXf
JfoXfJfoXfJfoXfJft%8JcLB&JcLB&JcLB&JcLB&JcLB&!!%WdJe`kPJe`kPJe`kPJe`kPJee;#KE-T(
JcLB&JcLB&JcLB&JcLB&rW%NqJg>pnJg>pnJg>pnJg>pnJg:=AK)gK'JcLB&JcLB&JcLB&JcLB&rr@]g
Jes"TJes"TJes"TJes"TJf"D&JcLB&JcLB&JcLB&JcLB&JcLB&!!%X!JgZ-tJgZ-tJgZ-tJgZ-tJg^RG
KE-T(JcLB&JcLB&JcLB&JcLB&rW%NfJf0.XJf0.XJf0.XJf0.XJf+P+K)gK'JcLB&JcLB&JcLB&JcLB&
rr@^$Jgl:#Jgl:#Jgl:#Jgl:#Jgp[JJcLB&JcLB&JcLB&JcLB&JcLB&!!%WiJf94ZJf94ZJf94ZJf94Z
Jf=Y-KE-T(JcLB&JcLB&JcLB&JcLB&rW%O$Jh2L)Jh2L)Jh2L)Jh2L)Jh-mQK)gK'JcLB&JcLB&JcLB&
JcLB&rr@]lJfK@^JfK@^JfK@^JfK@^JfOb0JcLB&JcLB&JcLB&JcLB&JcLB&!!%X)JhM^/JhM^/JhM^/
JhM^/JhR-WKE-T(JcLB&JcLB&JcLB&JcLB&rW%NjJfTF`JfTF`JfTF`JfTF`JfOh3K)gK'JcLB&JcLB&
JcLB&JcLB&rr@^-Jhhp5Jhhp5Jhhp5Jhhp5Jhm<\JcLB&JcLB&JcLB&JcLB&JcLB&!!%WmJf]LbJf]Lb
Jf]LbJf]LbJfaq5KE-T(JcLB&JcLB&JcLB&JcLB&rW%O+Jhr!7Jhr!7Jhr!7Jhr!7JhmB_K)gK'JcLB&
JcLB&JcLB&JcLB&rr@]oJffRdJffRdJffRdJffRdJfjt6JcLB&JcLB&JcLB&JcLB&JcLB&!!%X/Ji/-;
Ji/-;Ji/-;Ji/-;Ji3QcKE-T(JcLB&JcLB&JcLB&JcLB&rW%NmJfoXfJfoXfJfoXfJfoXfJfk%9K)gK'
JcLB&JcLB&JcLB&JcLB&rr@^2JiA9?JiA9?JiA9?JiA9?JiEZfJcLB&JcLB&JcLB&JcLB&JcLB&!!%Wp
Jg#^hJg#^hJg#^hJg#^hJg(.;KE-T(JcLB&JcLB&JcLB&JcLB&rW%O/JiA9?JiA9?JiA9?JiA9?Ji<Zg
K)gK'JcLB&JcLB&JcLB&JcLB&rr@]qJg#^hJg#^hJg#^hJg#^hJg(+:JcLB&JcLB&JcLB&JcLB&JcLB&
!!%X2JiJ?AJiJ?AJiJ?AJiJ?AJiNciKE-T(JcLB&JcLB&JcLB&JcLB&rW%NoJg,djJg,djJg,djJg,dj
Jg(1=K)gK'JcLB&JcLB&JcLB&JcLB&rr@^4JiSECJiSECJiSECJiSECJiWfjJcLB&JcLB&JcLB&JcLB&
JcLB&!!%WqJg,djJg,djJg,djJg,djJg14=KE-T(JcLB&JcLB&JcLB&JcLB&rW%O1JiSECJiSECJiSEC
JiSECJiNfkK)gK'JcLB&JcLB&JcLB&JcLB&rr@]rJg,djJg,djJg,djJg,djJg11<JcLB&JcLB&JcLB&
JcLB&JcLB&!!%X3JiSECJiSECJiSECJiSECJiWikKE-T(JcLB&JcLB&JcLB&JcLB&rW%NoJg,djJg,dj
Jg,djJg,djJg(1=K)gK'JcLB&JcLB&JcLB&JcLB&rr@^6JieQGJieQGJieQGJieQGJiirnJcLB&JcLB&
JcLB&JcLB&JcLB&!!%WrJg5jlJg5jlJg5jlJg5jlJg::?KE-T(JcLB&JcLB&JcLB&JcLB&rW%O3JieQG
JieQGJieQGJieQGJi`roK)gK'JcLB&JcLB&JcLB&JcLB&rr@]sJg5jlJg5jlJg5jlJg5jlJg:7>JcLB&
JcLB&JcLB&JcLB&JcLB&!!%X6JinWIJinWIJinWIJinWIJis&qKE-T(JcLB&JcLB&JcLB&JcLB&rW%Np
Jg5jlJg5jlJg5jlJg5jlJg17?K)gK'JcLB&JcLB&JcLB&JcLB&rr@^7JinWIJinWIJinWIJinWIJis#p
JcLB&JcLB&JcLB&JcLB&JcLB&!!%WrJg5jlJg5jlJg5jlJg5jlJg::?KE-T(JcLB&JcLB&JcLB&JcLB&
rW%O5Jj"]KJj"]KJj"]KJj"]KJis)sK)gK'JcLB&JcLB&JcLB&JcLB&rr@]tJg>pnJg>pnJg>pnJg>pn
JgC=@JcLB&JcLB&JcLB&JcLB&JcLB&!!%X8Jj+cMJj+cMJj+cMJj+cMJj02uKE-T(JcLB&JcLB&JcLB&
JcLB&rW%NqJg>pnJg>pnJg>pnJg>pnJg:=AK)gK'JcLB&JcLB&JcLB&JcLB&rr@^:Jj4iOJj4iOJj4iO
Jj4iOJj96!JcLB&JcLB&JcLB&JcLB&JcLB&!!%WsJg>pnJg>pnJg>pnJg>pnJgC@AKE-T(JcLB&JcLB&
JcLB&JcLB&rW%O7Jj4iOJj4iOJj4iOJj4iOJj06"K)gK'JcLB&JcLB&JcLB&JcLB&rr@]tJg>pnJg>pn
Jg>pnJg>pnJgC=@JcLB&JcLB&JcLB&JcLB&JcLB&!!%X:Jj=oQJj=oQJj=oQJj=oQJjB?$KE-T(JcLB&
JcLB&JcLB&JcLB&rW%NrJgH!pJgH!pJgH!pJgH!pJgCCCK)gK'JcLB&JcLB&JcLB&JcLB&rr@^;Jj=oQ
Jj=oQJj=oQJj=oQJjB<#JcLB&JcLB&JcLB&JcLB&JcLB&!!%WuJgQ'rJgQ'rJgQ'rJgQ'rJgULEKE-T(
JcLB&JcLB&JcLB&JcLB&rW%O:JjP&UJjP&UJjP&UJjP&UJjKH(K)gK'JcLB&JcLB&JcLB&JcLB&rr@^!
JgQ'rJgQ'rJgQ'rJgQ'rJgUIDJcLB&JcLB&JcLB&JcLB&JcLB&!!%X<JjP&UJjP&UJjP&UJjP&UJjTK(
KE-T(JcLB&JcLB&JcLB&JcLB&rW%NsJgQ'rJgQ'rJgQ'rJgQ'rJgLIEK)gK'JcLB&JcLB&JcLB&JcLB&
rr@^>JjY,WJjY,WJjY,WJjY,WJj]N)JcLB&JcLB&JcLB&JcLB&JcLB&!!%WuJgQ'rJgQ'rJgQ'rJgQ'r
JgULEKE-T(JcLB&JcLB&JcLB&JcLB&rW%O;JjY,WJjY,WJjY,WJjY,WJjTN*K)gK'JcLB&JcLB&JcLB&
JcLB&rr@^"JgZ-tJgZ-tJgZ-tJgZ-tJg^OFJcLB&JcLB&JcLB&JcLB&JcLB&!!%X?Jjk8[Jjk8[Jjk8[
Jjk8[Jjo].KE-T(JcLB&JcLB&JcLB&JcLB&rW%NtJgZ-tJgZ-tJgZ-tJgZ-tJgUOGK)gK'JcLB&JcLB&
JcLB&JcLB&rr@^@Jjk8[Jjk8[Jjk8[Jjk8[JjoZ-JcLB&JcLB&JcLB&JcLB&JcLB&!!%X!JgZ-tJgZ-t
JgZ-tJgZ-tJg^RGKE-T(JcLB&JcLB&JcLB&JcLB&rW%O=Jjk8[Jjk8[Jjk8[Jjk8[JjfZ.K)gK'JcLB&
JcLB&JcLB&JcLB&rr@^"JgZ-tJgZ-tJgZ-tJgZ-tJg^OFJcLB&JcLB&JcLB&JcLB&JcLB&!!%X@Jjt>]
Jjt>]Jjt>]Jjt>]Jk#c0KE-T(JcLB&JcLB&JcLB&JcLB&rW%NuJgc4!Jgc4!Jgc4!Jgc4!Jg^UIK)gK'
JcLB&JcLB&JcLB&JcLB&rr@^AJjt>]Jjt>]Jjt>]Jjt>]Jk#`/JcLB&JcLB&JcLB&JcLB&JcLB&!!%X"
Jgc4!Jgc4!Jgc4!Jgc4!JggXIKE-T(JcLB&JcLB&JcLB&JcLB&rW%O@Jk1JaJk1JaJk1JaJk1JaJk,l4
K)gK'JcLB&JcLB&JcLB&JcLB&rr@^#Jgc4!Jgc4!Jgc4!Jgc4!JggUHJcLB&JcLB&JcLB&JcLB&JcLB&
!!%XBJk1JaJk1JaJk1JaJk1JaJk5o4KE-T(JcLB&JcLB&JcLB&JcLB&rW%NuJgc4!Jgc4!Jgc4!Jgc4!
Jg^UIK)gK'JcLB&JcLB&JcLB&JcLB&rr@^DJk:PcJk:PcJk:PcJk:PcJk>r5JcLB&JcLB&JcLB&JcLB&
JcLB&!!%N~>

%%EndBinary
grestore
np
48.2481 7.35008 mo
244.416 24.416 li
440.575 101.118 li
636.767 188.383 li
637.339 187.097 li
441.117 99.8186 li
244.74 23.0313 li
48.3701 5.94777 li
48.2481 7.35008 li
cp
.659174 .184604 1 .0302739 cmyk
f
54.4907 6.64014 mo
54.4907 3.22852 51.7212 .458984 48.3091 .458984 cv
44.8975 .458984 42.1279 3.22852 42.1279 6.64014 cv
42.1279 10.0522 44.8975 12.8213 48.3091 12.8213 cv
51.7212 12.8213 54.4907 10.0522 54.4907 6.64014 cv
cp
f
54.9497 6.64014 mo
54.9492 2.97456 51.9751 .000487089 48.3091 -1.57356e-05 cv
44.6435 .000501633 41.6694 2.97456 41.6689 6.64014 cv
41.6694 10.3062 44.6436 13.2798 48.3091 13.2803 cv
51.9751 13.2798 54.9492 10.3062 54.9497 6.64014 cv
54.0317 6.64014 li
54.0315 8.22072 53.3915 9.64844 52.3549 10.6857 cv
51.3176 11.7222 49.8897 12.3621 48.3091 12.3623 cv
46.7287 12.3621 45.301 11.7222 44.2637 10.6857 cv
43.2271 9.64845 42.5871 8.22073 42.5869 6.64014 cv
42.5871 5.05981 43.2271 3.63206 44.2637 2.59476 cv
45.301 1.55818 46.7287 .918196 48.3091 .917984 cv
49.8897 .918197 51.3175 1.55819 52.3549 2.59477 cv
53.3915 3.63207 54.0315 5.0598 54.0317 6.64014 cv
54.9497 6.64014 li
cp
f
250.811 23.6802 mo
250.811 20.2686 248.042 17.499 244.629 17.499 cv
241.217 17.499 238.448 20.2686 238.448 23.6802 cv
238.448 27.0923 241.217 29.8613 244.629 29.8613 cv
248.042 29.8613 250.811 27.0923 250.811 23.6802 cv
cp
f
251.27 23.6802 mo
251.269 20.0146 248.295 17.0405 244.629 17.04 cv
240.963 17.0405 237.99 20.0146 237.989 23.6802 cv
237.99 27.3462 240.963 30.3199 244.629 30.3203 cv
248.295 30.3199 251.269 27.3462 251.27 23.6802 cv
250.352 23.6802 li
250.351 25.2608 249.711 26.6885 248.675 27.7257 cv
247.638 28.7622 246.21 29.4021 244.629 29.4023 cv
243.049 29.4021 241.621 28.7622 240.584 27.7257 cv
239.547 26.6885 238.907 25.2608 238.907 23.6802 cv
238.907 22.0998 239.547 20.6721 240.584 19.6348 cv
241.621 18.5982 243.049 17.9582 244.629 17.958 cv
246.21 17.9582 247.638 18.5982 248.675 19.6348 cv
249.711 20.6721 250.351 22.0998 250.352 23.6802 cv
251.27 23.6802 li
cp
f
447.01 100.48 mo
447.01 97.0684 444.242 94.2993 440.83 94.2993 cv
437.417 94.2993 434.648 97.0684 434.648 100.48 cv
434.648 103.893 437.417 106.662 440.83 106.662 cv
444.242 106.662 447.01 103.893 447.01 100.48 cv
cp
f
447.469 100.48 mo
447.469 96.8145 444.496 93.8408 440.83 93.8403 cv
437.164 93.8408 434.189 96.8144 434.189 100.48 cv
434.189 104.147 437.164 107.12 440.83 107.121 cv
444.496 107.12 447.469 104.146 447.469 100.48 cv
446.551 100.48 li
446.551 102.061 445.911 103.489 444.875 104.526 cv
443.838 105.563 442.41 106.202 440.83 106.203 cv
439.249 106.202 437.821 105.563 436.784 104.526 cv
435.747 103.489 435.107 102.061 435.107 100.48 cv
435.107 98.8999 435.747 97.4722 436.784 96.4349 cv
437.821 95.3984 439.249 94.7585 440.83 94.7583 cv
442.41 94.7585 443.838 95.3984 444.875 96.4349 cv
445.911 97.4721 446.551 98.8998 446.551 100.48 cv
447.469 100.48 li
cp
f
643.21 187.72 mo
643.21 184.308 640.441 181.539 637.029 181.539 cv
633.618 181.539 630.848 184.308 630.848 187.72 cv
630.848 191.132 633.618 193.901 637.029 193.901 cv
640.441 193.901 643.21 191.132 643.21 187.72 cv
cp
f
643.669 187.72 mo
643.669 184.054 640.695 181.081 637.029 181.08 cv
633.364 181.081 630.39 184.054 630.389 187.72 cv
630.39 191.386 633.364 194.36 637.029 194.36 cv
640.695 194.36 643.669 191.386 643.669 187.72 cv
642.751 187.72 li
642.751 189.301 642.111 190.729 641.075 191.766 cv
640.037 192.802 638.609 193.442 637.029 193.442 cv
635.449 193.442 634.021 192.802 632.984 191.766 cv
631.947 190.729 631.307 189.301 631.307 187.72 cv
631.307 186.14 631.947 184.712 632.984 183.675 cv
634.021 182.638 635.449 181.998 637.029 181.998 cv
638.609 181.998 640.037 182.638 641.075 183.675 cv
642.111 184.712 642.751 186.14 642.751 187.72 cv
643.669 187.72 li
cp
f
48.2867 171.552 mo
146.36 174.672 li
244.502 186.481 li
342.631 196.275 li
391.74 198.357 li
440.836 199.643 li
489.864 199.888 li
538.946 200.132 li
637.051 200.439 li
656.757 200.5 li
656.761 199.092 li
637.055 199.031 li
538.952 198.725 li
489.871 198.48 li
440.856 198.235 li
391.786 196.95 li
342.731 194.871 li
244.654 185.082 li
146.466 173.267 li
48.3315 170.145 li
48.2867 171.552 li
cp
.648646 1 .217533 .0788281 cmyk
f
49.6861 170.848 mo
49.6861 168.523 li
46.9321 168.523 li
46.9321 170.848 li
f
46.9321 170.848 mo
46.9321 173.174 li
49.6861 173.174 li
49.6861 170.848 li
f
147.79 173.97 mo
147.79 169.441 li
145.036 169.441 li
145.036 173.97 li
f
145.036 173.97 mo
145.036 178.56 li
147.79 178.56 li
147.79 173.97 li
f
245.955 185.781 mo
245.955 182.599 li
243.201 182.599 li
243.201 185.781 li
f
243.201 185.781 mo
243.201 188.963 li
245.955 188.963 li
245.955 185.781 li
f
344.058 195.573 mo
344.058 193.921 li
341.304 193.921 li
341.304 195.573 li
f
341.304 195.573 mo
341.304 197.287 li
344.058 197.287 li
344.058 195.573 li
f
393.14 197.654 mo
393.14 197.226 li
390.386 197.226 li
390.386 197.654 li
f
390.386 197.654 mo
390.386 198.083 li
393.14 198.083 li
393.14 197.654 li
f
442.223 198.939 mo
442.223 198.817 li
439.469 198.817 li
439.469 198.939 li
f
439.469 198.939 mo
439.469 199 li
442.223 199 li
442.223 198.939 li
f
491.245 199.184 mo
491.245 199.123 li
488.491 199.123 li
488.491 199.184 li
f
488.491 199.184 mo
488.491 199.306 li
491.245 199.306 li
491.245 199.184 li
f
540.327 199.429 mo
540.327 199.368 li
537.573 199.368 li
537.573 199.429 li
f
537.573 199.429 mo
537.573 199.551 li
540.327 199.551 li
540.327 199.429 li
f
638.43 199.735 mo
638.43 199.612 li
635.676 199.612 li
635.676 199.735 li
f
635.676 199.735 mo
635.676 199.857 li
638.43 199.857 li
638.43 199.735 li
f
43.0459 176.111 mo
43.0459 165.585 li
53.5723 165.585 li
53.5723 176.111 li
43.0459 176.111 li
cp
f
43.0459 176.111 mo
43.5049 176.111 li
43.5049 166.044 li
53.1133 166.044 li
53.1133 175.652 li
43.0459 175.652 li
43.0459 176.111 li
43.5049 176.111 li
43.0459 176.111 li
43.0459 176.57 li
54.0313 176.57 li
54.0313 165.126 li
42.5869 165.126 li
42.5869 176.57 li
43.0459 176.57 li
43.0459 176.111 li
cp
f
141.211 179.233 mo
141.211 168.768 li
151.676 168.768 li
151.676 179.233 li
141.211 179.233 li
cp
f
141.211 179.233 mo
141.67 179.233 li
141.67 169.227 li
151.217 169.227 li
151.217 178.774 li
141.211 178.774 li
141.211 179.233 li
141.67 179.233 li
141.211 179.233 li
141.211 179.692 li
152.135 179.692 li
152.135 168.309 li
140.752 168.309 li
140.752 179.692 li
141.211 179.692 li
141.211 179.233 li
cp
f
239.314 191.044 mo
239.314 180.518 li
249.841 180.518 li
249.841 191.044 li
239.314 191.044 li
cp
f
239.314 191.044 mo
239.773 191.044 li
239.773 180.977 li
249.382 180.977 li
249.382 190.585 li
239.314 190.585 li
239.314 191.044 li
239.773 191.044 li
239.314 191.044 li
239.314 191.503 li
250.3 191.503 li
250.3 180.059 li
238.855 180.059 li
238.855 191.503 li
239.314 191.503 li
239.314 191.044 li
cp
f
337.418 200.836 mo
337.418 190.31 li
347.945 190.31 li
347.945 200.836 li
337.418 200.836 li
cp
f
337.418 200.836 mo
337.877 200.836 li
337.877 190.769 li
347.486 190.769 li
347.486 200.377 li
337.418 200.377 li
337.418 200.836 li
337.877 200.836 li
337.418 200.836 li
337.418 201.295 li
348.404 201.295 li
348.404 189.851 li
336.959 189.851 li
336.959 201.295 li
337.418 201.295 li
337.418 200.836 li
cp
f
386.5 202.917 mo
386.5 192.391 li
397.027 192.391 li
397.027 202.917 li
386.5 202.917 li
cp
f
386.5 202.917 mo
386.959 202.917 li
386.959 192.85 li
396.568 192.85 li
396.568 202.458 li
386.5 202.458 li
386.5 202.917 li
386.959 202.917 li
386.5 202.917 li
386.5 203.376 li
397.486 203.376 li
397.486 191.932 li
386.041 191.932 li
386.041 203.376 li
386.5 203.376 li
386.5 202.917 li
cp
f
435.583 204.141 mo
435.583 193.676 li
446.109 193.676 li
446.109 204.141 li
435.583 204.141 li
cp
f
435.583 204.141 mo
436.042 204.141 li
436.042 194.135 li
445.65 194.135 li
445.65 203.682 li
435.583 203.682 li
435.583 204.141 li
436.042 204.141 li
435.583 204.141 li
435.583 204.6 li
446.568 204.6 li
446.568 193.217 li
435.124 193.217 li
435.124 204.6 li
435.583 204.6 li
435.583 204.141 li
cp
f
484.666 204.447 mo
484.666 193.982 li
495.13 193.982 li
495.13 204.447 li
484.666 204.447 li
cp
f
484.666 204.447 mo
485.125 204.447 li
485.125 194.441 li
494.671 194.441 li
494.671 203.988 li
484.666 203.988 li
484.666 204.447 li
485.125 204.447 li
484.666 204.447 li
484.666 204.906 li
495.589 204.906 li
495.589 193.523 li
484.207 193.523 li
484.207 204.906 li
484.666 204.906 li
484.666 204.447 li
cp
f
533.687 204.692 mo
533.687 194.166 li
544.213 194.166 li
544.213 204.692 li
533.687 204.692 li
cp
f
533.687 204.692 mo
534.146 204.692 li
534.146 194.625 li
543.754 194.625 li
543.754 204.233 li
533.687 204.233 li
533.687 204.692 li
534.146 204.692 li
533.687 204.692 li
533.687 205.151 li
544.672 205.151 li
544.672 193.707 li
533.228 193.707 li
533.228 205.151 li
533.687 205.151 li
533.687 204.692 li
cp
f
631.851 204.998 mo
631.851 194.472 li
642.317 194.472 li
642.317 204.998 li
631.851 204.998 li
cp
f
631.851 204.998 mo
632.31 204.998 li
632.31 194.931 li
641.858 194.931 li
641.858 204.539 li
631.851 204.539 li
631.851 204.998 li
632.31 204.998 li
631.851 204.998 li
631.851 205.457 li
642.776 205.457 li
642.776 194.013 li
631.392 194.013 li
631.392 205.457 li
631.851 205.457 li
631.851 204.998 li
cp
f
48.3091 200.133 mo
146.413 200.133 li
244.577 200.194 li
342.684 199.826 li
342.679 199.826 li
391.761 199.949 li
440.845 200.01 li
489.869 199.888 li
489.864 199.888 li
538.946 200.132 li
637.051 200.5 li
656.757 200.561 li
656.761 199.153 li
637.055 199.092 li
538.952 198.725 li
489.865 198.48 li
440.844 198.602 li
440.847 198.602 li
391.764 198.541 li
342.683 198.419 li
244.575 198.786 li
146.414 198.725 li
48.3091 198.725 li
48.3091 200.133 li
cp
0 .408423 1 0 cmyk
f
49.6861 199.429 mo
49.6861 199.368 li
46.9321 199.368 li
46.9321 199.429 li
f
46.9321 199.429 mo
46.9321 199.49 li
49.6861 199.49 li
49.6861 199.429 li
f
145.036 199.429 mo
145.036 199.49 li
147.79 199.49 li
147.79 199.429 li
f
245.955 199.49 mo
245.955 199.368 li
243.201 199.368 li
243.201 199.49 li
f
243.201 199.49 mo
243.201 199.612 li
245.955 199.612 li
245.955 199.49 li
f
344.058 199.123 mo
344.058 199.062 li
341.304 199.062 li
341.304 199.123 li
f
341.304 199.123 mo
341.304 199.245 li
344.058 199.245 li
344.058 199.123 li
f
393.14 199.245 mo
393.14 199.184 li
390.386 199.184 li
390.386 199.245 li
f
390.386 199.245 mo
390.386 199.306 li
393.14 199.306 li
393.14 199.245 li
f
442.223 199.306 mo
442.223 199.245 li
439.469 199.245 li
439.469 199.306 li
f
439.469 199.306 mo
439.469 199.429 li
442.223 199.429 li
442.223 199.306 li
f
491.245 199.184 mo
491.245 199.062 li
488.491 199.062 li
488.491 199.184 li
f
488.491 199.184 mo
488.491 199.306 li
491.245 199.306 li
491.245 199.184 li
f
540.327 199.429 mo
540.327 199.306 li
537.573 199.306 li
537.573 199.429 li
f
537.573 199.429 mo
537.573 199.49 li
540.327 199.49 li
540.327 199.429 li
f
638.43 199.796 mo
638.43 199.673 li
635.676 199.673 li
635.676 199.796 li
f
635.676 199.796 mo
635.676 199.918 li
638.43 199.918 li
638.43 199.796 li
f
48.3091 193.248 mo
42.1279 199.429 li
48.3091 205.61 li
54.4907 199.429 li
48.3091 193.248 li
cp
f
48.3091 193.248 mo
47.9845 192.923 li
41.4788 199.429 li
48.3091 206.259 li
55.1399 199.429 li
48.3091 192.598 li
47.9845 192.923 li
48.3091 193.248 li
47.9845 193.572 li
53.8416 199.429 li
48.3091 204.961 li
42.7771 199.429 li
48.6336 193.572 li
48.3091 193.248 li
47.9845 193.572 li
48.3091 193.248 li
cp
f
146.413 193.248 mo
140.231 199.429 li
146.413 205.61 li
152.594 199.429 li
146.413 193.248 li
cp
f
146.413 193.248 mo
146.089 192.923 li
139.582 199.429 li
146.413 206.259 li
153.243 199.429 li
146.413 192.598 li
146.089 192.923 li
146.413 193.248 li
146.089 193.572 li
151.945 199.429 li
146.413 204.961 li
140.881 199.429 li
146.738 193.572 li
146.413 193.248 li
146.089 193.572 li
146.413 193.248 li
cp
f
244.578 193.309 mo
238.396 199.49 li
244.578 205.671 li
250.759 199.49 li
244.578 193.309 li
cp
f
244.578 193.309 mo
244.253 192.984 li
237.747 199.49 li
244.578 206.32 li
251.408 199.49 li
244.578 192.659 li
244.253 192.984 li
244.578 193.309 li
244.253 193.633 li
250.11 199.49 li
244.578 205.022 li
239.046 199.49 li
244.902 193.633 li
244.578 193.309 li
244.253 193.633 li
244.578 193.309 li
cp
f
342.681 192.941 mo
336.5 199.123 li
342.681 205.304 li
348.863 199.123 li
342.681 192.941 li
cp
f
342.681 192.941 mo
342.357 192.617 li
335.851 199.123 li
342.681 205.953 li
349.512 199.123 li
342.681 192.292 li
342.357 192.617 li
342.681 192.941 li
342.357 193.266 li
348.214 199.123 li
342.681 204.655 li
337.15 199.123 li
343.006 193.266 li
342.681 192.941 li
342.357 193.266 li
342.681 192.941 li
cp
f
391.763 193.064 mo
385.583 199.245 li
391.763 205.426 li
397.945 199.245 li
391.763 193.064 li
cp
f
391.763 193.064 mo
391.439 192.739 li
384.933 199.245 li
391.763 206.075 li
398.594 199.245 li
391.763 192.415 li
391.439 192.739 li
391.763 193.064 li
391.439 193.389 li
397.296 199.245 li
391.763 204.777 li
386.232 199.245 li
392.088 193.389 li
391.763 193.064 li
391.439 193.389 li
391.763 193.064 li
cp
f
440.846 193.125 mo
434.665 199.306 li
440.846 205.487 li
447.027 199.306 li
440.846 193.125 li
cp
f
440.846 193.125 mo
440.522 192.8 li
434.015 199.306 li
440.846 206.136 li
447.676 199.306 li
440.846 192.476 li
440.522 192.8 li
440.846 193.125 li
440.522 193.45 li
446.378 199.306 li
440.846 204.838 li
435.314 199.306 li
441.171 193.45 li
440.846 193.125 li
440.522 193.45 li
440.846 193.125 li
cp
f
489.868 193.003 mo
483.686 199.184 li
489.868 205.365 li
496.048 199.184 li
489.868 193.003 li
cp
f
489.868 193.003 mo
489.543 192.678 li
483.037 199.184 li
489.868 206.014 li
496.697 199.184 li
489.868 192.354 li
489.543 192.678 li
489.868 193.003 li
489.543 193.327 li
495.399 199.184 li
489.868 204.716 li
484.335 199.184 li
490.192 193.327 li
489.868 193.003 li
489.543 193.327 li
489.868 193.003 li
cp
f
538.95 193.248 mo
532.768 199.429 li
538.95 205.61 li
545.13 199.429 li
538.95 193.248 li
cp
f
538.95 193.248 mo
538.625 192.923 li
532.119 199.429 li
538.95 206.259 li
545.779 199.429 li
538.95 192.598 li
538.625 192.923 li
538.95 193.248 li
538.625 193.572 li
544.481 199.429 li
538.95 204.961 li
533.417 199.429 li
539.274 193.572 li
538.95 193.248 li
538.625 193.572 li
538.95 193.248 li
cp
f
637.053 193.615 mo
630.873 199.796 li
637.053 205.977 li
643.235 199.796 li
637.053 193.615 li
cp
f
637.053 193.615 mo
636.729 193.29 li
630.223 199.796 li
637.053 206.626 li
643.884 199.796 li
637.053 192.966 li
636.729 193.29 li
637.053 193.615 li
636.729 193.939 li
642.586 199.796 li
637.053 205.328 li
631.522 199.796 li
637.378 193.939 li
637.053 193.615 li
636.729 193.939 li
637.053 193.615 li
cp
f
48.3086 202.091 mo
146.413 202.152 li
244.579 202.03 li
244.581 202.03 li
342.688 201.601 li
391.772 200.744 li
440.851 200.439 li
440.848 200.439 li
489.869 200.316 li
538.951 200.194 li
538.948 200.194 li
637.051 200.439 li
656.757 200.5 li
656.761 199.092 li
637.055 199.031 li
538.947 198.786 li
489.866 198.908 li
440.839 199.031 li
391.755 199.337 li
342.673 200.194 li
244.575 200.622 li
244.577 200.622 li
146.412 200.744 li
48.3095 200.683 li
48.3086 202.091 li
cp
.892363 .791409 0 0 cmyk
f
48.3091 194.288 mo
42.1279 204.998 li
54.4907 204.998 li
48.3091 194.288 li
cp
f
48.3091 194.288 mo
47.9115 194.059 li
41.333 205.457 li
55.2857 205.457 li
48.3091 193.37 li
47.9115 194.059 li
48.3091 194.288 li
47.9115 194.518 li
53.6958 204.539 li
42.9228 204.539 li
48.7066 194.518 li
48.3091 194.288 li
47.9115 194.518 li
48.3091 194.288 li
cp
f
146.413 194.349 mo
140.231 205.059 li
152.594 205.059 li
146.413 194.349 li
cp
f
146.413 194.349 mo
146.016 194.12 li
139.437 205.518 li
153.389 205.518 li
146.413 193.431 li
146.016 194.12 li
146.413 194.349 li
146.016 194.579 li
151.799 204.6 li
141.026 204.6 li
146.811 194.579 li
146.413 194.349 li
146.016 194.579 li
146.413 194.349 li
cp
f
244.578 194.227 mo
238.396 204.937 li
250.759 204.937 li
244.578 194.227 li
cp
f
244.578 194.227 mo
244.18 193.997 li
237.602 205.396 li
251.554 205.396 li
244.578 193.308 li
244.18 193.997 li
244.578 194.227 li
244.18 194.456 li
249.964 204.478 li
239.191 204.478 li
244.975 194.456 li
244.578 194.227 li
244.18 194.456 li
244.578 194.227 li
cp
f
342.681 193.737 mo
336.5 204.447 li
348.863 204.447 li
342.681 193.737 li
cp
f
342.681 193.737 mo
342.284 193.508 li
335.706 204.906 li
349.658 204.906 li
342.681 192.819 li
342.284 193.508 li
342.681 193.737 li
342.284 193.967 li
348.068 203.988 li
337.295 203.988 li
343.079 193.967 li
342.681 193.737 li
342.284 193.967 li
342.681 193.737 li
cp
f
391.763 192.88 mo
385.583 203.59 li
397.945 203.59 li
391.763 192.88 li
cp
f
391.763 192.88 mo
391.366 192.651 li
384.788 204.049 li
398.74 204.049 li
391.763 191.962 li
391.366 192.651 li
391.763 192.88 li
391.366 193.11 li
397.15 203.131 li
386.377 203.131 li
392.161 193.11 li
391.763 192.88 li
391.366 193.11 li
391.763 192.88 li
cp
f
440.846 192.574 mo
434.665 203.284 li
447.027 203.284 li
440.846 192.574 li
cp
f
440.846 192.574 mo
440.449 192.345 li
433.87 203.743 li
447.822 203.743 li
440.846 191.656 li
440.449 192.345 li
440.846 192.574 li
440.449 192.804 li
446.232 202.825 li
435.459 202.825 li
441.244 192.804 li
440.846 192.574 li
440.449 192.804 li
440.846 192.574 li
cp
f
489.868 192.452 mo
483.686 203.162 li
496.048 203.162 li
489.868 192.452 li
cp
f
489.868 192.452 mo
489.47 192.223 li
482.891 203.621 li
496.843 203.621 li
489.868 191.534 li
489.47 192.223 li
489.868 192.452 li
489.47 192.682 li
495.253 202.703 li
484.481 202.703 li
490.265 192.682 li
489.868 192.452 li
489.47 192.682 li
489.868 192.452 li
cp
f
538.95 192.391 mo
532.768 203.04 li
545.13 203.04 li
538.95 192.391 li
cp
f
538.95 192.391 mo
538.553 192.16 li
531.971 203.499 li
545.927 203.499 li
538.95 191.476 li
538.553 192.16 li
538.95 192.391 li
538.553 192.621 li
544.333 202.581 li
533.565 202.581 li
539.347 192.621 li
538.95 192.391 li
538.553 192.621 li
538.95 192.391 li
cp
f
637.053 192.636 mo
630.873 203.284 li
643.235 203.284 li
637.053 192.636 li
cp
f
637.053 192.636 mo
636.656 192.405 li
630.075 203.743 li
644.032 203.743 li
637.053 191.721 li
636.656 192.405 li
637.053 192.636 li
636.656 192.866 li
642.438 202.825 li
631.67 202.825 li
637.45 192.866 li
637.053 192.636 li
636.656 192.866 li
637.053 192.636 li
cp
f
48.3091 198.082 mo
57.4891 198.082 li
57.4891 196.246 li
48.3091 196.246 li
cp
62.9971 198.082 mo
72.1771 198.082 li
72.1771 196.246 li
62.9971 196.246 li
cp
77.6851 198.082 mo
86.8651 198.082 li
86.8651 196.246 li
77.6851 196.246 li
cp
92.3731 198.082 mo
101.553 198.082 li
101.553 196.246 li
92.3731 196.246 li
cp
107.061 198.082 mo
116.241 198.082 li
116.241 196.246 li
107.061 196.246 li
cp
121.749 198.082 mo
130.929 198.082 li
130.929 196.246 li
121.749 196.246 li
cp
136.437 198.082 mo
145.617 198.082 li
145.617 196.246 li
136.437 196.246 li
cp
151.125 198.082 mo
160.305 198.082 li
160.305 196.246 li
151.125 196.246 li
cp
165.813 198.082 mo
174.993 198.082 li
174.993 196.246 li
165.813 196.246 li
cp
180.501 198.082 mo
189.681 198.082 li
189.681 196.246 li
180.501 196.246 li
cp
195.189 198.082 mo
204.369 198.082 li
204.369 196.246 li
195.189 196.246 li
cp
209.877 198.082 mo
219.057 198.082 li
219.057 196.246 li
209.877 196.246 li
cp
224.565 198.082 mo
233.745 198.082 li
233.745 196.246 li
224.565 196.246 li
cp
239.253 198.082 mo
248.433 198.082 li
248.433 196.246 li
239.253 196.246 li
cp
253.941 198.082 mo
263.121 198.082 li
263.121 196.246 li
253.941 196.246 li
cp
268.629 198.082 mo
277.809 198.082 li
277.809 196.246 li
268.629 196.246 li
cp
283.317 198.082 mo
292.497 198.082 li
292.497 196.246 li
283.317 196.246 li
cp
298.005 198.082 mo
307.185 198.082 li
307.185 196.246 li
298.005 196.246 li
cp
312.693 198.082 mo
321.873 198.082 li
321.873 196.246 li
312.693 196.246 li
cp
327.381 198.082 mo
336.561 198.082 li
336.561 196.246 li
327.381 196.246 li
cp
342.069 198.082 mo
351.249 198.082 li
351.249 196.246 li
342.069 196.246 li
cp
356.757 198.082 mo
365.937 198.082 li
365.937 196.246 li
356.757 196.246 li
cp
371.445 198.082 mo
380.625 198.082 li
380.625 196.246 li
371.445 196.246 li
cp
386.133 198.082 mo
395.313 198.082 li
395.313 196.246 li
386.133 196.246 li
cp
400.821 198.082 mo
410.001 198.082 li
410.001 196.246 li
400.821 196.246 li
cp
415.508 198.082 mo
424.688 198.082 li
424.688 196.246 li
415.508 196.246 li
cp
430.196 198.082 mo
439.376 198.082 li
439.376 196.246 li
430.196 196.246 li
cp
444.884 198.082 mo
454.064 198.082 li
454.064 196.246 li
444.884 196.246 li
cp
459.572 198.082 mo
468.752 198.082 li
468.752 196.246 li
459.572 196.246 li
cp
474.26 198.082 mo
483.44 198.082 li
483.44 196.246 li
474.26 196.246 li
cp
488.948 198.082 mo
498.128 198.082 li
498.128 196.246 li
488.948 196.246 li
cp
503.636 198.082 mo
512.816 198.082 li
512.816 196.246 li
503.636 196.246 li
cp
518.324 198.082 mo
527.504 198.082 li
527.504 196.246 li
518.324 196.246 li
cp
533.012 198.082 mo
542.192 198.082 li
542.192 196.246 li
533.012 196.246 li
cp
547.7 198.082 mo
556.88 198.082 li
556.88 196.246 li
547.7 196.246 li
cp
562.388 198.082 mo
571.568 198.082 li
571.568 196.246 li
562.388 196.246 li
cp
577.076 198.082 mo
586.256 198.082 li
586.256 196.246 li
577.076 196.246 li
cp
591.764 198.082 mo
600.944 198.082 li
600.944 196.246 li
591.764 196.246 li
cp
606.452 198.082 mo
615.632 198.082 li
615.632 196.246 li
606.452 196.246 li
cp
621.14 198.082 mo
630.32 198.082 li
630.32 196.246 li
621.14 196.246 li
cp
635.828 198.082 mo
645.008 198.082 li
645.008 196.246 li
635.828 196.246 li
cp
650.516 198.082 mo
656.759 198.082 li
656.759 196.246 li
650.516 196.246 li
cp
.43949 .376715 .225864 .00350958 cmyk
f
49.6861 197.164 mo
49.6861 196.675 li
46.9321 196.675 li
46.9321 197.164 li
f
46.9321 197.164 mo
46.9321 197.715 li
49.6861 197.715 li
49.6861 197.164 li
f
48.3091 4.07816 mo
656.699 4.07816 li
656.699 2.24216 li
48.3091 2.24216 li
cp
48.3091 218.278 mo
656.699 218.278 li
656.699 216.442 li
48.3091 216.442 li
cp
.75021 .679683 .670222 .90164 cmyk
f
636.594 3.16016 mo
636.594 15.4004 li
637.512 15.4004 li
637.512 3.16016 li
cp
637.512 217.36 mo
637.512 205.12 li
636.594 205.12 li
636.594 217.36 li
cp
440.387 3.16016 mo
440.387 15.4004 li
441.305 15.4004 li
441.305 3.16016 li
cp
441.305 217.36 mo
441.305 205.12 li
440.387 205.12 li
440.387 217.36 li
cp
244.119 3.16016 mo
244.119 15.4004 li
245.037 15.4004 li
245.037 3.16016 li
cp
245.037 217.36 mo
245.037 205.12 li
244.119 205.12 li
244.119 217.36 li
cp
47.8501 3.16016 mo
47.8501 15.4004 li
48.7681 15.4004 li
48.7681 3.16016 li
cp
48.7681 217.36 mo
48.7681 205.12 li
47.8501 205.12 li
47.8501 217.36 li
cp
538.491 3.16016 mo
538.491 9.28027 li
539.409 9.28027 li
539.409 3.16016 li
cp
539.409 217.36 mo
539.409 211.24 li
538.491 211.24 li
538.491 217.36 li
cp
342.222 3.16016 mo
342.222 9.28027 li
343.14 9.28027 li
343.14 3.16016 li
cp
343.14 217.36 mo
343.14 211.24 li
342.222 211.24 li
342.222 217.36 li
cp
145.954 3.16016 mo
145.954 9.28027 li
146.872 9.28027 li
146.872 3.16016 li
cp
146.872 217.36 mo
146.872 211.24 li
145.954 211.24 li
145.954 217.36 li
cp
f
657.617 217.36 mo
657.617 3.16016 li
655.781 3.16016 li
655.781 217.36 li
cp
49.2271 217.36 mo
49.2271 3.16016 li
47.3911 3.16016 li
47.3911 217.36 li
cp
f
656.699 38.3808 mo
644.458 38.3808 li
644.458 39.2988 li
656.699 39.2988 li
cp
48.3091 39.2988 mo
60.5493 39.2988 li
60.5493 38.3808 li
48.3091 38.3808 li
cp
656.699 109.801 mo
644.458 109.801 li
644.458 110.719 li
656.699 110.719 li
cp
48.3091 110.719 mo
60.5493 110.719 li
60.5493 109.801 li
48.3091 109.801 li
cp
656.699 181.222 mo
644.458 181.222 li
644.458 182.14 li
656.699 182.14 li
cp
48.3091 182.14 mo
60.5493 182.14 li
60.5493 181.222 li
48.3091 181.222 li
cp
656.699 2.70116 mo
650.579 2.70116 li
650.579 3.61916 li
656.699 3.61916 li
cp
48.3091 3.61916 mo
54.4292 3.61916 li
54.4292 2.70116 li
48.3091 2.70116 li
cp
656.699 74.1216 mo
650.579 74.1216 li
650.579 75.0396 li
656.699 75.0396 li
cp
48.3091 75.0396 mo
54.4292 75.0396 li
54.4292 74.1216 li
48.3091 74.1216 li
cp
656.699 145.481 mo
650.579 145.481 li
650.579 146.399 li
656.699 146.399 li
cp
48.3091 146.399 mo
54.4292 146.399 li
54.4292 145.481 li
48.3091 145.481 li
cp
656.699 216.901 mo
650.579 216.901 li
650.579 217.819 li
656.699 217.819 li
cp
48.3091 217.819 mo
54.4292 217.819 li
54.4292 216.901 li
48.3091 216.901 li
cp
f
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 48 /zero putdup 49 /one putdup 50 /two putdup 52 /four putdup 69 /E putdup 91 /bracketleft putdup 93 /bracketright putdup 103 /g putdup 108 /l putdup 111 /o putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/hyphen <1C60D8A8C9B81F2C7FA8F2666424EE62590A3687533A> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-/E <1C60D8A8C9B7D8BE774DE3D4993979F28436928B4CDBB6751E52C565AE7CCBA8EF4A8B60A6B8197E06686ACB2016ED56C2648D7EE6DB00F4795EF397C2952CAB1D6175CF76712F75EC245199884C545C641796897CB85779F19EC0B1ACB7B44E696F11860B9E3F66C1DA5748D5D1E424917F78224170CF649A7E0788B4FB83A9B795649C6C2E1BEFBEC8CB7D4EE48916B040566E008F8D3458DA30E023107ECA6A58C1BE70A2768537> |-/bracketleft <1C60D8A8C9B81F2C2EF5D2F7C86086F2EF55462CDE69AB1C3390780A3E6B66DF53E8F9FA1A7E8FB5CD235E7DBAE0D8EE1E28926AA0FD2C3A028CF3> |-/bracketright <1C60D8A8C9B81F2C3A3357A26DB534BD0F666D21108D0B91435146D7D5EC4A8519FF9E4FBF13110E4D4FFE4A07533078E0C3E2175382191E0DEEE4DA> |-/g <1C60D8A8C9B7A73DA347F0DC0A4CC25AD3382B8351D419D81B2F540C0F665DA2122211CB75D621F53ADCDBE7815157FCF3A7D9C98329945893598F8138F5D5F74388A15B63DC4DDBDB1A01CEDC68DBC335D575F070C3086679BC845D2E738427D0F7B681E970CAECC1ECA0192676764BEA6F787CBC115862B9B44CFD83A96CAFA21CE91235F59FAB64DFE50A98E215046D4BF1AB210098434AE88D505933B6B31BEC443E9C48567AB352DDD15143CE343B08927EA9C965F9F904D0C1E9AE4FECE14141B4365C351A577CA516601FBE0AFA3AD74B770DF0E6D6A50EC77FBA93516C03FCA671EDEBF2CCDCA919590D5C9DEA3D43029A729D3EC913B24C08E5BEFE573AAB22339502EECDF5C8F0B813EECA1A3643E46181D1A26BD0E961251C6FA14F9824242DA4E6EBAD7E5F2872BFD0F6F6BE709AF20CDE3BC39F29118C3ABE69D00325A184273C17639A8F614CF5086AF810778C30368743992A90E37B88A00B0EFB39F462A8B7048C5ABBCF6C197AE88D4F99C80A2B8E1DBB> |-/l <1C60D8A8C9B854D09C28E93890ED677F310D1E32AA544EA0617CF81480930FF09D96FFEC0D2D74BC923E8CC3789EA117FEE8A516539FF915E22C6A549B8D0FA459312C0739BEBB3BD2A37FAA8365907BF4200CFE09B70B39C1ECB8C3A6085FE4D765368B> |-/o <1C60D8A8C9B7A73DEA5F658431FF26DE1C3CCABA5A5AF56EE1798CA324BEFFED162986DEB20473198E3AAB17E1F76DC8A1DBB020158974052802A30905F0338BF503D35906BB108F3CEAC35FDF3D8BC51C5542899E6D21063EDA8732DC154AFBF51B7EEDDA621E256B5E3E8A8E86389A77366F5766B3A5B4DE72C37DBEBA04E9D5CF3B75> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FDWNFT+Times-Roman /Times-Roman findfont ct_VMDictPut/FDWNFT+Times-Roman*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 16{/.notdef}rp /E 21{/.notdef}rp /bracketleft /.notdef /bracketright 9{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf28.2827 187.431 mo(-4)[5.70654 0 ]xsh28.2827 116.001 mo(-2)[5.70654 0 ]xsh34.0405 44.4697 mo(0)shFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 144.712 mo(log)[-4.76074 -8.56836 0 ]yshFDWNFT+Times-Roman*1 [0 -12.1176 -12.1176 0 0 0 ]msf21.9312 122.868 mo(10)[-6.05859 0 ]yshFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 110.868 mo([)sh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 100 /delta putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/delta <1C60D8A8C9B7AD0A3BDF54E78F3745D0FC98ABE596F720F3943C2B3CA0A23147F071F76FC7DCEBED1AF1ED1673B238400B64D2D2A3AF678CEE261DD63D62C327B373A79174E4D2E3AF9EC7F89A1B1E89DF12F2ED81F6B8C241811045D3A996D3726439E931D6C57C82A6AD64AB8177D083CC7B93BC0C27D3219F6DA4278F2BB03C207F7F4407B837B1A1AB46A84C426C5CB1B2479AB80BFAEC10ED476B30901D451888A0C5A8219D851944E0C9571DEA8B353306789BA2DE21B52B82845C2AB1A5C546B289F11B948619882EF476D5CE011401EEEE46B0C2DBE75519BDCE0E8A232C6C> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FDWNFU+Symbol /Symbol findfont ct_VMDictPut/FDWNFU+Symbol*1 [100{/.notdef}rp /delta 155{/.notdef}rp]FDWNFU+Symbol nfFDWNFU+Symbol*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 105.11 mo(d)shFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 96.665 mo(E)shFDWNFT+Times-Roman*1 [0 -12.1176 -12.1176 0 0 0 ]msf21.9312 86.1416 mo(0)shFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 80.1416 mo(])sh48.3091 217.36 mo
48.7681 217.36 li
48.7681 3.61916 li
656.24 3.61916 li
656.24 216.901 li
48.3091 216.901 li
48.3091 217.36 li
48.7681 217.36 li
48.3091 217.36 li
48.3091 217.819 li
657.158 217.819 li
657.158 2.70116 li
47.8501 2.70116 li
47.8501 217.819 li
48.3091 217.819 li
48.3091 217.36 li
cp
f
537.91 15.4004 mo
537.91 112.035 li
637.237 112.035 li
637.237 15.4004 li
537.91 15.4004 li
cp
0 0 0 0 cmyk
f
537.91 15.4004 mo
536.992 15.4004 li
536.992 112.953 li
638.155 112.953 li
638.155 14.4824 li
536.992 14.4824 li
536.992 15.4004 li
537.91 15.4004 li
537.91 16.3184 li
636.319 16.3184 li
636.319 111.117 li
538.828 111.117 li
538.828 15.4004 li
537.91 15.4004 li
537.91 16.3184 li
537.91 15.4004 li
cp
.75021 .679683 .670222 .90164 cmyk
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFT+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/H <1C60D8A8C9B6079F0EF96F2A5C5AAE267BD7D517941DACD3EDB33730529DE1B8FE6AD271A2288CC17FF03DA9EA5FAD75E03DF6B92565A2CB4A8539BAEB038F1CE0E83E584DC2B39385E39140D6E26B203655808DF8081831B0F83E078DCB044F2F1E9AE89A394511D343E89D9D3F55592CD30385C4D9E63CC850D47412A8E8690C4C593E74EC9DBC1CB8EAB8742657985762E0C390ED4A33098B5BA3348CBFA94014888F550AA1D8AF239EC75344> |-/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBADFFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EFD64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DEDC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C04061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE38746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B67971885F8F1CB6195A6A7B0FFC> |-/d <1C60D8A8C9B7A73DB9A50E659DB775F0445838B52D4AD3E4EA55A04AF1E66EB3E22000826F80E46C696D55B3FE9B16954A0FDDDCF9A25B9DBBDA281BC3743A32DF4E962666420F0E46505362A6A9911C122E7E5925E4098A8375B64204275CB8C487667CDFFB7001810B24CEFAA2B80CAD8B87A3E1168C62B165D1D52436E632F3BD5E44BCAD1D3E08911E568C3ADE5A148D88E7C75A5F95F7018097A855F01058BEA6CAD1F5CFBA99049D028F229C0A374E791F4E6F00190E23FDB14CB2BF5215AC36154229670311F93C06828FE397A9700C53BE1A07DF9AE66151E66A3E4BE4B17FDA8F9875D90067B1D7D9914E47FA1ED2D057561417FDB2931E47F3C120E5878FF702> |-/r <1C60D8A8C9B81F2C5DE210A78B7176966966FB4A2E70036BAA4A8956D597954FF33C419645546BDDA5A1C075630C88C9E9E0B6B2EB6B2FC3FF0331B1902616E9791F7398738E2F17D5E54890C7A065EB2198D4708DA7213806F12669F67678CAD7B30B1926E6F30FE45B0DAB7BE403E568FB7F28C7F3631BA5B608F502310C8C5FF767FCF95E7EC0C2EC9F2F173FF41F0C7459D2154243B15CA53A73779F93E107279F803A71F8179756E718854D0BA7BCB1168643F72763D9FF> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFT+Times-Roman /Encoding getdup 72 /H putdup 97 /a putdup 100 /d putdup 114 /r putpop%ADOEndSubsetFont
/FDWNFT+Times-Roman*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 16{/.notdef}rp /E 2{/.notdef}rp /H 18{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 141{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf587.47 33.9307 mo(Hard)[12.375 7.60547 5.70703 0 ]xsh550.639 28.8952 mo
575.18 28.8952 li
575.18 27.4876 li
550.639 27.4876 li
.659174 .184604 1 .0302739 cmyk
f
556.81 28.2402 mo
556.81 24.8281 554.042 22.0591 550.629 22.0591 cv
547.217 22.0591 544.448 24.8281 544.448 28.2402 cv
544.448 31.6523 547.217 34.4214 550.629 34.4214 cv
554.042 34.4214 556.81 31.6523 556.81 28.2402 cv
cp
f
557.269 28.2402 mo
557.269 24.5743 554.295 21.6005 550.629 21.6001 cv
546.963 21.6006 543.989 24.5742 543.989 28.2402 cv
543.989 31.9063 546.963 34.8799 550.629 34.8804 cv
554.295 34.8799 557.269 31.9062 557.269 28.2402 cv
556.351 28.2402 li
556.351 29.8209 555.711 31.2486 554.675 32.2858 cv
553.638 33.3223 552.21 33.9622 550.629 33.9624 cv
549.049 33.9622 547.621 33.3223 546.584 32.2858 cv
545.547 31.2485 544.907 29.8208 544.907 28.2402 cv
544.907 26.6596 545.547 25.2319 546.584 24.1947 cv
547.621 23.1582 549.049 22.5183 550.629 22.5181 cv
552.21 22.5183 553.638 23.1582 554.675 24.1947 cv
555.711 25.2319 556.351 26.6596 556.351 28.2402 cv
557.269 28.2402 li
cp
f
581.411 28.2402 mo
581.411 24.8281 578.641 22.0591 575.229 22.0591 cv
571.817 22.0591 569.048 24.8281 569.048 28.2402 cv
569.048 31.6523 571.817 34.4214 575.229 34.4214 cv
578.641 34.4214 581.411 31.6523 581.411 28.2402 cv
cp
f
581.87 28.2402 mo
581.869 24.5742 578.895 21.6006 575.229 21.6001 cv
571.563 21.6005 568.59 24.5743 568.589 28.2402 cv
568.59 31.9062 571.563 34.8799 575.229 34.8804 cv
578.895 34.8799 581.869 31.9063 581.87 28.2402 cv
580.952 28.2402 li
580.951 29.8208 580.311 31.2485 579.275 32.2858 cv
578.237 33.3223 576.81 33.9622 575.229 33.9624 cv
573.648 33.9622 572.221 33.3223 571.184 32.2858 cv
570.147 31.2486 569.508 29.8209 569.507 28.2402 cv
569.508 26.6596 570.147 25.2319 571.184 24.1947 cv
572.221 23.1582 573.648 22.5183 575.229 22.5181 cv
576.81 22.5183 578.237 23.1582 579.275 24.1947 cv
580.311 25.2319 580.951 26.6596 580.952 28.2402 cv
581.87 28.2402 li
cp
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFT+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B7EF322434E1F3A572E6E1BC6C6F1C68992768060DAE1B4C7B427E45BC3A4679807BEAE7F6D9AF630A1C22FD1CE21BCE2286818A82BD939AF289B76A1DB91C5AA9ECF164AD5A7EEB0C2FB6433D2C27E4C9DD9951F32681C1E23142F87FE0BB632961DBF09B1BCC2DBDF28AA2A576366886A338146A6EE45FE7539E8D3254D439F46CBA62C74FD6727A2572BFC88846FED7BD6467448C15F8CC8DCFA5340A99B196EA105B822649C918B21A83378A8D> |-/S <1C60D8A8C9B7EF3269E388B8847AC1DF83DCA2CC95EEDA1D26C48C8B4394FBFD17BA4272844B3F99D23FAEC50A7EA6C72D284BFF0551BD0E244EEA994D67C8032579E70EC4F728A61739D5AD8DBB8B4129DD5B722422FAFC8BDE88E5D08E42CFE364B4791DA2E591F9FB2CA99F1F124E961FBD42E8AB878E8BE3BAAF755A9CE4977D5E9A7ECCF71EBFA0B61D69877A9EC87A882973E75CA7477FEDEE90C5AE4E9BEF9C7EDA4EBF0E4CDE6ECFE92BCEC5C04A7E39072DCB2A7B402F52671B6022D3586A809E7DAE9919FE8815CB8D620AA8EC995DA478361CE758058A7DFF39FC38C2B0C0AAE9> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFT+Times-Roman /Encoding getdup 80 /P putdup 83 /S putpop%ADOEndSubsetFont
/FDWNFT+Times-Roman*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 16{/.notdef}rp /E 2{/.notdef}rp /H 7{/.notdef}rp /P 2{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 141{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf587.47 51.8135 mo(SP)[9.53027 0 ]xsh550.639 46.8879 mo
575.18 46.8879 li
575.18 45.4803 li
550.639 45.4803 li
.648646 1 .217533 .0788281 cmyk
f
545.437 51.3857 mo
545.437 40.9209 li
555.902 40.9209 li
555.902 51.3857 li
545.437 51.3857 li
cp
f
545.437 51.3857 mo
545.896 51.3857 li
545.896 41.3799 li
555.443 41.3799 li
555.443 50.9267 li
545.437 50.9267 li
545.437 51.3857 li
545.896 51.3857 li
545.437 51.3857 li
545.437 51.8447 li
556.361 51.8447 li
556.361 40.4619 li
544.978 40.4619 li
544.978 51.8447 li
545.437 51.8447 li
545.437 51.3857 li
cp
f
569.917 51.3857 mo
569.917 40.9209 li
580.382 40.9209 li
580.382 51.3857 li
569.917 51.3857 li
cp
f
569.917 51.3857 mo
570.375 51.3857 li
570.375 41.3799 li
579.923 41.3799 li
579.923 50.9267 li
569.917 50.9267 li
569.917 51.3857 li
570.375 51.3857 li
569.917 51.3857 li
569.917 51.8447 li
580.841 51.8447 li
580.841 40.4619 li
569.457 40.4619 li
569.457 51.8447 li
569.917 51.8447 li
569.917 51.3857 li
cp
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFT+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7EF324A037549B31AFC4B60697A046B7067B75CFC351CCB1964720E6BC82951E2A5BB7474D974EA2A52D73602B39FD7C31C63C801BEBD2FDE9110733E153A3F2045A94EC3EBE16167D0C83075CBD838D88E58985D5046B18ACE7B749F64816A90969534E595942FCC6261125D575A90C2E501921FC7F49304D66B5BA92B55B6DFDA784E2B9E0FAA8068B2566A1AD700B69E> |-/G <1C60D8A8C9B6079F6D8F9589F03C57E9BABC7BD7AF44F292C36BF054D0385D2FC11ADF26CF26FB1CA20D732AF012AB53727DD5F46B605D18E4B017E662A97B61E593E1649BDE06DC0BE81975EB02C63DB9CC50D324954CB92F05C09AE46BA2C2549D26E915E5BB03DE231AAD77F23323077408677E4049C607D64929B04AF386D58F981E4541C0982A23929E9B861E50C60AAFF01CE1D107C5993270B58A2C29D6FD48A1F36C5902C78C206F66DEBC5079EDB36633E15221CDFB88A58DA8F921FAE2BECE6FC3EDA0F38409251C> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFT+Times-Roman /Encoding getdup 70 /F putdup 71 /G putpop%ADOEndSubsetFont
/FDWNFT+Times-Roman*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 16{/.notdef}rp /E /F /G /H 7{/.notdef}rp /P 2{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 141{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf587.47 69.6729 mo(GSF)sh550.639 64.758 mo
575.18 64.758 li
575.18 63.3504 li
550.639 63.3504 li
0 .408423 1 0 cmyk
f
550.639 57.873 mo
544.458 64.0542 li
550.639 70.2354 li
556.82 64.0542 li
550.639 57.873 li
cp
f
550.639 57.873 mo
550.315 57.5485 li
543.808 64.0542 li
550.639 70.8845 li
557.469 64.0542 li
550.639 57.2239 li
550.315 57.5485 li
550.639 57.873 li
550.315 58.1976 li
556.171 64.0542 li
550.639 69.5862 li
545.107 64.0542 li
550.964 58.1976 li
550.639 57.873 li
550.315 58.1976 li
550.639 57.873 li
cp
f
575.18 57.873 mo
568.999 64.0542 li
575.18 70.2354 li
581.361 64.0542 li
575.18 57.873 li
cp
f
575.18 57.873 mo
574.856 57.5485 li
568.349 64.0542 li
575.18 70.8845 li
582.01 64.0542 li
575.18 57.2239 li
574.856 57.5485 li
575.18 57.873 li
574.856 58.1976 li
580.712 64.0542 li
575.18 69.5862 li
569.648 64.0542 li
575.505 58.1976 li
575.18 57.873 li
574.856 58.1976 li
575.18 57.873 li
cp
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFT+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D8BE78D1A55798F2D8A97091B992B92C1EAFCF350F806FED434693C4DF3F67D8893A99EF75622FE8BA13F907674F882E140E60489CEAA2BB6107D8446BF6FC3EF0730B190972991631B35D792933869F4716BD279183A943DE125368> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFT+Times-Roman /Encoding getdup 84 /T putpop%ADOEndSubsetFont
/FDWNFT+Times-Roman*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 16{/.notdef}rp /E /F /G /H 7{/.notdef}rp /P 2{/.notdef}rp /S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 141{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf587.47 87.5557 mo(TSF)[10.4678 9.53027 0 ]xsh550.639 82.6286 mo
575.18 82.6286 li
575.18 81.221 li
550.639 81.221 li
.892363 .791409 0 0 cmyk
f
550.639 74.7642 mo
544.458 85.4741 li
556.82 85.4741 li
550.639 74.7642 li
cp
f
550.639 74.7642 mo
550.242 74.5347 li
543.663 85.9331 li
557.615 85.9331 li
550.639 73.8458 li
550.242 74.5347 li
550.639 74.7642 li
550.242 74.9936 li
556.025 85.0151 li
545.252 85.0151 li
551.037 74.9936 li
550.639 74.7642 li
550.242 74.9936 li
550.639 74.7642 li
cp
f
575.18 74.7642 mo
568.999 85.4741 li
581.361 85.4741 li
575.18 74.7642 li
cp
f
575.18 74.7642 mo
574.783 74.5347 li
568.204 85.9331 li
582.156 85.9331 li
575.18 73.8458 li
574.783 74.5347 li
575.18 74.7642 li
574.783 74.9936 li
580.566 85.0151 li
569.793 85.0151 li
575.578 74.9936 li
575.18 74.7642 li
574.783 74.9936 li
575.18 74.7642 li
cp
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFT+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/w <1C60D8A8C9B6079F6DEF2CA269EEBDBC9AAB2442668195B42431599214D547AA583E7FABFBA4013EF6113808D8AEB051BCD8EE14E39F233E3ED5BD9E8C6B36E76E396816C02F0A086C26332DD5CBEAAB04F9DEFB108B050B809C366C6B15FBBA9D4BBB96BE1B4DE2BF878A083BEF7939DEB6F715DE6158810EA7FDCF6BFD8E558E7B426E61C36554884A643D3078229BF2F4C33BA2592109165966A49B657035A574CC85CC95C751D53847831D4985D8EB843D14D617F1E0ACF190AA23C254BD2AA408809871E26F8E47BA83075D4D70E9AEC173034E4F6B0374B1ECEEEA735DF074DED0C2940E2381CDBDDED7EDAE7B6B9C7394CDF409E2E0DF5451360AFA> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFT+Times-Roman /Encoding getdup 119 /w putpop%ADOEndSubsetFont
/FDWNFT+Times-Roman*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four 16{/.notdef}rp /E /F /G /H 7{/.notdef}rp /P 2{/.notdef}rp /S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 4{/.notdef}rp /w 136{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf587.47 105.665 mo(Ewald)[10.4678 12.375 7.60547 4.76074 0 ]xsh550.639 100.835 mo
559.819 100.835 li
559.819 98.9995 li
550.639 98.9995 li
cp
565.327 100.835 mo
574.507 100.835 li
574.507 98.9995 li
565.327 98.9995 li
cp
.43949 .376715 .225864 .00350958 cmyk
f
48.2542 233.577 mo
244.452 245.323 li
440.557 287.821 li
636.676 376.154 li
637.43 374.48 li
441.135 286.068 li
244.703 243.499 li
48.3639 231.744 li
48.2542 233.577 li
cp
.659174 .184604 1 .0302739 cmyk
f
49.4413 232.66 mo
49.4413 232.538 li
47.1769 232.538 li
47.1769 232.66 li
f
47.1769 232.66 mo
47.1769 232.722 li
49.4413 232.722 li
49.4413 232.66 li
f
245.71 244.411 mo
245.71 244.35 li
243.445 244.35 li
243.445 244.411 li
f
243.445 244.411 mo
243.445 244.472 li
245.71 244.472 li
245.71 244.411 li
f
439.714 286.944 mo
439.714 287.006 li
441.978 287.006 li
441.978 286.944 li
f
638.185 375.317 mo
638.185 374.889 li
635.921 374.889 li
635.921 375.317 li
f
635.921 375.317 mo
635.921 375.808 li
638.185 375.808 li
638.185 375.317 li
f
54.4292 232.72 mo
54.4292 229.343 51.6875 226.601 48.3091 226.601 cv
44.9312 226.601 42.1895 229.343 42.1895 232.72 cv
42.1895 236.099 44.9312 238.841 48.3091 238.841 cv
51.6875 238.841 54.4292 236.099 54.4292 232.72 cv
cp
f
54.8882 232.72 mo
54.8877 229.089 51.9414 226.142 48.3091 226.142 cv
44.6772 226.142 41.731 229.089 41.7304 232.72 cv
41.7309 236.352 44.6772 239.299 48.3091 239.3 cv
51.9414 239.299 54.8877 236.352 54.8882 232.72 cv
53.9702 232.72 li
53.97 234.284 53.3369 235.696 52.3115 236.723 cv
51.2853 237.748 49.8728 238.382 48.3091 238.382 cv
46.7456 238.382 45.3333 237.748 44.3071 236.723 cv
43.2817 235.696 42.6487 234.284 42.6485 232.72 cv
42.6487 231.157 43.2817 229.744 44.3071 228.718 cv
45.3332 227.693 46.7456 227.06 48.3091 227.06 cv
49.8728 227.06 51.2853 227.693 52.3115 228.718 cv
53.337 229.744 53.97 231.157 53.9702 232.72 cv
54.8882 232.72 li
cp
f
250.75 244.48 mo
250.75 241.103 248.007 238.36 244.629 238.36 cv
241.251 238.36 238.509 241.103 238.509 244.48 cv
238.509 247.858 241.251 250.601 244.629 250.601 cv
248.007 250.601 250.75 247.858 250.75 244.48 cv
cp
f
251.209 244.48 mo
251.208 240.849 248.261 237.902 244.629 237.901 cv
240.997 237.902 238.051 240.849 238.05 244.48 cv
238.051 248.112 240.997 251.059 244.629 251.06 cv
248.261 251.059 251.208 248.112 251.209 244.48 cv
250.291 244.48 li
250.29 246.044 249.657 247.456 248.632 248.483 cv
247.605 249.508 246.193 250.141 244.629 250.142 cv
243.066 250.141 241.653 249.508 240.627 248.483 cv
239.602 247.456 238.968 246.044 238.968 244.48 cv
238.968 242.917 239.602 241.504 240.627 240.478 cv
241.653 239.453 243.066 238.82 244.629 238.819 cv
246.193 238.82 247.605 239.453 248.632 240.478 cv
249.657 241.505 250.29 242.917 250.29 244.48 cv
251.209 244.48 li
cp
f
447.069 286.96 mo
447.069 283.582 444.328 280.841 440.95 280.841 cv
437.571 280.841 434.83 283.582 434.83 286.96 cv
434.83 290.339 437.571 293.08 440.95 293.08 cv
444.328 293.08 447.069 290.339 447.069 286.96 cv
cp
f
447.528 286.96 mo
447.527 283.328 444.582 280.382 440.95 280.382 cv
437.317 280.382 434.371 283.328 434.371 286.96 cv
434.371 290.593 437.317 293.539 440.95 293.539 cv
444.582 293.539 447.527 290.593 447.528 286.96 cv
446.61 286.96 li
446.61 288.524 445.977 289.936 444.951 290.963 cv
443.925 291.988 442.513 292.621 440.95 292.621 cv
439.386 292.621 437.973 291.988 436.947 290.963 cv
435.922 289.936 435.289 288.524 435.289 286.96 cv
435.289 285.396 435.922 283.984 436.947 282.958 cv
437.973 281.933 439.386 281.3 440.95 281.3 cv
442.513 281.3 443.925 281.933 444.951 282.958 cv
445.977 283.984 446.61 285.396 446.61 286.96 cv
447.528 286.96 li
cp
f
643.149 375.28 mo
643.149 371.902 640.408 369.16 637.029 369.16 cv
633.651 369.16 630.91 371.902 630.91 375.28 cv
630.91 378.658 633.651 381.4 637.029 381.4 cv
640.408 381.4 643.149 378.658 643.149 375.28 cv
cp
f
643.608 375.28 mo
643.607 371.648 640.662 368.702 637.029 368.701 cv
633.397 368.702 630.451 371.648 630.451 375.28 cv
630.451 378.912 633.397 381.859 637.029 381.859 cv
640.662 381.859 643.607 378.912 643.608 375.28 cv
642.69 375.28 li
642.69 376.844 642.057 378.256 641.031 379.283 cv
640.005 380.308 638.593 380.941 637.029 380.941 cv
635.465 380.941 634.053 380.308 633.027 379.283 cv
632.002 378.256 631.369 376.844 631.369 375.28 cv
631.369 373.717 632.002 372.304 633.027 371.278 cv
634.053 370.253 635.465 369.619 637.029 369.619 cv
638.593 369.619 640.005 370.253 641.031 371.278 cv
642.057 372.304 642.69 373.717 642.69 375.28 cv
643.608 375.28 li
cp
f
48.2525 353.957 mo
146.337 360.015 li
244.475 370.416 li
342.592 382.168 li
391.605 385.773 li
440.576 399.329 li
489.686 416.067 li
538.877 419.379 li
637.059 428.444 li
656.856 426.353 li
656.663 424.528 li
637.047 426.599 li
539.022 417.549 li
490.049 414.251 li
441.117 397.574 li
391.921 383.955 li
342.77 380.34 li
244.682 368.592 li
146.49 358.185 li
48.3657 352.125 li
48.2525 353.957 li
cp
.648646 1 .217533 .0788281 cmyk
f
49.6861 353.041 mo
49.6861 345.941 li
46.9321 345.941 li
46.9321 353.041 li
f
46.9321 353.041 mo
46.9321 360.14 li
49.6861 360.14 li
49.6861 353.041 li
f
147.79 359.1 mo
147.79 342.392 li
145.036 342.392 li
145.036 359.1 li
f
145.036 359.1 mo
145.036 375.746 li
147.79 375.746 li
147.79 359.1 li
f
245.955 369.504 mo
245.955 361.303 li
243.201 361.303 li
243.201 369.504 li
f
243.201 369.504 mo
243.201 377.644 li
245.955 377.644 li
245.955 369.504 li
f
344.058 381.254 mo
344.058 371.951 li
341.304 371.951 li
341.304 381.254 li
f
341.304 381.254 mo
341.304 390.557 li
344.058 390.557 li
344.058 381.254 li
f
393.14 384.864 mo
393.14 377.031 li
390.386 377.031 li
390.386 384.864 li
f
390.386 384.864 mo
390.386 392.698 li
393.14 392.698 li
393.14 384.864 li
f
442.223 398.451 mo
442.223 393.861 li
439.469 393.861 li
439.469 398.451 li
f
439.469 398.451 mo
439.469 403.041 li
442.223 403.041 li
442.223 398.451 li
f
491.245 415.159 mo
491.245 395.208 li
488.491 395.208 li
488.491 415.159 li
f
488.491 415.159 mo
488.491 435.11 li
491.245 435.11 li
491.245 415.159 li
f
540.327 418.464 mo
540.327 403.041 li
537.573 403.041 li
537.573 418.464 li
f
537.573 418.464 mo
537.573 433.825 li
540.327 433.825 li
540.327 418.464 li
f
638.43 427.521 mo
638.43 418.586 li
635.676 418.586 li
635.676 427.521 li
f
635.676 427.521 mo
635.676 436.456 li
638.43 436.456 li
638.43 427.521 li
f
43.1074 358.243 mo
43.1074 347.839 li
53.5112 347.839 li
53.5112 358.243 li
43.1074 358.243 li
cp
f
43.1074 358.243 mo
44.0254 358.243 li
44.0254 348.757 li
52.5932 348.757 li
52.5932 357.325 li
43.1074 357.325 li
43.1074 358.243 li
44.0254 358.243 li
43.1074 358.243 li
43.1074 359.161 li
54.4292 359.161 li
54.4292 346.921 li
42.1894 346.921 li
42.1894 359.161 li
43.1074 359.161 li
43.1074 358.243 li
cp
f
141.211 364.302 mo
141.211 353.897 li
151.615 353.897 li
151.615 364.302 li
141.211 364.302 li
cp
f
141.211 364.302 mo
142.129 364.302 li
142.129 354.815 li
150.697 354.815 li
150.697 363.384 li
141.211 363.384 li
141.211 364.302 li
142.129 364.302 li
141.211 364.302 li
141.211 365.22 li
152.533 365.22 li
152.533 352.979 li
140.293 352.979 li
140.293 365.22 li
141.211 365.22 li
141.211 364.302 li
cp
f
239.375 374.705 mo
239.375 364.302 li
249.78 364.302 li
249.78 374.705 li
239.375 374.705 li
cp
f
239.375 374.705 mo
240.293 374.705 li
240.293 365.22 li
248.862 365.22 li
248.862 373.787 li
239.375 373.787 li
239.375 374.705 li
240.293 374.705 li
239.375 374.705 li
239.375 375.623 li
250.698 375.623 li
250.698 363.384 li
238.457 363.384 li
238.457 375.623 li
239.375 375.623 li
239.375 374.705 li
cp
f
337.479 386.456 mo
337.479 376.052 li
347.883 376.052 li
347.883 386.456 li
337.479 386.456 li
cp
f
337.479 386.456 mo
338.397 386.456 li
338.397 376.97 li
346.965 376.97 li
346.965 385.538 li
337.479 385.538 li
337.479 386.456 li
338.397 386.456 li
337.479 386.456 li
337.479 387.374 li
348.801 387.374 li
348.801 375.134 li
336.561 375.134 li
336.561 387.374 li
337.479 387.374 li
337.479 386.456 li
cp
f
386.562 390.066 mo
386.562 379.663 li
396.965 379.663 li
396.965 390.066 li
386.562 390.066 li
cp
f
386.562 390.066 mo
387.48 390.066 li
387.48 380.581 li
396.047 380.581 li
396.047 389.148 li
386.562 389.148 li
386.562 390.066 li
387.48 390.066 li
386.562 390.066 li
386.562 390.984 li
397.883 390.984 li
397.883 378.745 li
385.644 378.745 li
385.644 390.984 li
386.562 390.984 li
386.562 390.066 li
cp
f
435.644 403.653 mo
435.644 393.249 li
446.048 393.249 li
446.048 403.653 li
435.644 403.653 li
cp
f
435.644 403.653 mo
436.562 403.653 li
436.562 394.167 li
445.13 394.167 li
445.13 402.735 li
435.644 402.735 li
435.644 403.653 li
436.562 403.653 li
435.644 403.653 li
435.644 404.571 li
446.966 404.571 li
446.966 392.331 li
434.726 392.331 li
434.726 404.571 li
435.644 404.571 li
435.644 403.653 li
cp
f
484.666 420.36 mo
484.666 409.957 li
495.069 409.957 li
495.069 420.36 li
484.666 420.36 li
cp
f
484.666 420.36 mo
485.584 420.36 li
485.584 410.875 li
494.151 410.875 li
494.151 419.442 li
484.666 419.442 li
484.666 420.36 li
485.584 420.36 li
484.666 420.36 li
484.666 421.278 li
495.987 421.278 li
495.987 409.039 li
483.747 409.039 li
483.747 421.278 li
484.666 421.278 li
484.666 420.36 li
cp
f
533.748 423.665 mo
533.748 413.262 li
544.152 413.262 li
544.152 423.665 li
533.748 423.665 li
cp
f
533.748 423.665 mo
534.666 423.665 li
534.666 414.18 li
543.234 414.18 li
543.234 422.747 li
533.748 422.747 li
533.748 423.665 li
534.666 423.665 li
533.748 423.665 li
533.748 424.583 li
545.07 424.583 li
545.07 412.344 li
532.83 412.344 li
532.83 424.583 li
533.748 424.583 li
533.748 423.665 li
cp
f
631.851 432.723 mo
631.851 422.319 li
642.255 422.319 li
642.255 432.723 li
631.851 432.723 li
cp
f
631.851 432.723 mo
632.769 432.723 li
632.769 423.237 li
641.337 423.237 li
641.337 431.805 li
631.851 431.805 li
631.851 432.723 li
632.769 432.723 li
631.851 432.723 li
631.851 433.641 li
643.173 433.641 li
643.173 421.401 li
630.933 421.401 li
630.933 433.641 li
631.851 433.641 li
631.851 432.723 li
cp
f
48.3719 433.578 mo
146.422 426.849 li
244.57 431.622 li
342.696 428.5 li
391.724 428.44 li
440.833 432.787 li
489.861 429.849 li
538.95 433.521 li
637.123 425.989 li
637.119 425.989 li
656.825 424.581 li
656.694 422.749 li
636.988 424.158 li
538.949 431.68 li
489.874 428.009 li
440.859 430.946 li
391.803 426.603 li
342.667 426.664 li
244.586 429.784 li
146.404 425.01 li
48.2462 431.746 li
48.3719 433.578 li
cp
0 .408423 1 0 cmyk
f
49.6861 432.662 mo
49.6861 420.422 li
46.9321 420.422 li
46.9321 432.662 li
f
46.9321 432.662 mo
46.9321 444.902 li
49.6861 444.902 li
49.6861 432.662 li
f
147.79 425.93 mo
147.79 417.729 li
145.036 417.729 li
145.036 425.93 li
f
145.036 425.93 mo
145.036 434.069 li
147.79 434.069 li
147.79 425.93 li
f
245.955 430.703 mo
245.955 419.015 li
243.201 419.015 li
243.201 430.703 li
f
243.201 430.703 mo
243.201 442.393 li
245.955 442.393 li
245.955 430.703 li
f
344.058 427.582 mo
344.058 418.708 li
341.304 418.708 li
341.304 427.582 li
f
341.304 427.582 mo
341.304 436.456 li
344.058 436.456 li
344.058 427.582 li
f
393.14 427.521 mo
393.14 418.402 li
390.386 418.402 li
390.386 427.521 li
f
390.386 427.521 mo
390.386 436.701 li
393.14 436.701 li
393.14 427.521 li
f
442.223 431.866 mo
442.223 422.013 li
439.469 422.013 li
439.469 431.866 li
f
439.469 431.866 mo
439.469 441.658 li
442.223 441.658 li
442.223 431.866 li
f
491.245 428.929 mo
491.245 420.851 li
488.491 420.851 li
488.491 428.929 li
f
488.491 428.929 mo
488.491 437.068 li
491.245 437.068 li
491.245 428.929 li
f
540.327 432.601 mo
540.327 417.852 li
537.573 417.852 li
537.573 432.601 li
f
537.573 432.601 mo
537.573 447.289 li
540.327 447.289 li
540.327 432.601 li
f
638.43 425.073 mo
638.43 419.993 li
635.676 419.993 li
635.676 425.073 li
f
635.676 425.073 mo
635.676 430.152 li
638.43 430.152 li
638.43 425.073 li
f
48.3091 426.542 mo
42.1895 432.662 li
48.3091 438.782 li
54.4292 432.662 li
48.3091 426.542 li
cp
f
48.3091 426.542 mo
47.9845 426.217 li
41.5404 432.662 li
48.3091 439.431 li
55.0783 432.662 li
48.3091 425.893 li
47.9845 426.217 li
48.3091 426.542 li
47.9845 426.867 li
53.7801 432.662 li
48.3091 438.133 li
42.8385 432.662 li
48.6337 426.867 li
48.3091 426.542 li
47.9845 426.867 li
48.3091 426.542 li
cp
f
146.413 419.81 mo
140.293 425.93 li
146.413 432.05 li
152.533 425.93 li
146.413 419.81 li
cp
f
146.413 419.81 mo
146.089 419.485 li
139.644 425.93 li
146.413 432.699 li
153.182 425.93 li
146.413 419.16 li
146.089 419.485 li
146.413 419.81 li
146.089 420.134 li
151.884 425.93 li
146.413 431.401 li
140.942 425.93 li
146.738 420.134 li
146.413 419.81 li
146.089 420.134 li
146.413 419.81 li
cp
f
244.578 424.584 mo
238.458 430.703 li
244.578 436.823 li
250.698 430.703 li
244.578 424.584 li
cp
f
244.578 424.584 mo
244.253 424.259 li
237.808 430.703 li
244.578 437.472 li
251.347 430.703 li
244.578 423.935 li
244.253 424.259 li
244.578 424.584 li
244.253 424.909 li
250.049 430.703 li
244.578 436.174 li
239.107 430.703 li
244.902 424.909 li
244.578 424.584 li
244.253 424.909 li
244.578 424.584 li
cp
f
342.681 421.462 mo
336.561 427.582 li
342.681 433.702 li
348.801 427.582 li
342.681 421.462 li
cp
f
342.681 421.462 mo
342.357 421.137 li
335.912 427.582 li
342.681 434.351 li
349.45 427.582 li
342.681 420.813 li
342.357 421.137 li
342.681 421.462 li
342.357 421.786 li
348.152 427.582 li
342.681 433.053 li
337.21 427.582 li
343.006 421.786 li
342.681 421.462 li
342.357 421.786 li
342.681 421.462 li
cp
f
391.763 421.401 mo
385.644 427.521 li
391.763 433.642 li
397.883 427.521 li
391.763 421.401 li
cp
f
391.763 421.401 mo
391.439 421.077 li
384.995 427.521 li
391.763 434.291 li
398.532 427.521 li
391.763 420.752 li
391.439 421.077 li
391.763 421.401 li
391.439 421.726 li
397.234 427.521 li
391.763 432.992 li
386.293 427.521 li
392.088 421.726 li
391.763 421.401 li
391.439 421.726 li
391.763 421.401 li
cp
f
440.846 425.746 mo
434.726 431.866 li
440.846 437.986 li
446.966 431.866 li
440.846 425.746 li
cp
f
440.846 425.746 mo
440.522 425.422 li
434.077 431.866 li
440.846 438.635 li
447.615 431.866 li
440.846 425.097 li
440.522 425.422 li
440.846 425.746 li
440.522 426.071 li
446.317 431.866 li
440.846 437.337 li
435.375 431.866 li
441.171 426.071 li
440.846 425.746 li
440.522 426.071 li
440.846 425.746 li
cp
f
489.868 422.809 mo
483.748 428.929 li
489.868 435.049 li
495.988 428.929 li
489.868 422.809 li
cp
f
489.868 422.809 mo
489.543 422.484 li
483.098 428.929 li
489.868 435.698 li
496.637 428.929 li
489.868 422.159 li
489.543 422.484 li
489.868 422.809 li
489.543 423.133 li
495.339 428.929 li
489.868 434.4 li
484.397 428.929 li
490.192 423.133 li
489.868 422.809 li
489.543 423.133 li
489.868 422.809 li
cp
f
538.95 426.48 mo
532.83 432.601 li
538.95 438.721 li
545.07 432.601 li
538.95 426.48 li
cp
f
538.95 426.48 mo
538.625 426.156 li
532.18 432.601 li
538.95 439.37 li
545.719 432.601 li
538.95 425.831 li
538.625 426.156 li
538.95 426.48 li
538.625 426.805 li
544.421 432.601 li
538.95 438.072 li
533.479 432.601 li
539.274 426.805 li
538.95 426.48 li
538.625 426.805 li
538.95 426.48 li
cp
f
637.053 418.953 mo
630.933 425.073 li
637.053 431.193 li
643.173 425.073 li
637.053 418.953 li
cp
f
637.053 418.953 mo
636.729 418.629 li
630.284 425.073 li
637.053 431.842 li
643.822 425.073 li
637.053 418.304 li
636.729 418.629 li
637.053 418.953 li
636.729 419.278 li
642.524 425.073 li
637.053 430.544 li
631.582 425.073 li
637.378 419.278 li
637.053 418.953 li
636.729 419.278 li
637.053 418.953 li
cp
f
48.2508 424.888 mo
146.316 431.128 li
244.594 445.71 li
342.742 427.586 li
391.684 430.027 li
440.846 436.035 li
489.907 430.094 li
538.91 431.743 li
637.139 436.891 li
656.975 432.086 li
656.543 430.301 li
636.967 435.043 li
538.989 429.909 li
489.828 428.254 li
440.847 434.186 li
391.842 428.197 li
342.62 425.742 li
244.561 443.849 li
146.51 429.3 li
48.3674 423.056 li
48.2508 424.888 li
cp
.892363 .791409 0 0 cmyk
f
49.6861 423.972 mo
49.6861 417.239 li
46.9321 417.239 li
46.9321 423.972 li
f
46.9321 423.972 mo
46.9321 430.765 li
49.6861 430.765 li
49.6861 423.972 li
f
147.79 430.214 mo
147.79 419.933 li
145.036 419.933 li
145.036 430.214 li
f
145.036 430.214 mo
145.036 440.495 li
147.79 440.495 li
147.79 430.214 li
f
245.955 444.779 mo
245.955 424.706 li
243.201 424.706 li
243.201 444.779 li
f
344.058 426.664 mo
344.058 420.605 li
341.304 420.605 li
341.304 426.664 li
cp
243.201 444.779 mo
243.201 462.222 li
245.955 462.222 li
245.955 444.779 li
cp
f
341.304 426.664 mo
341.304 432.723 li
344.058 432.723 li
344.058 426.664 li
f
393.14 429.112 mo
393.14 416.934 li
390.386 416.934 li
390.386 429.112 li
f
390.386 429.112 mo
390.386 441.229 li
393.14 441.229 li
393.14 429.112 li
f
442.223 435.11 mo
442.223 418.402 li
439.469 418.402 li
439.469 435.11 li
f
439.469 435.11 mo
439.469 451.757 li
442.223 451.757 li
442.223 435.11 li
f
491.245 429.174 mo
491.245 421.523 li
488.491 421.523 li
488.491 429.174 li
f
488.491 429.174 mo
488.491 436.823 li
491.245 436.823 li
491.245 429.174 li
f
540.327 430.826 mo
540.327 420.728 li
537.573 420.728 li
537.573 430.826 li
f
537.573 430.826 mo
537.573 440.924 li
540.327 440.924 li
540.327 430.826 li
f
638.43 435.967 mo
638.43 424.155 li
635.676 424.155 li
635.676 435.967 li
f
635.676 435.967 mo
635.676 447.778 li
638.43 447.778 li
638.43 435.967 li
f
48.3091 416.934 mo
42.1895 427.521 li
54.4292 427.521 li
48.3091 416.934 li
cp
f
48.3091 416.934 mo
47.9117 416.704 li
41.394 427.98 li
55.2247 427.98 li
48.3091 416.016 li
47.9117 416.704 li
48.3091 416.934 li
47.9117 417.163 li
53.6337 427.062 li
42.9849 427.062 li
48.7065 417.163 li
48.3091 416.934 li
47.9117 417.163 li
48.3091 416.934 li
cp
f
146.413 423.176 mo
140.293 433.764 li
152.533 433.764 li
146.413 423.176 li
cp
f
146.413 423.176 mo
146.016 422.946 li
139.497 434.223 li
153.328 434.223 li
146.413 422.259 li
146.016 422.946 li
146.413 423.176 li
146.016 423.405 li
151.737 433.305 li
141.088 433.305 li
146.81 423.405 li
146.413 423.176 li
146.016 423.405 li
146.413 423.176 li
cp
f
244.578 437.681 mo
238.458 448.329 li
250.698 448.329 li
244.578 437.681 li
cp
f
244.578 437.681 mo
244.18 437.452 li
237.664 448.788 li
251.491 448.788 li
244.578 436.76 li
244.18 437.452 li
244.578 437.681 li
244.18 437.909 li
249.905 447.87 li
239.251 447.87 li
244.976 437.909 li
244.578 437.681 li
244.18 437.909 li
244.578 437.681 li
cp
f
342.681 419.565 mo
336.561 430.214 li
348.801 430.214 li
342.681 419.565 li
cp
f
342.681 419.565 mo
342.283 419.337 li
335.768 430.673 li
349.594 430.673 li
342.681 418.644 li
342.283 419.337 li
342.681 419.565 li
342.283 419.794 li
348.008 429.755 li
337.354 429.755 li
343.079 419.794 li
342.681 419.565 li
342.283 419.794 li
342.681 419.565 li
cp
f
391.763 422.013 mo
385.644 432.601 li
397.883 432.601 li
391.763 422.013 li
cp
f
391.763 422.013 mo
391.366 421.783 li
384.849 433.06 li
398.679 433.06 li
391.763 421.095 li
391.366 421.783 li
391.763 422.013 li
391.366 422.242 li
397.088 432.142 li
386.439 432.142 li
392.161 422.242 li
391.763 422.013 li
391.366 422.242 li
391.763 422.013 li
cp
f
440.846 428.011 mo
434.726 438.599 li
446.966 438.599 li
440.846 428.011 li
cp
f
440.846 428.011 mo
440.449 427.781 li
433.931 439.058 li
447.762 439.058 li
440.846 427.094 li
440.449 427.781 li
440.846 428.011 li
440.449 428.24 li
446.171 438.14 li
435.522 438.14 li
441.244 428.24 li
440.846 428.011 li
440.449 428.24 li
440.846 428.011 li
cp
f
489.868 422.074 mo
483.748 432.723 li
495.988 432.723 li
489.868 422.074 li
cp
f
489.868 422.074 mo
489.47 421.845 li
482.954 433.182 li
496.781 433.182 li
489.868 421.153 li
489.47 421.845 li
489.868 422.074 li
489.47 422.303 li
495.195 432.264 li
484.541 432.264 li
490.266 422.303 li
489.868 422.074 li
489.47 422.303 li
489.868 422.074 li
cp
f
538.95 423.727 mo
532.83 434.314 li
545.07 434.314 li
538.95 423.727 li
cp
f
538.95 423.727 mo
538.552 423.497 li
532.034 434.773 li
545.865 434.773 li
538.95 422.809 li
538.552 423.497 li
538.95 423.727 li
538.552 423.956 li
544.274 433.855 li
533.625 433.855 li
539.347 423.956 li
538.95 423.727 li
538.552 423.956 li
538.95 423.727 li
cp
f
637.053 428.929 mo
630.933 439.517 li
643.173 439.517 li
637.053 428.929 li
cp
f
637.053 428.929 mo
636.656 428.699 li
630.138 439.976 li
643.969 439.976 li
637.053 428.012 li
636.656 428.699 li
637.053 428.929 li
636.656 429.158 li
642.378 439.058 li
631.729 439.058 li
637.451 429.158 li
637.053 428.929 li
636.656 429.158 li
637.053 428.929 li
cp
f
48.248 399.92 mo
57.428 399.92 li
57.428 398.084 li
48.248 398.084 li
cp
62.936 399.92 mo
72.116 399.92 li
72.116 398.084 li
62.936 398.084 li
cp
77.624 399.92 mo
86.804 399.92 li
86.804 398.084 li
77.624 398.084 li
cp
92.312 399.92 mo
101.492 399.92 li
101.492 398.084 li
92.312 398.084 li
cp
107 399.92 mo
116.18 399.92 li
116.18 398.084 li
107 398.084 li
cp
121.688 399.92 mo
130.868 399.92 li
130.868 398.084 li
121.688 398.084 li
cp
136.376 399.92 mo
145.556 399.92 li
145.556 398.084 li
136.376 398.084 li
cp
151.064 399.92 mo
160.244 399.92 li
160.244 398.084 li
151.064 398.084 li
cp
165.752 399.92 mo
174.932 399.92 li
174.932 398.084 li
165.752 398.084 li
cp
180.44 399.92 mo
189.62 399.92 li
189.62 398.084 li
180.44 398.084 li
cp
195.128 399.92 mo
204.308 399.92 li
204.308 398.084 li
195.128 398.084 li
cp
209.816 399.92 mo
218.996 399.92 li
218.996 398.084 li
209.816 398.084 li
cp
224.504 399.92 mo
233.684 399.92 li
233.684 398.084 li
224.504 398.084 li
cp
239.192 399.92 mo
248.372 399.92 li
248.372 398.084 li
239.192 398.084 li
cp
253.88 399.92 mo
263.06 399.92 li
263.06 398.084 li
253.88 398.084 li
cp
268.568 399.92 mo
277.748 399.92 li
277.748 398.084 li
268.568 398.084 li
cp
283.256 399.92 mo
292.436 399.92 li
292.436 398.084 li
283.256 398.084 li
cp
297.944 399.92 mo
307.124 399.92 li
307.124 398.084 li
297.944 398.084 li
cp
312.632 399.92 mo
321.812 399.92 li
321.812 398.084 li
312.632 398.084 li
cp
327.32 399.92 mo
336.5 399.92 li
336.5 398.084 li
327.32 398.084 li
cp
342.008 399.92 mo
351.188 399.92 li
351.188 398.084 li
342.008 398.084 li
cp
356.696 399.92 mo
365.876 399.92 li
365.876 398.084 li
356.696 398.084 li
cp
371.384 399.92 mo
380.564 399.92 li
380.564 398.084 li
371.384 398.084 li
cp
386.072 399.92 mo
395.252 399.92 li
395.252 398.084 li
386.072 398.084 li
cp
400.76 399.92 mo
409.94 399.92 li
409.94 398.084 li
400.76 398.084 li
cp
415.448 399.92 mo
424.628 399.92 li
424.628 398.084 li
415.448 398.084 li
cp
430.135 399.92 mo
439.315 399.92 li
439.315 398.084 li
430.135 398.084 li
cp
444.823 399.92 mo
454.003 399.92 li
454.003 398.084 li
444.823 398.084 li
cp
459.511 399.92 mo
468.691 399.92 li
468.691 398.084 li
459.511 398.084 li
cp
474.199 399.92 mo
483.379 399.92 li
483.379 398.084 li
474.199 398.084 li
cp
488.887 399.92 mo
498.067 399.92 li
498.067 398.084 li
488.887 398.084 li
cp
503.575 399.92 mo
512.755 399.92 li
512.755 398.084 li
503.575 398.084 li
cp
518.263 399.92 mo
527.443 399.92 li
527.443 398.084 li
518.263 398.084 li
cp
532.951 399.92 mo
542.131 399.92 li
542.131 398.084 li
532.951 398.084 li
cp
547.639 399.92 mo
556.819 399.92 li
556.819 398.084 li
547.639 398.084 li
cp
562.327 399.92 mo
571.507 399.92 li
571.507 398.084 li
562.327 398.084 li
cp
577.015 399.92 mo
586.195 399.92 li
586.195 398.084 li
577.015 398.084 li
cp
591.703 399.92 mo
600.883 399.92 li
600.883 398.084 li
591.703 398.084 li
cp
606.391 399.92 mo
615.571 399.92 li
615.571 398.084 li
606.391 398.084 li
cp
621.079 399.92 mo
630.259 399.92 li
630.259 398.084 li
621.079 398.084 li
cp
635.767 399.92 mo
644.947 399.92 li
644.947 398.084 li
635.767 398.084 li
cp
650.455 399.92 mo
656.759 399.92 li
656.759 398.084 li
650.455 398.084 li
cp
.43949 .376715 .225864 .00350958 cmyk
f
593.724 417.025 mo
582.34 417.025 li
582.34 419.779 li
593.724 419.779 li
cp
586.655 399.002 mo
586.655 418.402 li
589.409 418.402 li
589.409 399.002 li
cp
582.34 381.04 mo
593.724 381.04 li
593.724 378.286 li
582.34 378.286 li
cp
589.409 399.002 mo
589.409 379.663 li
586.655 379.663 li
586.655 399.002 li
cp
f
48.3091 218.278 mo
656.699 218.278 li
656.699 216.442 li
48.3091 216.442 li
cp
48.3091 463.078 mo
656.699 463.078 li
656.699 461.242 li
48.3091 461.242 li
cp
.75021 .679683 .670222 .90164 cmyk
f
636.594 217.36 mo
636.594 229.601 li
637.512 229.601 li
637.512 217.36 li
cp
637.512 462.16 mo
637.512 449.92 li
636.594 449.92 li
636.594 462.16 li
cp
440.387 217.36 mo
440.387 229.601 li
441.305 229.601 li
441.305 217.36 li
cp
441.305 462.16 mo
441.305 449.92 li
440.387 449.92 li
440.387 462.16 li
cp
244.119 217.36 mo
244.119 229.601 li
245.037 229.601 li
245.037 217.36 li
cp
245.037 462.16 mo
245.037 449.92 li
244.119 449.92 li
244.119 462.16 li
cp
47.8501 217.36 mo
47.8501 229.601 li
48.7681 229.601 li
48.7681 217.36 li
cp
48.7681 462.16 mo
48.7681 449.92 li
47.8501 449.92 li
47.8501 462.16 li
cp
538.491 217.36 mo
538.491 223.48 li
539.409 223.48 li
539.409 217.36 li
cp
539.409 462.16 mo
539.409 456.04 li
538.491 456.04 li
538.491 462.16 li
cp
342.222 217.36 mo
342.222 223.48 li
343.14 223.48 li
343.14 217.36 li
cp
343.14 462.16 mo
343.14 456.04 li
342.222 456.04 li
342.222 462.16 li
cp
145.954 217.36 mo
145.954 223.48 li
146.872 223.48 li
146.872 217.36 li
cp
146.872 462.16 mo
146.872 456.04 li
145.954 456.04 li
145.954 462.16 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFT+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C7477F0B9BCB3EBA4BD58438260E6F0349575D982C091745F57E6DE656DBD360F903D8BB7BA1F42E7A2D05B5102174895284A8AFE5BF20A5DC15D43366CD93FB67607779C4A32BA> |-/parenright <1C60D8A8C9B81F2C3A0B9AE48BDC8A210A6BC24B132D0FFA37976CAF0AD48341BA40F2639F857493B96FE8C9C6A5DBA67902E1141CAD31E1E1F2EAFA78B4F0B158589755ABC3F5D48640211E0BE78E8AD3F692526A7797DC309ED92AB9> |-/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-/Aring <1C60D8A8C9B6079F62C6D57D72D2FDC86536E7494191A9E3EF5795EA6903BA675EF967E5503E0F9461713975E8624582E6F3E1510A5F9E0950EED4A1914451FF9474C0941D0A3186503138F0BEB96FF6EFEC76335DF56A27FA8C5F2C635C83D312D7641D3D9117C2751F2FA7BAFB4320347730B8D3EA674CFE35F91CDC44A8C704B1ABB766598584B2E79C7046CDCEC56ABD5B931F305B31402FE4E206DA807732B8C099F1B91861DEDBFE5F337D4DE88866F48E6207FB804DC356308D20FEDB41524F924990BFE144B5F7549BCE246376FF6E9C8137BA4C50DE4A6CF01CBC0704298D746520315396B1DF3184C1B8871722964B1EEFD92DFFA26C9D6332476020FE019D9A739F4119> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFT+Times-Roman /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 46 /period putdup 51 /three putdup 129 /Aring putpop%ADOEndSubsetFont
/FDWNFT+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four 16{/.notdef}rp /E /F /G /H 7{/.notdef}rp /P 2{/.notdef}rp /S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 4{/.notdef}rp /w 9{/.notdef}rp /Aring 126{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf44.2124 479.782 mo(0)sh234.72 479.782 mo(0.1)sh430.251 479.782 mo(0.2)[8.56836 4.2832 0 ]xsh626.892 479.782 mo(0.3)[8.56836 4.2832 0 ]xsh%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFU+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/alpha <1C60D8A8C9B66A6BAA2CFDED1D2EFA75F98BE0B51FA91D3486C6EC805643E81B99653CCA64E30B935978931127908C09443CBECCD6A571D8D3FCEC93A5A158423091AB4239ED9928E003300569B255F0D943F8F5D35F0EC6E967A5B49AEA36AE1B3BC22B43FD3533BC2C31AA72284108ABA1BE9C11F8548B89711F627A5A5FF6711878104FE7A8510F67AD235FAEA6A6736F2AD678C58B65FCA7756B07A21F636B65B5EE976BEE3D808AD91A855908C05561ACFAAC8EC0A089FC85F3C70E7AD807445570518FD0DAC061976FAF4B8F48D79A7BC0B7> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFU+Symbol /Encoding getdup 97 /alpha putpop%ADOEndSubsetFont
/FDWNFU+Symbol*1 [97{/.notdef}rp /alpha 2{/.notdef}rp /delta 155{/.notdef}rp]FDWNFU+Symbol nfFDWNFU+Symbol*1 [17.136 0 0 -17.136 0 0 ]msf323.337 504.571 mo(a)shFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf334.173 504.571 mo( \( \201)[4.28418 5.70605 4.28418 0 ]xshFDWNFT+Times-Roman*1 [12.1176 0 0 -12.1176 0 0 ]msf360.783 494.29 mo( -1 )shFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf376.892 504.571 mo(\))sh657.617 462.16 mo
657.617 217.36 li
655.781 217.36 li
655.781 462.16 li
cp
49.2271 462.16 mo
49.2271 217.36 li
47.3911 217.36 li
47.3911 462.16 li
cp
f
656.699 241.382 mo
644.458 241.382 li
644.458 242.3 li
656.699 242.3 li
cp
48.3091 242.3 mo
60.5493 242.3 li
60.5493 241.382 li
48.3091 241.382 li
cp
656.699 290.342 mo
644.458 290.342 li
644.458 291.26 li
656.699 291.26 li
cp
48.3091 291.26 mo
60.5493 291.26 li
60.5493 290.342 li
48.3091 290.342 li
cp
656.699 339.302 mo
644.458 339.302 li
644.458 340.22 li
656.699 340.22 li
cp
48.3091 340.22 mo
60.5493 340.22 li
60.5493 339.302 li
48.3091 339.302 li
cp
656.699 388.262 mo
644.458 388.262 li
644.458 389.18 li
656.699 389.18 li
cp
48.3091 389.18 mo
60.5493 389.18 li
60.5493 388.262 li
48.3091 388.262 li
cp
656.699 437.222 mo
644.458 437.222 li
644.458 438.14 li
656.699 438.14 li
cp
48.3091 438.14 mo
60.5493 438.14 li
60.5493 437.222 li
48.3091 437.222 li
cp
656.699 216.901 mo
650.579 216.901 li
650.579 217.819 li
656.699 217.819 li
cp
48.3091 217.819 mo
54.4292 217.819 li
54.4292 216.901 li
48.3091 216.901 li
cp
656.699 265.861 mo
650.579 265.861 li
650.579 266.779 li
656.699 266.779 li
cp
48.3091 266.779 mo
54.4292 266.779 li
54.4292 265.861 li
48.3091 265.861 li
cp
656.699 314.821 mo
650.579 314.821 li
650.579 315.739 li
656.699 315.739 li
cp
48.3091 315.739 mo
54.4292 315.739 li
54.4292 314.821 li
48.3091 314.821 li
cp
656.699 363.781 mo
650.579 363.781 li
650.579 364.699 li
656.699 364.699 li
cp
48.3091 364.699 mo
54.4292 364.699 li
54.4292 363.781 li
48.3091 363.781 li
cp
656.699 412.741 mo
650.579 412.741 li
650.579 413.659 li
656.699 413.659 li
cp
48.3091 413.659 mo
54.4292 413.659 li
54.4292 412.741 li
48.3091 412.741 li
cp
656.699 461.701 mo
650.579 461.701 li
650.579 462.619 li
656.699 462.619 li
cp
48.3091 462.619 mo
54.4292 462.619 li
54.4292 461.701 li
48.3091 461.701 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginFDWNFT+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendFDWNFT+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/FDWNFT+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /.notdef /six 14{/.notdef}rp /E /F /G /H 7{/.notdef}rp /P 2{/.notdef}rp /S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 4{/.notdef}rp /w 9{/.notdef}rp /Aring 126{/.notdef}rp]FDWNFT+Times-Roman nfFDWNFT+Times-Roman*1 [17.136 0 0 -17.136 0 0 ]msf28.4702 443.431 mo(-6)[5.70654 0 ]xsh28.2827 394.47 mo(-4)[5.70654 0 ]xsh28.2827 345.509 mo(-2)[5.70654 0 ]xsh34.0405 296.423 mo(0)sh34.0405 247.595 mo(2)shFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 374.22 mo(log)[-4.76074 -8.56836 0 ]yshFDWNFT+Times-Roman*1 [0 -12.1176 -12.1176 0 0 0 ]msf21.9312 352.36 mo(10)[-6.05859 0 ]yshFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 340.368 mo([)shFDWNFU+Symbol*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 334.618 mo(d)shFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 326.165 mo(E)shFDWNFT+Times-Roman*1 [0 -12.1176 -12.1176 0 0 0 ]msf21.9312 315.642 mo(1)shFDWNFT+Times-Roman*1 [0 -17.136 -17.136 0 0 0 ]msf15.0796 309.642 mo(])sh48.3091 462.16 mo
48.7681 462.16 li
48.7681 217.819 li
656.24 217.819 li
656.24 461.701 li
48.3091 461.701 li
48.3091 462.16 li
48.7681 462.16 li
48.3091 462.16 li
48.3091 462.619 li
657.158 462.619 li
657.158 216.901 li
47.8501 216.901 li
47.8501 462.619 li
48.3091 462.619 li
48.3091 462.16 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/FDWNFU+Symbol*1 uf/FDWNFU+Symbol uf/Symbol uf/FDWNFT+Times-Roman*1 uf/FDWNFT+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.4%%For: (Dan Gezelter) ()%%Title: (finalDrift.eps)%%CreationDate: 9/12/14 10:02 AM%%Canvassize: 16383%AI9_DataStream%Gb!R&#@B5\Y;lH/!PSZ7-j[[JWf#4?m(F42XGYH%gs:D>:]F4&[^1s6S]C?E:Wi+l,a6>\P"[VE$l8]'?E;oZ..mPaq?>a%1B&!*%q%Fb:$O3[!95.od&JHon$AufU"Ns)62T@L$!?U0.I$,*"WD^Jkkt8YZq68b@7\aG-diXUUro0Prc[SjmJ3.oRK@K/Xs5PbSlHO8'%,@\DHL8%b!\rD.DY"/EAmB/;"]'OY,4^GV!a^EJ09.cM$q1D(0Cj./05O?tAI[5mHG`h*&Kh8o*3h:@3dP0u_Alu^if*JB8,JXo<%`UA%3<BKE]Pq-Q2"tBU0W$>D,GrX6]&$EoM$&2sK1RZB2dldHCE#]*i1(9Wdr1U#]l(^B[&*r8!^\8A,@1N0eDLM:CnjH`1i`bUW%3q]aG3eYg)@L59F,k51;/sh7"P>YVA(f\MPr*(-[94[h)5K0I/>UH$8-PAa>?kR2MK[t@q5AfXL=asGO\"k/nAUZVQCB"gkL(siG%U$qX!jeO+1DgH9e$k=q%-nS6k/ZAj6e`XnHSWJrG=RDXp\?6?,UbV@D^GA.oAc6<H!qb#_rJuVj`)6SJ"0$M#^Em!"EBs=FRtg'H%ISNFGTW\OMcQrl#+mEWb?3SJdn$Hu6$0tFgUnE@dU!(c:m>lED/#/H2<JKn,`Wdm;T;HP&"gPH&5GS-T<2%k&Z.+t7#PK[>kh(`K%SQo"lf:Tj@]m:Vh`^.:'AE]@f!SF8NWfQIbR:0#&FNVAt_On(inc]p+j*?#J-Lj6__=qD9\]XO=an'bDkOC1Ne%;?1:Xc5)8M$-#%iicl*9-od(.[^u>V9Va=b@EA1-3JbmF=)X:1)VWshs_XZ'oQ1o=MuSF7D)PM@Mr%]]:tZdimXWXpI13.6SYJ5;LBl\H5E2QmdhQj%n/Y/1S+%Fk@@NLIdX0UjI)e"p,(.FS/!Q^Q@[lj-Ipn9)*G_BkU,?G=n/^8CT6M+*KJ4i4.=<\#mD=&u,Dp_?ko[j6d[3pp;@27F%PI0EcH\so(NC$.ZPs/)<cp'(8mDF.LM=r'/28)M,$pV!2[SQ-r8eq1R[L_9c(Uf@t5JC(?nI!!?.;U*?dpAhT6Kq,$,=I4j&9EPT%PWkl;;6"+T8iMGV[,i!K`15gUiR40[rh:^'5:hGh;`GFpLJQB"e%=6rI)f-L^Ti3O-M1Gga"l:.?Vo]tAaE79;$`Du'cpD#7H$/C%S8ntu"_CpeI7ia!Z(k9rE%0TSF/;Bk[SbhbPQIE,:7nHYko[m7N_IU?[*L1<BFQ0]U\q0PG5@.NW/OboA1;WKGb9#c_Y4uKiR8\U%.3i-aAVJ9159NE&-1P]/)@EVS^'\+K07B!p)=iQT<%>3E+32bjg*cj:faIhe:\s5^-5,s.p.>9^.Jd9GUjqVcrLH\6Yg`/M5#:W\%TCf<`TYIm1qWA6P9(\#78cQqEqHNimIuO4ojZ3#T^=.P-^Qi0u'ACJ573Nh?R'\:(b?Qg=M'YnfQ,mT)s-Y@q$\)[>7#HVr0p0bJ%oBJQq.>VH5,aMOBC.m#O]AG<eV(!1)Kn6tu;RGj9Pb%g*C>fg#1oZ8NVZAikS3EXJ!L!/`*e.*mJ>^gXIcF?^ecZmTXjohBMZb[N%dkm[fV)eAd]aDNq+4QUNYRrO7c1n9APnWAfq%Uf':Z-Ag=uh]Hp+,:K#Uodu$/G_\%&$JHFt0o9Q%VhRNf6AXAJsdnAGi)Q4apWC%CD,+e^CE=t25CV6L[BUqo6?neaN:[F%S,9FkNHj&4M`='g*[5nfJA2UP5'r.@6%L!m;]9s@Ac@n&rKe(*r%V3daEq!l)B>eIPTaL%43u=rL3AnCb+#,eKGk+k_"gQt%an'cR>u<.5>VZN0,H)+V.HZHH+@"ADkpYgF>L,j8KF'/'M^AgPUSo5+Z8I#,ErpCR[Z%SW:]'5%[plAY665l2)*WU/YQg,H;#I]`0tonC)q;gK3+Z'ZE5"ph5L@![["ahX-gXj3X/+7aQ4Xm1%EaLt'4RQK6s`:J8?WC.:<4:Y6gd`9%Tpic1<+G%h"*,2Uja8C$EWq3ULR`n-WjPer23ISd_,[-f$bSA)=N[HXXoPjRNSkahF_j7*:K&`P]CiZXmV7^f\OO,RTt[=/3a`8J%6PYOk=1M)fBj'T70:6I1UgpC"U]%"I:</BH#K9G>5E%<?O0tWcTX?22:O>j1QpPdJg5U,)8U41Q%d@<<5![=/;8Z))\1B(V5q7@@%.OdN<PiP`Lhsji8jV4Sf8-,4ikVqTF?aO\([03E#-\\5#42K'L[&idQOaQBr-]^u"1*NSZV918;R5?B?;Y"X(Ou\Op6LB5*a-Cq<%C.)t)q]\n!CWT]Q<ME#SM-NhS5G$f99P67LIk)a%Bp_IhY,QVAVc;kp)Ws\W58h"5ETFn`8T?;L_&+ZBnf4Kf>Y@@9;2$2jSb-O!%JFD-#oUG^!iFe#_Ot!&)67;:?RJKl\,L=0S+N[2J(mOJ3Mi7?er,_EVge0'U+Jh5^r=83ie+$$,J7,"H368FT$>TcN99C(lBCuta%k46uU=Z-@.Z"48I$6,fER:"F_T()u@*l9D%1s[Ar.#i>U+J4GndXpDL&n"`cYR+kR]Q,CG-3U01E)l-5-m<8E(3pC%5q\^@5gE=(%"VWhBcf:qk2iLci:J.%t!R2'"o*d#`,uW$^7OV8-nDn;LZkg\+a+9aS-#n*0rdhuY6<X8X_G?j6&5jt*DY6a;)(j0L:Km^,D$^5Y%_-R7](>@*16"(#(&F!Q1qrI;V%o@E#!ObEg.$nOjVjd+=K6B%5P>SKY"em@H;4u76]HM<N_tp#ajYqW4*meC7m0`&p!k'8KHd_18%_'=UIOU`l0&IIXo?dsM%HAhG\8hB.oS=VY=Vg32V(Hp<'E_WDu=rVZ:7qmOH!70U_;@UW,Nd?t:<'S/9_s*fY9Q$\srf'^#JSG.k%'m?oG/K1Rcbo>6+e2C.,L^(s'2?qPfW>7lY=P]l7XZIfV>Ua)k=XE\9ZD\q.q4#Se72tPgqkn9t$VM%rfjD'-%!.",Fs;q:*8;VN%A1WR"QY.*q+5hO)RZ=J3OdR>%ZHS20h8G1&$%baPAjmGEKZ?l(b6`%Z7m9q[HMq*p(KA(B[6`>iA`D/N26-5;Z%TpYW@;V6.C90L%<)`0oU4m&^MY>,f[9fSLV:HT^#MT/k:?)?mF4m/%dSR*JB`OZrf-M,K8]Z"*qjaN>b'K<M6pe?1Ta[^J;iNhd,!k;u[6BhD'Rbnj%L`/jIqAkAL5rAq4%!lbQTuh)@m\\L1@U<%,a;!052>]biSb6/+eN?e]8(=otUu'8QN)kk2j^JU.bSaSs6N1L`Q2[MPK@!DgI?YF-%!&Y9ZDcnG<.pOa^^N@Dh7[R(q+Oh1k>Y^mQ7@i")[;5&S+O@klYLja?]aul!1do,.$22!d?_k-CJqp3fdr3l:[.[r-B(`_QrMR;-%/>Q1d#ZQ+EnTdt2!7A=;^*V9';4*fTLn=m"0jRaq-JIAQZrq`';NaslCSa6>%,,40'3%H):f6q4aE1,@l:Pi71=VXi^o-j)<+neA%&5X!RTL`TSY#)ulRT.d`6APi7@a1,OMGus>SchJ`08e8*2f%fL%7fM]MH+&Z0*V0)ecC/YF=A`)QL4X(CsC*^#orZ2@TucY'OG:t%3gsU;G>U$L'PfV!;'i$@a/n]4Q*e+-:O=X,%3)^&TkH'XGf/<EVoj1e%?d:/<9#u2=kPll]iS&,OaJ&rB;9P,9]W@ErNAAT<\/DL%\rHGD,'QaW;n^uO?U+#='c_k[-Ws_/>aa\Pd;nEN_$RPZ4"@?[f26i0VdWf;Md.nchKlDL1.E3MokB_OT;eXZFlOjjo<NED`K$A#%T&?MTVl$&=[PKAcVP\eq,%VWQ$dpP)q]Xi+0_3=JU\6gmX9?Ef^iDg.%EEZr;!^%!Ikeq(Ml`,%U<l#&oYB-/[%#<9UKqXfR@(:O%nnBFf_?8LDPQebNL1;JTcX>HSY^2GV1\k"%<W"0t&#+dfD$G>nr_EQ;dK5@\h'^jP4BT"+)==&@%[:=g$ucM<R4:Z*Tl*aQeqX0X%<#I!G!X#Q8oPpZa3(YN`e3=CC2d"jeN#Oqiho]Y:+7\FE_G4&*M`d-C./FjQ])ZW?R*M%gD:!q9]`nNRH,PPDJ<.78krLChs#"\F%^+dIG-NmU>.@hqEW(`\P#!1[\4\VIB:4Pr_=Q]X*Jq<ou??0o>73<ni=J2X0)jBf%q$Gi>2r?nPQ%,=1_'U]UG58LgLY=Mh?/c+j%]dJQl`;N4QPPu&o;.#L]Kl(U+?pf>G-Cr6$RYPA2-(O'3_KM,k7@?)"Wpi,DgJ"e$o9ak6f!#g50-t25SE]l,Cs'4Uc%eWe0_@UR%V3UN!Dh@"Rp7qti:Wo3i`>p>[@p[k\<q\Z&4R[!-8b:ePDNC8!2YCNn'I0Y(BHn9+Brb#HU#[.oZ7DXKj@m>9K!m.cIM:n5-u=L)%CIr<s/7<P[P>g&jWBF%Z!ZZ,XYNK"j1<F=tMVYGhs*73oi[*Ot^Oa%tb:5D(Pso_1BuOGE=#l:if:J=K@?n5=`V.oTQWH2ho.jX(%m,QT(WRt^f<Q[Hj?"6OL]!rOAJG2tK\ctd%-#!1SG)f\$M!]fF+l:Un!N;PWn&sF58^ZdfV[Egr3t%@$/I^p>hhq@b`a+UhE52!Q%^XN4UpXJZmcBU5X%"(i74qmsaoZ,CYh>?D,r_,*H0s(C"@H:fYheGeO\20$*LN#=]CeCgQVc/YClcmORMP#p`SX'sS;i:D12sM'!%>,4o.Mq=Hc@<9kFmn!JulWP2&I%=6n<%=6UPJ4Op+-gr/9'W0g>()m+C$WpKeM99c]eA6?Ac&iN?WX\>QL.UM-FDui(7f,-IIW.t%[T3A&OG<9@+=KhO-I=h<)G@sX[ULL>1#t1JQukC;3'O8OOTL0]3'>TjpKEOd:h`H%GbMQH]\+D))7Dana78](hNBRG2bn?h_8Ua!%ED(V=kKED%;5ZVSoVn/]S]RhbmS1&Tb3'kG([k,CQ[MfoPgB?5oe&O1m@K!g]Cf$Bd_R"tJN@&&U&Rf^&N6rFs%b:#rS-\g]AtJ]%=1_W(^]Wk#n!uXamPGh('Bj21gE1X8pTaFM;F9Yjg&l0eBM`V>nN?2t]Zb3_7lfEr*pL'4V7>#$+,#c-`2$;m#Ha3fd]V&WXnFtr%A.Y#>.a9'bDstS)mEtK8fI*&LOeUi0IZ`oCnb4pu=Cr(o*$50NIL@$HoX-U&)YK5g,"R/JdICk!1'/6]`Uc,+/aL.6.;+lFjN<]D%#P@kDSm;lV63jmE)(fs-X&!I()(fhq9AJa3\Y6K9fMePB40Eq!G!rgr*$W-.-!ID,,QiW.Bf_u:n]seqUHY2i48$]4`aQV0IE.h"%Gg:M=-Ge/f_qOcsdZq-;;n,DOaGH96pR6M()p%kk1d#-%dXR.t(ZP".)OGmN808%]V`a7Z*_rNs56K"`,[L&W+VOi`l@-bG`B6D8%@[!lE2#M0INs"pKT1Q]u5EbP[mi;ViplB;`,JcqPON:<?=U9NPfJJL2)^NV:?15/Sn*b70:R>So`!=2/CXN?rdtSd]-paR'F=)If%Ps4J^+.Gj?6-S78os:&c]KUiNrfsb0UuNc#1TpU8<fi(@%-deSH68<B',W:UJ\`Oo]k0_-"=7Ug8:(gdJ>)5AdfJ;sf?QGk\5aF?%-\I'.Hf#X^\,$QUIgZ;kAAnL=/cSu6$\!d-+d+8TKS*F&pAr%Z19l.P&9b-Mm*pfRTAG5Ka\V$IrTTL;hB-pKa6D,pmiSOX+6]_)%YJ>,MhpmJapSuP$oj3(1-eHn;O4uA;T%ANk>2@mi&!]c)d/[gLIh^s;!#u@0DKu4]++O+p*>#\)[;PiiLcE*1?Je`r;]1>h_Jh:,%oO%@i*OT)2/[]ct1:`;(Ig:pRnj)ZF7gV!]8M4D*PTPp8*>Bo=%fpSIk1Y`9cl%Y6eS\OkYdgl'UA&8./0alCUTVU4\guqlR%#,\%l49h<?-f)-LKPXNSBWa2/9CKVqRH?HghmNdPEm1Y+*IWX1bIYaX%@XhBa!^F#FM4J^\Y#B,gqYAVasEdW>-b!@ab_ZXXtX\0D'@\%^OjoB-idD"kbct4G<r<[aHs]<#l?0V_Yh7I$SASPG'lU`?Kb#&^ah&P"C,Rh_5g79,/+Zu]NAOda1qeV9WF1(VTNU"c%;cCUm(%B%3g21n95-,uACq;$2'k#W9Nln<OFS-Jbejg@2d(A["Y`45eD`-t$U^<hn,Nh,?pJ?gPu$NUGp1Ms\NGeQdS))gbS2i.9I>sXg62M(%J-Q4,YZ;UX;`'PciS_\m9)tKG9F>*V.$J*1!3sV0Qnl<B(=N[OQ=g@Z!O!c<Jlt:Tjq0DXaHkI6/,GncQD>MiS,c#t'(!RoQbhl/%BEZue>aZ6c&R_k+a7F\1:\#rZV;[]uo?c,6?fK8A-nk_<&NHDuP>$[`O;(SJD,d;[_C:'d7?f!Q-rT[K3C$9X$8J:M:g=PBNYd*,%Ylt7A3._@="<r"DFtRqgFsiX7'8]+4O\Xu2G=m^4P"DrN4t.b@a]($ZbU8=j;Gp1C4tr.R<$IT$V,J6LBs<65@YmK('VGsm?r3c>%UmQ\!+S%c2<b0>sa`AkqMrb$4EMf6YULuPh:&nAcAZcFe/i-nWQV/W3WE:Vm'9k8K1`5i+;?@[HLf`S./1uepb=*gW//AW/-CJ>S%Qmr/d`C*QOnjT_&(7>53;CE>RKjp`PaSQ=465j106F)]7R7]p%Lp@V$,J&23AQ357!Df>HW"DTGMFI_KoE]UC2_le#5epdsOc]X=%+J6tm1rb"80eo7o-^,F2Xp>,&aJ?o/A;WsS8K)(iO_4@skJsCKKKn]s0I-r:T"jh"CND^I(]eG*Q/MjD*nW_KdA4kuP=[P3Gr,if%6:g;^:$<_GoeaP9V1#XgS#&'ORdKO\Z\=Pl3u.#DX=IrI*R']frrFXc(I.29I8,1cZS6=iqClj,:I1$;UV?M']*jM,EgQ<gq:q0i%.CStnT9;AG5Q8HZ6hp3UQi;UTgaE*!(WP?abP.@!i'#_i<*S2Pq8$0XLJJ<5Yd8d=IdA`.O8J&6n\6!WeF."aeF2P6eF."`e1]uJ%iHM&`ptb-[IlD\Qhi1t=GGCN#e``iZpT0MVh6TTIGL%2lh`YbNJ+p%,rnXnMqKL7(l/+X>Ujr-?OoF1C7cnp@)O]JGCLhngXHE>7%ZUX)$cPi5/4_nSWpT0MQh6TT5GL%1q?TW$c_:ACX1Oa=5:khO^aom\smo\bdA'N_8:&NB"?;'lVgFN>>Y3bb+7iIF7K)9i21UcET%/P3#3s2R(+dH,Z&G@"+n:nZ(m8jA'qoK=nY8lEI4Tb`/\L>JXT_-"t^-XVUc9G_OqQZ6%!cD3as[CGcH(^#8q8MjV!prDqaTCg/W%V0^0()Uqun0^oj\9uIG<5$[C(8)NqOX'?PPqI<I'HD`p#QVs><IK4mcX[,$<0+%37B"p-t=18($r..'s)>F)rFUW#$s,U]j&]hca%>=p]cHi<)NIkp_Id,f%uU?tf"G:<,C0WKeZ!gsC.r.Fi2)Yutkm\E5&6u=#3'2-i1j$pdID#'R1Ppj>ll0\Y'ogXT1;!Kq<!)Dns%e>>&G_$OB#[OscLQqb4/`ON+Ca0J'(m^m!R_'eSBZ8r+nMs:jm/ZU)2-@$H=8kF^QMtPpkp!K$s-e?Xok<ir/%KDRgf@%ED'!kDQ%Zod[F+1X)CW"jn@HDeBD68&fTs(qX$U:pJaHDfV8aoFb(-W7!.l2%en>u?(-o\.Q=$Nqi3)p6OXnNnFirM!IY6#5gWR4BMF@$K&j%6o^;uT.1?bB$ru?:[j>%M6k<K!0$:BN1RMB]%5G@kkeemeOS*MoMgC8Jq:H20bDf<8J%<gDb7*T8n-k:_`I`'6ha4<<9n$:f`B*k%*gB.TY5G)<al@iVhE`@NbN]I?f3u<9<4V>IA;lA=VQ+aeGQ'jtF?3#ah+GQs+:*1&,'0_o9'-[jO;`#+>J%g=gPX"lN)R9=jk-dg%HE$DG`Y+U!c3Es=b/codZ)h&G8pLiFG:S(m]h]A<gZ!cg$j.A?0Ulb9,L'g[Ip*CCqUBf*NJl#gl)1`)KM+l;AaH_*%mc7Lc320n%Rq2r\UJAm.rYN)p]dsdb?W9Rl;h>HtZ.&.PF^3nD6):U%)7K$+\[2$S&/fAUJZ'J(_\N0I?G>/.`*,=.-,idnS[E%9U=AEAq\+[Z%S.0"f<`\:P;cT:akE6g#f/_In?/KVp9rVT\DnfA=OA-DnaeW'pMRAJ'hk(m\_H^KJ(4g`,\(g/`m4Am8_ffNF<op)'jo0E<9;l3!%Wqk?9["^&5AKiRInSPB$@q`P7Wr5j<Nja(>=C:]m\k5M6I:Q9ZVbWg=-6pF3s.e'EK2M2)QjtOI3$@$+UQf!rA'Wi37[p@$XG=4b%F+CtmFX-YSkt<\/q\Q%2lUV=Xm;JcVie?o.HhG-9d$p6H\DR6h6iI%J'[-L9\T(a$4"L=o50T&PkR0`C+,6.aG5U[diX45/?\?N$%+%GMYrBJ&A2Z>??K2JQ&r4akB'.b*G0H!V_GO=,\.I4V6?2U\NN;n7l8g[H@,`;keF1_G#DN-lo1eTIrheeYD_QmrPUHaK9Q.UED%5T_X2RssM7gdq63.$pP&j/$UBrnEE0cFIt0beKa&kHC9NM:B0&:PMT#*1-A+TD`2YqJW.UQ,`J4-prpPO]`6V<Fo1I$TmS[it]OI%L53.tLJg92S/B]gZ>&s0,3`L"QQ>_hb*?RaV:'aG%YI_-Q&$a^9[`:P,H%R+jc>!gWBD/Al@2Ro6[;f_Uk&!Ae'<*,hct<^j=b'q%PU#<!!f!@e.<VfjQP;PJkIa#oX"Hrg30][Al9%;WReg?)JBg$sppUlngYUf+$"3&nK=KBJlb3#U'3_MZPGSMTo;?jlj]W>Cd?s;Q%ToVn9_K9m#P:(8&UGcC-5sML.\!tOMqf]AnY58;al<^%!=p5'bETud[iYclT``jHa"AEA>h?\qdj_XS<)#U&YP5`.XRf-Q.[V*PP%E9%(TY_IQbffc2jB<f`^X-p;4e`WjA2O.abFY-X&e[)@%HIP2_#OMI8%0sDo4`Z"EfkCupbs'jrs8$`!SA&I[kZ/+i<qq^@]oNJ;%(ieCS-k"2PfTp-!fTKE;b3DEr5CV<.)fFC]0C%+'3Ih%DBe@`Bb(hM,\@e0KjZRbF>2O-o?P2$sPhUPaDspZQ1O3j+9#%gTfTj$K%f*YI11+t4G(G"Nf9+?A:^W=QdMOp6Ic(.J.^O1LlSP3/<Khf!EDhOir>q'>9AkaaY`Z)&@qWrJij6uZK1#R!E#`n"&VW\$*go6Dq%Y%aa&YC7]S!4EsNqjW\9.Y_p.SW7cjd<BraJ0o^aLRbmlDY,_)8Vl6M\R`&(l)91d1p'WBb:?Eq1UK\u7!!as&I:qk_gV]34n*6&%dB6qD(RsN:/2iITo4:aUVD'$M40]R'OW^_:b_6i-Qs<tH._Rr#BQ`9WVrnqs6-F?2e>]N5@FaOn_,)ar%irj7ct.-IAr`>'l21U^%N,:#W;hRm"Q"o?F68@9'b?N).?_0h%)8WlE:]m=^fO@Fq;La3jF5Sne5V7KGO2!N)3HjWA$!9hr01_uA2,.&V0;Kta6WJQjqR8h'%VIEJp:.gX..qaF\P"+i"Sh?%]EuP#efgL"`OVI/s\'<k>f(*A$BTKduJS0OFk`4n.GD7glO3T%:<J@Rt@j%@1>HjnaK/E)-F.)&J%bL4:/X?XX_#'@5Z/,0TqlXt_B5;Kk*PT%VDQP2"`W#m`ak*+!dU\LU#98tXf7&eA;gcs)$*&Rtljr\rL7*@E6AeVsbB&)h<_[p\=%#Q</O&)?ClQZKrjnBq2p8Ng>OE0@h8C4tQHSiE&NVfGr[(g`d7Q63TVl;3@X#tnuf77"keG%Hn,eqc]J>T;97p'33=:_d`_D!t8<%W!b%t",a@FNV[VTd#V?<5R-MN(Cu5?\gFtQe]fg?gX<TUkfAR7LVbMZ*m3cpYSot!]lC.(E>Ei,b[C5&mlAKO/2iqR7]&^&")9&o%kW_tcTbg5(7N6J5a!*\2UTV/fC^QlQ5/[ma*OuBt_0".IY,fHLD0<C']X;F*Ehgs,$b,VIX:45s[%D\qS&m['.VLAuZBFhZ%Ut0c%>Fr)$$DiJE;iE5`UpV]J@4l7m:7_Ws(fr6ed`TrC=6G`#XZ;!OptNBrm^+Fq+#G"6$7RZLk]'Ln2/tIH*@*:#m]:#N]ejc%,=ng.%8[%Bo-+&VI]ITN31,4l'lFidP7UU)6P#?1p6*mUjQU3X9X-io^C4OtJ2It#2*4i^C4+@b;s5@4AZS#p43gJ#`G!Hp%YOikeX"oP7%X4dI3?kho6p;`eC7PRmt/V\u6*2'b]4NM8cED&[C;#+WIQ28`,rj4MYo?)\H@p8>"8SCl0oCfpsk?Jq>91hK;S3;!H.2u]X%9.'"%]i1jmIHVOH27QX35"'E!bRYR7;9-n^T]f>BY]S.)WrF<7J4836FJQRs,GD]"VIHQPF`[,s<0>N+J#_n%8^8@.7q2_D5tQ3CRXH&W%#+%'<#[9h5NNcF*4^T24l`Zt2,_&fV3(PDh&rniN23LVFV':8qNAqT4S8:Xf50#d7j+Nt]/?dp?:qr,3g\fq$\57Lt<5,E6Qb2q=%47eP4mrFQHbN*:Yh!PjYdG%aM(CW\r^Fj$oE@)7=<<DL'LgRb:TS1"b[iA=p45<1kdZIdTF1!8&$^5VljS5m"F:br[mZtRsnPQ$l%4o)T&8ukk^TKIU:G...tgN7/;2(AESV.0,nL#'scqh[QmHm(kF*H/[')q^$d>QV4g4+Znc@g;F@_i;/"(pkSEa^,.F-hjIQ(3@>I%n_Js3Bo<Ca)k@OV8^mH$RSP:QPMO9MXZ*MW]&T3EG*f2ZUuH?\gMQ#HK@@a:UWb-QY3t'G'X@Zdgm3`AO%ee8I(0r9o=I_1>,o&6%dtU3j]At*=Q/5,C>FMfICf_OYQ35N<.foVBh$JbTKf1h@XDaO=]u4gm5iaq$RZYcmf=jof)?jG*9&)mRV*o4rJm'>]_/tCc>HPWV%cUrt,XZr&7AfQkd_sPk=n@=`H@cG7)8C&D\D7U@mkP$Vr+aAqlF?%a<jpMZ+MOXLYA*Jio@nK6&TL/\LWb2S/Fnel3]WqRLqj.$1%*&%Mo05(DKHqcergB"FZFrKm@CS3b?VpXes_mpLY?Z;7Df\OV[Mbf+/D2i?jKcM,*ajnqra4#]!:uUAq&IZ]:!YiYgWN@]1=*h!h%DkC57A]4=TeJ@@0-TmWqJ3q!NfG7Db$m2PW/H4FD`Tou)*YeH_o"Jp^ZSKo!N=AgYo#'5W-NWK?!_YGo`a4'3^6ELAJ]#sM._H&I%fZf^>cp@?O$E,UK^a;jFm8X5=!bcZMRV)#jJY&/d=+?Bs'.]`NeNlJH5Z&k([C*Tdp"2cMTL/DsZJE&O[04&bee;(L!=J5EUPj^5%JWm-Z0[-*td"`Map91[%JQC?Ff8lcS)kU]F16mdiX^/,2f=(f9g8f&cq-,ZaR[*AU@m<"@TUQirJ3q(QCL(MQV?UY*`s8Lq1=1fY%OK#(U6nJ%F%9.R'0ZW"-'L4C)Q%:!X9[^rlc*SeDZ]8"m"aUm[)+71a&IJ^='Oe/)IjW`3O8.=:;;;O]!kgd2+4pY.3_<YmOa5ia%X\U8*Q?g_W"$PLE]l)@Y[k30f^@%"T5RA,Blto:n%IAV:0R$`J"WO,raPD;k=L85-(qkBP;/+Y5YEeG6Jdp)i,kFo`Mc^'E]kMt/%K;VQUW%Y(OqtbVGZN]'Lp-KjE5YmcVno;biW-H5VJh-TUMZ^#g%YprdX"r$++#XRs87o3P;kWfKEQ'odA;:i4a<8hX!=E\kJN_`s%rOeHbpAsLGcofcfq[ZOAk]^Xf">ooQ[.6tBEeObl^aL6VJWn9T:DF#E2(]/2\!3;X3&^MG\bm2;5kdV,Vu^SkF/'J4AJ2bD/KWk%%VAFqaA2er5KL"SH5a0$Lh1o_[J0"ng5Qb9Mlr++W]ni([l3i(6GK\kXm,$"WZ&ugUa*iC0an,ekl?Q6VQQ(,N>di7g\N<q)n?)+D%Sror=$Xjl/\V+MlZk+8[1RtghmXfUZhDm+8]BZc)8XRP(k'3N]aSffRs1$)h?g\5DGOs$ulR6Ik(N^MV,]K*Y]3f0qRKo1&GAGE&%nU#(npF46ih6$rmMHS_q1"Z:M+hOWcbY@"CApnkN^^MTAP^M(T-<HViS%pYiD]WQnBPY(!>C1O;O.!Vf9]#4*.6tF:QA]q\c^Di(%e;N/=0BVBqERX(<F,G8=HB0NiS%bM'?>m8t];PCk>-aI!\Q^#YZ-B%sl)mL\HAKhYE@3Y?2ceVKqQ":RpPM,F=?3b!g[%:3:;=?J%c2C\1IJ>j,\%\>Vm9OZ!N$#1jEhi6A7elIPVARr@TrRX34qOd_kK*TNfuK(6JK<_=bPJ@QIZEc6*uCfd)TBQHOe(n-V=&ePC\(F[%R<+!WlT.r-O%u\Hb3][j3n(2.//;tq1XsG=f\h4+]MTBHpJMO?\1Be/G@GNN&W;?FZWJcsO!=)OeNgCbK,qmbVsnei=8<:RGM&b3%cHW$RUn@DA-gBIlfT>h@@d\bcIG[n=f%#"l[h4?,\5EN@-[T_Bf#&5?A+t@D0m:i;FM_2b9!n-,k@SZ\d+?4D*iSRID\$qYCrL7B%1?*H8_D(HEgBri.=o5"4#P?7ABOr]h"56pc?R7sKD1"=c7Rh,sGnYa_qp4;>"_a`B+R_on%og&BdsqoUDf!WOn#KhFJW\]'J:]Wb%[_oF/:uUBT$7M%YKYUm=Wi\%-_03$dMRGmq%]DdGWq3ruXY@e&gtMp"IDhGaW/oG%5]KcG?n\C'FYt,'_38dmT4^<QgXaN0Z#<]A%GWth#UC]Vejf#QENfus4&6aImTdrmR;Vu^Kb1p@=/.hc@$5\E%g5+X!UGm!gI='D3qQbTa@+6dc,!E$e;WgBjSZhc"4k/Ssp@Y-d%_&k"U61TcdH)F`:AH6?m2C3)_MklHNKns3AEcV^Tf7WWurEcC?Rs]<Spo22t?Ubc9F&dl*9!58.78NcE3`P9$Gqboq^k"oV!EJ"r%TNm;&8u3ZE!CQ90#9$4aVdr7h/S%=C_583KD_aIY/&rbUq1KG*QFI%Ead_'L@Zt$)ml]O`5$q-'k,!,0U6^5eepk*LVU@YC&(1)b%3krm<C+%aIbB*]#7l:40B/)>S3E-de_!F6<llO8K*X8rlQH!!H>6njrn*J37S<Pt[h8H,/I[Q>hN*",/oN`;eO4'\'InK>q6jEnr%C?o_)&'SK@]hud]<-2-=-lYQMGb&fM2=2HZA(.BH_M?3Ung;i2C>B#,=+7jmfSOIW;+V3=Ml,mH8&o[/NQu"c\?/aAUh6FofQqEH%hAKGE\8pH6C)*;Y1nJ'PXg48[Y@U0AIG`<++<r69mhk3nhO;b@8*_L-h9\lm\;;d%>WEa3CA+tj,E6X$1?[j\RG'TcPr2#e<G&=)%2sQ4fJfROE]*A!ce$u_'FWrl>%cjm5h3YOk#3^@\;,o)K0$?Q>]#_QY$:hP\BpeX+j9;SA7G9r#'Jrc)/VIZ!oQWf@kP`!5]GG'R%2N9i2YgUC)]*(/_pn;#06^N1uLX*3VX6>+8h,F$pN>HIJSPe_1MHQsJV^:P4[)BZMDl^b+f/BXMC/;jSs.'J+&Snifnph?SGg%/]%c'9bB?<"N)bc36e>1\lq?dQ1c^XjG?McC;d7qH_[9r7GD5$JakWn2,^<G=M<ba!TJ[pJU!j2IuQj+K0p,B6Et.sp1K\R,ug/@<"a%.JB>B4YD_'-AaWb,A"WUk(ai;IS>JH=1E`#/YX79fR-Xqla&;MV\E>#$+c"p1KA)\g8?CPQF[,Sk^-l4UU#bm-qCT\b$eN>n8$cK%a!TN=>+\=Mb[C//BVX1DJ3(**B/bEJ>HEL0EP0qs@RS/@eY42gD)%aD+pC(P_O1t?eh(0@i\KlFQ=9JWeR;-Me2TBBc$+&k+^*7C%>hk!\Pb9j9ldHj-JBugJ8:c*?3rg4t#59n<"mg@K/+I%,5e[``e.,WjoRbS;FV+YI84t@[YVZCMF^Pg^me4A3qo4a-Y7d>M0D7q>%kmC0jCTY]g>=,/@]34nAQbcXnjoMGb8ToiLND4j%b1lO6/CRg*NpO%ser2uO`p>uhJMo^H&2t0D35f=U"2&tO"uu!u-`c"P]>Uma%=&utY80!$ah*VE/c^RR.R4J#6l6pWCOLVo5TkWkJWG/rKn'OkX4ll?TY>8bND]#5S#qD>bAl6=h+[EU*CCS_brbN$!c`)qR+.HDL%O$0!M-2JU1+!aLrc.?SD"ZH@K6UuWcSs*5M^'9cV/J$J"q:MK8o6WD^(M=qk*\D@JAU8=&Yg:N0"FSjp,<fEj@4Ze:Sd'>+d]=,@%i5dkic8T)'DK`qcUithj_3&I&e$&=ep-s[,*\bld/e(,Veq2A%GD&Bg^l^P0kuN&l+cL-0ZQooPFM=EFc.Z(9375:^6drWJ:/fjH%fW,t&V-*LnKPM`(GP=cX/E,[eX!OiC<6i+aZ^pA%p$/`tarLA^<o-k=b5s/_IINXa'aG368L?Oi.e[%*jFQ?>*pVE`FQ=-m#<j,1%\/q^tC0QTL3(lD=ZhaUNH-_RbTi;esZa+;SGW77XN#4CsqeNLWY`';$W(NUu[&=qE@H_.26+e0QII,P[Cm52N+D5#;E`51;M'gPX%7cf%#9UA0",gf.$esmAtj<;(K=b]>V26BpN(=oO!M$B5jP\<84'dT_o@>T^OB(X>$4SEb<hHgh?+8aO7&)OS=fe9-B0/CHd)mf%$%A*oQ2'=Ta_l-daf5I.?ZOK8iJ>\VOhoTRYc45sX6l^&+AQ9'mCkbUamTZsfW%dJX]?95rO!ObNC+q@krOK2u:J*SXrWGgRmR(]oX%lCEX1e_2NS2Lk@O170-fROq5oGod+mHd*DWA7#_00_Y1`UtXSS@U9q?[iT17g?6!f\+hp1Q/"(e8S(Qd<H#[[>D\HPclgBo/&sj^%lhAJrGG_oi/rL6WXI6_("H)S_#aNZ9hqRp6Z*M@Aqfd30Z&Dhe^2gND=UaTcU:e'IZ\/T.;U90>3h8Lg<"D(>ChQ$L6AKD<qNGQZ%%HY,S)i@D8L"T9re&N5n%0;ThZ#/\=l=4#ePSQf"g\u#F[Dg<S8kh=R?[W#d@:<NN<Yb8M;FWUEb][gW`EG?"/31=*B[+ZGQabg'%<?&c%YIUef4]`]AktEM9E.fn.4M4?$'3D\nfJ4=Y;iqa]raac?l+tJ4F,O:mZM+C+:Kp?]reuK1(upqtD2X\4:G%I5a5cFo<]10r%gJR<GAUP=/,N@(69(8s@&!g7.1Y<WkVr1cB8*Ete*0GQU<M@(DWZ$:%T=E.*=L2ON\I[o\/8(T?c>C6a[[7X_C\t<pFmcnYRmH3F%/glE,ig<$0Adg8Y6g't*8,)FR4GRemW'5jZ,$T#h*'36k3kBOUi]2*]5d_"]`St)YLX%o4:>NNl_&PL/TP=\%Fgg5p3HWOaFEE4\%nJjUQ$p([a`"I+SS29BMr3Ctq3^mR]B@*&'=I4PKLU9"\:`$/LGl(1-T/fb(H$TK?\%qBp^8H?-K8YSfN6E/Bqc#=c^Ga@<:S-G7%NL=7tmFV-)9#cC@q<;G4Z8(L!(?@J^B6$!XK6`?p1N8PKr;r7p`F4%0ho!5GZteRdm;ll6h^h=KSC9mn;4>XTFRr`tTOaZMVe'nZ%--^_!26URAhk<L"YY,&JRB=;B*suIknWi9Z)d>1Z=L@KnC+`5-?M35XpBBB9h2IJXF!W.C0RnR<O"hun\N%6L*aD]V8"JP\Jch.$%5T#8a&A97HC5-+re+m-Mgph]B`Xo4VKBo"k#[:C#bVH`F:#&5,[*`Y0gB1!s>XBi%VO37H:MDht4o-9]gIC1IZ#Q>f3Y#$9N>gUu%'dQIU?ai=hQtaO><H4DZS?fr[IaO%&VoMHRj*R?,`5$_ZZ`BI[pSKgO9k+UE4]7G[&r`1,6Ce@qiY2KEG%m)5C#=F.1%=&kpfo]P%)=mPr*mAns6&n^\b$5QqB&Kapo8<@nR`-hC\`DMh7PXejM`E1t)=Kds,Pf;,Ap!t!%42O8:*3Id?/;H?H.$9)mRb$[VL1)(hpOAh%DRt_)$Dmue3V/AlDUrrPIoO*"H^[1PcIa*)H+)2h.TgoL\](t6gk]t')F`n'gRJlA<4NlnBPM+s_</!sEH</'$8EO+dQICCCl+jc%P1iZ$G3!Vj>d-MGLBcH-`_E0)U!h;X(&Kc_(je+rSN%LacC*H'p6f*o'?)Nj*W(dD-P^,<II-9-V@g"/Bj)S\3it&j:?DhVq<;GM%hD)9cX67VuAt1ADe:'Dshoj)Sh)M*=_+d\2Qiimko#THQV^#*GH"7=3)*Kaej6=6=0I:EN*guGik)l&n8r[3$L=X"`AE4_:41!mb%3?B&Imro9YNZ`qN#pJ'#l!gdNda/d!aCs7YLQdET173f.)'1o*Om8C-2igJKjQFS]4E'IEDTOn()f<ANEjDSkM>4H`4?,)GbEd/.%?BjQHRA/@$,Y[pK-%O+<Tu$3RUc.T<0Jb_3Ngq>,I6fO#7qc(NOWZYF^Dtqp*&_;5SPA=".9k.VYAV(I=hVe0H$(__-f4FZVG]r9%1POWe6nl0sIZpe2d7\RSVbfO<OW3FZ4h0Xk%&Sm,ep^b:5+JC?Iqe^tZg9n7Im0C=X.X(C/NY%lSd<m"oAQe2qNdZ_[s5?SQRG4n%LJ73VoAPZ(a@\qWZLd$35E%cNDS\3>WI-]&>lp=[&*L:CLpP;+Qn'9(Cl?sulVqd!9?=3T$-oBtSmrt<.SJ_TX]p+-M1j%<=*/&1%:>a9&H!%=lc;hIG*!tk9c`Mt=8=(&t;NK4MSdQJtcXIdAZ+$2s1%;=Yc$9h-gN3MqHDPm(QCi5fk$_A@/ijZmEc'?9oaNrk.2c!o%2B-fuSKft:j2]?anTbL:hQXF)B@FkY?:,[e;?iJm)_e83dkGmP?:d;<&&VW#+ImMV)cD`$G.;fV/__uFgSlc:gif0moLc0r2*q\K%@MnX(dA3A[TIuCuNA"QM(u,FB\'0f\]4GTMhCTrsp%`5L)6)uFel"8$Tq3Q@Ulp,1--0H3Af2Jc:liY6TImM%N'8O-+:am<c5^?t%idhM)'9q3i3Q'4.$>5Z7ZY&NJ98-<MT:Gk4Ml+?c;=(K^_Th,M1fDOj(6KuVEoBtW\d-Wrj%R(0.\,@ri$$Qkc;Zd0J';-L*R(,c%Jn]O$GaB<D_&ORPl]1H=I;EY6iOLmH_lA10b<M:671Tl=XDI7>([XeLGqa.l4Q#-"Z'$etc,10Se*ajsb2]p/*g's8aj!<K1@Oo'%*mSNmNloh'VQq#Zc5mbjoOir70%X!GNr'P4MggTiLt;]t8)%i&>.VAaj28(iSG-4Q3j<n#:ZAj)/6NBt*Rtcrr;Jc(:Ii%qD`u7#%a2s_8(:$X7_pbm:j,BSPL:jk?``c`!GcELO/_!n7r3eVr/c=t"@CIGpDV5(;a(j?/9s,D_U8Ba5?Cd88!XX4HGc8%Xe=;GnAY$qd%V3/PH%Okd%qj0@:VIVVJC>'#nEZX-;h<)L*"mj&Sg$OEs"j2WS<Mp8;i-5+-@0a1-!49URXamG7nU2C[g(66S)L,R_hUpm%#,4jE%4]jXhi1X4l^hs_ea>YC]DpgE6^3-um<QVZhkfI#MQ*]:sLDkr3g:'7O(>CsJLaiKCSrJI5Votc%G;?2R6Z,U:m.ksoX:XXZr@*fm%go3F=PM=2kbsLSNYs69Dhg)87F3Kn4;QaZ>Gg#[,`K/[UUs+(HS/"YN4]U:N9C=1LH1f%FDlbLF:>.Pn0s8jW+`^U3=a8of5=Ef-%IE$?cg^Y:ng-0Rs\4(eN8#!Ve1SR5CgG8g)ESe_Do6r5QHU:?nopkCL3]g.+r7Q0JqI/O1VR'+Tb@Kf6V.S30l,h,nVR,h"C?&l.%flU8Ps6Q/7DV9,4^3F^prSlLP<k3=LrPt4c9kRIk[j^HCZKYtmOlslaZX.uaFuGoib/c?El)\piggYVBc_e&>[G/^pbahI@PtU;S%YJRBoFB6PD]V!UbZg"Q3l)&Wn?T=NMLXO\t`llQ&ZVjOmT&(c(dol@9iIn2,ACF]CdTN1k]LXrO<E6ckZErf.:i,Z<3icMs`@5EE%VON]WF(WnSjB*uoRr56X#%'7QQHR@H1KHb^l#\`PP-X>R<_HCdBkc7B%bBqYZfu:-7[BK;k:jY%0q6J62nn'`3\+Yfk9MZ5S'FWa%ZoF+bE<@mV1)YW5q-qN=&@4NqdMK8q\[>4\nsXo@nE*D[(Q4kdVaJR']3+F43\11dXGY`[an91K90-cd;Y%b57\?gs\2P2-3eu:V%p$@9pMNVc?\cF+te)dG;Tq)]?@CBIe*9cI.qQ,C(EBl!6LWD$hk9VQJnS=Q]\BuK]1g<As@FeaIF2"<&KC1k_X?"<opq1s4(HCR&%icM`qKC3>iRd$2$]CRQ/''Y^dHa`aC]/^h+q/i0'R;ko!Rc0Vq#EPU&d+s'e#s-e]/+7OtB'\iO4."_]:Q%^s0<@4DfulQ\7n_(4%(`Y+V6j]<jKNt)n:U(`@rj9bJcX$ae`ZEk*-hKE;Z7G*3V"5Z)CHGU,%\8"ZL\L^5pT-2i6"ENWPUB6"Gf!Kpg/,d_4P,G8\2TYs%</7XPKbD#YBIH,FE:FEbNJ8W<s0AAm8G<)#49kGLH14tu(QsI`_g%TY*rG??j][&'lC$aM=51eKXCoom88GKPA2e*-]B?KKb%=2G%AZ!b'0IPG#8YN-%g+UQZ/]l/EB"]];<ousinri_>-#K)\(#7t)>>ef#Ce8>jhQ(,pp$MC7/mblBTXM,Dm:*#l,"Le=9Y"<_$&1C^%4MgO,6R%/<Z%(N#rLiF).u>7Y[]heYC2o3tS>DgrG6sr8/:(JW4d=5/0P%PRArBZC!TGhr_;bkUk[)`U&?^:PA8q(S(RK3[*C<o[%0XO('DYA.Pk;hMH3qI@M@;%^\DR#Dr]]Km<Ss6^K'CO)VSBY9!F53@9IW<OARK%q%S+Bt:1[]?0B9kdj`bANGb4EqW'"aZS7V5>q%AQM"U_GVo+/[:UI=nn5'Re\?lDnb<bo?h9Y*3]6EOa?0`B'K#F\6DR7m@@7MPGKkn?B7I&]2]IWknfiep8Qu=)3;ti"sI7eh670f%_.9Mak6]@B&ej]\4]<8_@nP%[D%[MM`Or*'.?//r*Y)dr[Z`ZsRl%"%h+nR?JmQZEe7!O84cDuDLN))(g?u<%Q*oT;8PE&(G]J,)%_b<.]@L+BUokj"pQp&Kt@:!rMf2+2DhR1I0NbdUf26lIL.LLRP'8j\aFL/s>Br&,a`u:_L*VTh>U&3KuUZa#E[4u^YRVETYVAOAo%:YIiWXj.]`H/C^*Apce0VEDo#BD3BI5fjC(q!<i+V[#p>asBf/QLNs!3$&NagiuOgd6#Q7?uFjZ^?tfLJOhS?Ll$OKP2-r7O#(Qd%kH16#PJ7u5dtT)*37O!b6Y`'o_IYNLhhCS?[WU>P\DcL#AtO_mg#5-=-dE;1UR]56J%D6@nE=u<h%si7PS)eKY7*O*3er\XX>TBq%[[bWO.pV=hdS)9!QK.8.U^9;-mU,BpXfJn[PReS=:Vm5)mW&NRDbe3n0UB8!1s>EpbIuUUiL/.(C#"D7i/qCXZk@f![0=,bKi4Od%8U)uM\SpUe]]0H*TYo/O/mo&DYlD"OXcMfMYYmqVJ:*PB,$]M3FUc$&;sneVm5^LXq3B(PT@`Z4R;7e=:RU\4BbF?TT(=;*;t7q^%]%YZ57biiaTtN]h-T[;sPNLC<q%PWgJWl+8EsZ\8dE9F=mic[1(!eM>aqc;Hp&3<tTiLfC:#a62kBr=`<$eG0;"QqR&"]SpP)%C6%gTK#Y@\jr0WuMbf2GM3Ar)m_d&XioAU@Z)tA^bX&ZaUIkjN;DQ`h[t+]!I7A;TF]>U<aOu[].`rVNGnVe!^Fd<m+1)2R=hre$6/I%EFlBmk%iYma#qD1.HT6lUUAJE+/37X%G%S$$dcNqGhM'&K)o4`ast`TQ:jc.]76n5YOF09m,kfgm;63GOp/@G6W9!c`@O8-gQ]:@%W960JbfslO4%<q0nrFZ@7bHt5SHeiK`ol2(9O1nhNSNGn9G1t*<H%L9\nlP$'lRgL<<6PHrVW6mFt1I)?Bt!O^jN5BftfY#5%:t=%/%1o$m"o98o.9%]kMSF=^X'a_3ED,Bp,SL,8Y'5&1\U\cGgOG>.".OOol^,`XJp_>H1.-C8MqfL<'[o;NBQqV=aNjR>n_?C1W.SW%=_Z_CF$2s)._F921,iEK(5fZbnp#)Ke]R"/'QZE5B,6@b,c"/2$eoEO;;#_JB,7/8G,WRbFPhkl.1=Ld.W#ummPt[%CC[#R4$'Q0%fej#][nmj5f,R%_crITcVS0P'!32XI\Zu4KjoB_RZEY^2LE&ROUFY.P$d`Z!TJ*fG(808!5e:9IA)57"4-\(/M/5gEP`N35lejE<%b,=h\r5D&!CenSGlCiTcEboHFne"+$[hJ6H30[4:p&2isq-6_=>0<OdcKA7]F=<ak-/qpdCrc!.`Q'PfG^!u4EfI!n/[@="r`m4K%A)V#\f?_i03*bJ":_'E"H&oCV51e+rSC1m0qWY<R(>g(Rp09gpYE7EMTD)STk>V=QHUH&+Y+GeD'CEYbb@`KkqDeoeN.tNU\UN,S%<DN4.n0rW?nB&4ic9:F`lHjZ6f?_!AlM6\QT'N:bh(@Rg&;P?*S/Z"+`>1Gbcd5BbVu"Z'?TH<g+%5:7bXn<^rCGQ'`oJAgZWP5X%IWk6?oMiROA>OQj$[^Z[b4T"(B2dCr"[2UjIR\(a7R>@GY+Kbep?1tjG-7HC/J2nBG`V%a3S37pd^ahP$S#=Ll=/rQ)-"k[;uPqE%%#^bDV[c);;uM[PON`3WTCYsVP0:2q\UMi%qWUK26Ke2*#@%qc@L;5o3M5T7AoKDJY+P;PQX-cXXQTF_#19KLqCR(9T;U4J&*NI7%]ShPm*o@UUolF0n4_JiGSEo@N6p)3$46O/'G+(NVeSf33q)QdoZc[,@Y9Y`LY+N$]YM(W;T'PRPhQ36d\`gSQ$FR"F=J#IR^3P;e%XNoj1Hl/;JoipK>54>qerU(-DkPEGF']2kZl8$ZXPJ[H<:A$u&C`*J83M5Rq930dEC6"_&juq>B&hhe8Sq#?=j10V[qtancf?^uC%N)<j"\UMgrOSAAA(<OEnV<-4;I`=8*R<"mr:A#k%@nSf5cN%PA<'OFp]Z5*l*5]>[Ze0lmqDedAWSZ#+ch0(kb[e0:m0i)'k=L0+%h`Q?\,K7<clfZBm>khR=SE$StF$pOBT'PR@(uj1T`jpQDMP89eilpT^3R5\VZn73.l_cSfqG]\M5.8hKI^V_UiYu7I\UL[q>KXL*%&][iK/@0-T37lK%Ej3jKSGc\WVo_4C;[q;;4\0&f*DN+A/2o<6m47jYPDs@<?$3<_aZ9iCkJ2FCg7j.f"u;8(%NMO`SJS\BDfBtj%H?pcs1]]H;WkQn3b4JZ5Orp_r`SiLpg%GUDj5Z]J4Ia'si\kg-,uP$?WN)*HoD1-PI#b95ck-uEGccE!@_6"CaEHu!'A;'QI#)%:%^\^^8r"Wke?X$Z&4M&Ti@_[?8<%]q1bjiM`NB-F@IfRI53moBsFi%dYl\"m_F#3Z?B5X,WLUhihSM57l[islgH4sms)CoIElg+L2%;nM,2bSu&H_7Z=l/r%8P3BeEGpU>nk[Wag'eC(&<7VWqYK$,l\G&I),>O>JaXEp=\hnOSbr!7,A#Og!jdbC<ZnGK;,\Gl:E>Zo1e%:ID1RB(/(,XIhAamRoX28h+4V&fh7UDkp$>g07mr^()o6;@BXupPB$@p@QN+6Lmc>,>9LK%Vuk$"PjZOni;<TJdnuj!YAl4_n>BL%L53[qXb\XocrM<;+5,U3p)1,S<+*Z=jrmY`47/&/?]trC>RedDE^/[,DYj!^M2SbAjs47ejkEao*:h.gc_TdS.@J37ZYj0X:fm7t%lC+Tp5'f8Kf)t!&;^&@[hmgYlg>$m$YZ=B:"4?W;5$gA\6nVM81%"ZKDsRY9npDr!4h7a#2Lec$V=gIfbgYW(]QGiYEc[5r/@+$L%G!4,[X(qOda+5Du*+)MnF!k\sIPkN.+!3N<G5FYNH7&X)&gL3DCROUX@7%4Yq2%Em,_,]S2W9L-QlalT^@;lQT+Um32RJ0&nXN!n%iE22B!%BTS2nsht9K[=1jLbBN;?#eImKKE%3$TZ:980bmqA/.8,J"ie[GigLJT<;CgsU([Ku]ZGjdCb2FouiiO1]MnN)af/6AG_+%9Y@[CWEmt?Xq[T(Fgk?&E9eVNoT!h+<;%;_H<.r=bNN^C2_J8(PM`tY^sDV#XmR*)&`K/q`?LeE@nQuNIR-hu#&/CR#(^k#?$h#9%8'c4?9YBldL/bcV4"#LV`5bZV^3Ou")T]\)Z\irO!$Kj(iXa'J=l'i@De\R)jPs8i?Jeo3Ie5O9`1=4'V%]8==eKebTf63klW'@$%O#)[7HqR\oVtZ0tX\k4\UrMn4qBD-+M#/.>Fm5PF+&*'D\n;cG]ga$>'FdgU;"`as$[6?d14)16"h!T;4aT'3[ZEmS+DRn]5B#O:%gGeO<[W-[+L2Tj=eTp27="]h"i;1N)NB0kL_mbpsWfXjdqi]I=74*!KGorBFrdJ=@Dm((g2.6DGcH4^d[s7:p0?Cg2pmP:m594`^%-U0o-/`5A0OXkf&c)8%IfC4.W1F\n13pG2%c;g&A-QOu4dKXE(eFf_.G;/RWI7sh!PaQ+\b-2V(56Tm/XR`L4C#r`S^4c3>^P"%P%''!291S!2ph/9?bLi4ZW%+UOLr-E4E@LaoN"SC8<1/bj"YNCo6R8q]=DP"RRS`2W0?Wf=6VGM)][+p$@-TI+@iuu<O&;k]+Jaho6%8=#a//3.@Q$F4dB3Y61QEe1@L`A>ZbN7GoOEej$G:f.IM-6FFtq!+_mS:SbG$e9`'c92SeaoW2+'SE$cZ,3$]%1Igd6"q4!V'S`H%S[<e.a0=\8DIYp#!\tWT*Yl^Dft7RVcCKT4qgKN[hQ1lW)^3?ZaKb<0Q"u`D]0/;4ofh6B!@Xoj&Zn)Sp*("JOK/`27o:J8;3/Z(%*5s/5e8;Vgp76+>V!9\P,T92:RlFlbn]+Z;5=t(/O#+*<G.OZ]0ME/(l1bEr9!@2>B2jHq\I%u_=.utK'A;Z:aC5>L\uU1E.-3'>%VtP\>#)"nBk&ptq9s<U/ZF^ie]adDIhbN(T^a:Xre<VAKW4Q<E`J_#C]_`gJ5JKGl(8H:F*/lCa1jb<oN`\tWH5OZhih85Zl2eX`%Hkb8t:S<A&!XW,A3nONbWU]g^+tBm]NITTO(7FCZWt!\6aLAY]aIf>[=G)dE)5?^DIF\/kn-JY@[^s4r&D7G0mm.Zn]6sVGDO[kd%N9K]I(%lpAggI\C]hlA4gWf?UiA7(+<Ca.P!eA)tZ[*5FfD3Yu(Z$'1!GHcq*c)RZ_hK"r!_P`*#n.bE/M,W(W)Y(E1*DVGR%r%,%%L=$dH>pQ^in&CA"#,]!LXVJ6:>V\qP<l<4[@Xb4pU.`jj4=CW0g%GP6,EW7\)n8V_c'lO+I.A27D!"Abjgm`:m/ch4st4G.lpVn%1ah^DF;FU_Vl.jpU6bF6Cn0m#,7cJMCl`onmhNCedosSRSj!sJ]$bZ+X:E;S^YXF=o(gb*,M@(6cr9,>Yb^J6o\AP\bu'2)VdN'/%?,o1eKcRUB]Q,[o%mu5,1#FJ&!/SXkN=n!)FrOZ2_a9s63%i252n,g&.PKQ3gYM`e;G;XTL8VIP>Blq1$a5PMJAp!-LIUk#jXNT2%-OqW])u#f_$d@lRT5S'eLBZqqF<N*2M]4lkRk\5[S,5;17*`Wt2^LfPKa!KF*SHI]a@]pS?$ST#PHk[d.43cKPhfp]^FtlB6IoLK%.>oRXcTHj@GP4XF1j$A<$Hb^K/?Dq#7`rjELX0]>nL+RPO#VE8@aV\7,E2l0G-G+XhJ]mOVOmD`*W"4U!/Y:g\_Wc--sppRo9@BS%gO-6ESD]@M6$M`;`S6BM]IsQ-B<C9`D*/.FIXSPA!kMWoY-p^d2n)8'>cea>b%jo3`hGt(3Fpu^>I_`0HgqKM]#GVr0mG1p^77LB%nA6Zn45,*Po_+uH9Ef."KVsa$B+-kKbL&,C1Ur!G"@E]#6#AeM#,&B-qOILC[7e<"cDZ\H[[PpoRrh-'ZBUk_5)7FN@OjC(qohoW%E9*]+Fn>U63oeM?g69nmW#\joV6"u`3mV8qYo$7)EM]e8*"'2$k`2&\<,bm"IG00D)t+c!Re'.;,66rl%VU9,jeI1l\$Y\c4.)/u%[h6an".DqBQLgbOc)F`@9aMLaroaphS$geG(=B)QOi*hj*LC2"DA3@N9KL]J)O8R[%u*Q4X*"MU(ktQ$$QC"-&J<#(N4t>CCo)A`%nu<OrqG3^W]dq,#*f@@Ofi^$fFeTkJ4I9N)>_(LOmDqmS2Kb`,4$&"'/GmGT:i+n62kEEU:'UYSo$3GQ5a2q=1OL;#k#q?R*2'e(%'#!AlGkVOcj>ict4?OTQ"4=p=#5[=tbq:+&HoHW[UmhjW>TWE*p"F?UHe7<VErE-<^#/^D^[9or>X%5P\%b8+K;[d=rb<'Lg#(Hr%A*RgU&#kkr$cP>_rMZtsfB!_t'3HcX`O<9?"F0Z*qu,gL6**MUX80)_S`BWj8Q[LV?]6VZlI76OZ;G(7_-Uh8gjNERCGK.oH+%?l%8[N<<"ltTiqta\Xb83e\BR$lGgfukj>%qqo#W5opAgpNA!a=pF#2MdHhD::qk9[PbL.lhDbqPnjYAe[!s!!aAM)PmL0Bc#C!r4i4%04_4gg[k[D\">m#V:anaYkYreCWo1g:ic[a%jYL3O6(7oRq:&.->l8PNCV&lQ++IACD#RBe3(7_ea2hfI^Uf8$f@Z)"W0%4G5ip3%c^,-Qm?(N9YQ];'$Dk2>IM``uq(Cppkr$1Xkj=Yh^7_(SHeAdKhQB7ePP'H+e)tO,oY1'sccp,Wp1J*NA]+8NF6i\!8G#>H`V.pj%;R74rgfWA=7"5E]-q99F?[`,:[Y?1mYNRHHGd@qjCo+UINBVH=Y#k$g=1[5n]@^LMEBMq1e7u3@,%b_hrS++'"0jbu%[>k6B:nC=%pGgeAODV_)LB]C_gIThR>D$d^Mi;fhI@?ahAX:-oa2i:cP8pW7Fg<RBDV%LXYstPN@Ue02=<gkp@Ue02*'OIcWO)BdOF=s[U9o06%`>2<SX9^Cn(EQ+1968@:"qjD((,hK-aUYYEjiCVea3<6UBM.m>PlV0pd=SGn[L[Yb=GS[c^Qe0o&#]6eJD&7-02BL7?6jNXO7on!%V+5P'P-64i:A<YL#M\A!9B.SNBtUU6-M?u:rV1?E<d6^fY/JP!+t%!R/mH;]_q"&Gj<GHm`.[)$fL),C/IEDK1PDfjZ9<DZ%7bf)%/>jC1#$+7U8Ghp5IslZ&gm0_5DeORW1\F\[4>,7O)mSsDCZUc,?.T1prX7kGJqh'\Ka7=ect]bGf@E3Npj'kC!+i_9qJ;uuO``CB%3\`[\pE6(1kT*`^`HLZ7T"hN,gP=[Q??I(de>PdZW]g00$S%1.jLHr-FmbheH^^\;]_C?So_.#$"_Y*.1aU=ZF@#DBP/GpZMZ2NB%)>[oV4(3=.\l;<B^o,J#VV0:!pR'<UIOf+JAgd2.)1e\sqZ&0!nS0[\Hob42g?tf*ki`a+kN#`lS1*bg;V@E.P71,*aaJ\;:$r^'%U0'Q)(Nsu1`]Gl,</tDH\N8T.O8"\*e\k/jVOQ<jprS?FomS>o>&>RR^G<RJ.0)i8jJ7XoS#]lYQUN&.MT*I,7dml%95TW8_3q1O%s5!K^`gMh3q^r>$DD"JI_4%\dL;o9+WKU>/IUfFfQ0r<AS&/YC9^:A&CSg2lV6]t-EeXOuC,eb5]:N>*L!gJaoYSj,]]NaEH-KfI%2jbu6EX[fViAKfVP'>GY5,29'Ym#Br6Z_o_k$`MZfk,aibOCt,iHcR:0YG%./mQnP0V63D*?C'9F)gEl3t4S!6i2F*7h>dM>3c`L%DICiX$dC,V>c_b:F71XkIX=l6J[Dg#:J^sf?%9S]an`E-ld&>,K6_sghKCE'c50`oT>IpiA@BGl'CT-3ftVGMUDE6$\t?j>iNaI#%>=OQf6hu=T\fqs__9VHAT@Tq'n;ki3nHrf6n1T!u_0U5^-2sVLf%,:+q8Zl6KrXb?a*NB3GeGK['9bi.X@uMuD&'*K:/Chp)!;j3%@QX&np,^.VoL@.uCa\[BkWG5JT)h='Q.LT,DFigIBBhqV.,02]*lII&];Ouf/"6B%-b,QlqRt(skPY"tf;hClM0u(4J(mic+X0ZX%RSc3m\)kT_G@qS6/DmFVGo1&P)q5N57tKJ4-"X=[_g'P&EU<_UN`T6os),l@DYF>7ElXA]7h<^Km<I(HSlU+Pl$1YD3;3Aea3V!0%[m7utDC7O2r6:6LSP;5[J$\/uBs>l'0<=g,]nkf1dr1HX*+>)RA7mTM@e.Bqgk)b]Q.UZ%CVMZpC6fRU^.ao2#VDC`]Mg*#H/H:b%[hQfkBukcN1[334SMl[P`Tr8OTh2DhrZij=U]MO$]5KuV'pHZ5O%p'gJ)h)^/KiXH]+82t5.r\@dS'H760AX\qdhq<(X5tL#>\M<%=0r;\s"Hb1iFnsU=PMcNh*MIt_*`&#on,Oo#g:ib5F^^P;XA`V_S(mH#s$o5m]JEY+<fDbDcnumT#nRSJ%&Q.CdARe`^FZa,95Ea%lKAF@CHWR;R7rD(G5"lt]D"`QVRJWGVhjQZe=jV!JZGRWmK<E4RHF,P$P-%uW;I&]eh3T:M/5K^n6of2<f6PbMG4.U(4AFb4fp6p%.X[:9<]+^cbh(eL$46EOm1a.T6?"=AV@Z%LCICF8^,7*r$qZiiV9tQ#JnI4Q-;S8($1<eNrC0PV*f.W#?\Ca$$0lkM"qkH:l4*pB%)@<&gZqK22Yf@fFjPa#C+/pNa^;O'dDOgMf[ZXJ^0JX<>cG!j6E"c8JK]^sE*?T)oq5U$HD.4cEa.01qDR?O_6Ntt3$859\g%Ea<%4@!,@7`5LQE[A!s%YQ"U;)qtuA;;B'@>to>XpU7OYsiWif.u6'79\!W<&8M?dDr-FPFaG@NG`e@3j+,C8B0#8<Tpu64p_nNo;0/.%YItOrF/;b8V:^\H(?R)'6##3qHeIkZ;Sa\sK[->0dduQ_9GOkp9#[Fh?A6Cc%]$HLi)GI<Bme$%932SqnG/Xf<*3Wo7_C@PfGY:"%a)^$]bb8%qfd38Ya23!^k*=91)NSS@Jir1D`/"#LnI,i#j0>h[a6%,k`a^>ZpWR,U4!+!FK<-GIOF;\>ddr/t"ZL`biiqYuq:$;8%JJ+Fj?d=L\ECQOt2`C>6Bu:NB,<PP;VA3Ha&6rBBo?YLrjH@5&<'RE\j.98C\1$p(lQM>!##Ymucb`P)[hIQ/UIBB0U,JQkK.-]8%9Mf3-!\;7fMUUEYqBs?.Mf)Vf%=*H$I%'8<@:aA?o=hjrao/]]"dHSG7mu3rUE*p@+!XP6LZ?$</73\S1jOQfj_,*lZ@hnZ`#t8]%;`!$]=Y"D'UMWOj2PjO]E1d*]?:<U]$=eFiSYa%GZnS[nHA=h7FgMgmfcI.T$M@u]*SdaVg=:=RXcs_.eg&-nRWr>Ch1g<3XbKOH%%4Tt9[-Nr^^D1fP&_k\!Ai0NLA2bP;CK\FK[]Z(g2en*\+2M+N6<_PEgQ*jInl<qYOZKW5mE1G1LQp*fk)8%Xjjb>,@\782s3Fg-%G2`#ce-Q&*3)"9na,Dt(m\l;>UVcQpW_c)JJ*EQ@9tUVaEMgeshD[cC>9THpFWF)ZdGj'u-l0kq\a:eLW<LH8?AJ3G48jIqHU?"r%bU>R@7=2t=p(7e:l\CAf62#>7`s*s$"c2R_fZ$F7=#%?6m3=\Y!_$igA6T/Ado#=[A<fJEOZelL`ij;u(%B%V0&4+co(ehMJI>g3%O%K0q-Irs#U[/5DSbR$O&WH@Qc*EVoPDK+7Ue1JdG)%SdSn=[6^)V&MDFBm4#r\Ss#8Gaf/CSk(LXTq\7Q3NK;nF*n%N=HQ'T60R%YuJ?EVsO7U6dRr,*_*?q;7,0daa,&)8iDY$S011rE9@AZj`MY(Gs%)/]C?Ha*r/9,X0o'`4m_g:pZJ4,%V2&8-G>,E`'qi!WZV,:%7rW3,EhYIXEJ0>p4/6N%T]pV:b?ksU8k0,;/*PmHl>W-FD3X`<=4a:^;!X6h]Ba@>Okj8-,9*1_0aCjjhme-q;dF.7,%d^KC3;n5%XGH[J=[b!-FSh)u)e>)5=_X%5TiKNqICAgYpRoZ9_e;*`fVXES3UV?L=e+NM*:qH^(<?KM52hLWqpEp/Id:&dUs=g^36G2B-Fdi<%50PpFcZ1.:$L.:9FNJD7\u],OI6(Ik=":bkg*gBlSl*Bb^\q#c5s"NZ6`SR]VLW<-PXFQWY&M:`W<X)@G!J&U[(nT/#)n9[b(G%P%gY)k,SM9_!RSK/UkP4u;:5(^^?;#9VG8Ed>G4)lYPpT;]A;;A;Gu-Jq1'4>ha!hT8fYU?2DK<5j"]?mY:@>HJ_<;Ga<.ZVDVn\cd%SuAY]=4pVO#TKRN'TLJo\1FBGM+uNO4>7'UT=/I"q3GSi13L].$EqHde6GHrQ2E)B\Z@>Q%_M9S'l.5-C[*F*`!hPP78Car*kG9c%j`i(@HO(OC,C7,.XBn!u[JfpKGtYRQ;mlbf$4i8>`,[@^rUT=dQ#4%KT1PrrI9(B)F_s@'LC$Ib>[LaPYo9@cH['IY>Ff+/M=LD1%<-`b*I*)9Yh1)W&*a-MhRqm7a4pKSlK.Z)O[bAu%T>@YemnKEJIA(J<X.7b=qQI<(TfsJSD89f@$X3's.qGCmo=A@[^@Ir=?c-R:%U-rY2/d^5!kQ(4tgKj\#hQ@PcCc-KC;`@8'R]c0=D(0TY`R3gF*qr/7_qX\kg#];]+tN,UI[mO;2G/j--thQR=[XPJdaL2$+,ih?%V83Wamdn=KmJVjP7GU+t`=*97[QnhZKIRP.ZYq-upq<.&3C;hap5<pSMP"1WbjU?mH0=]+<KInoqm6Sm0/?)TH]T6?"&SQ4?cWYS%D?$JNrjE3m"!Uus`$_\uaPKb6<T^Obai\rt]fht.)rL\iFI9bFFQlXRSHOYqdY5-iZLd:F-,6`W2UPB'6cpN7l,g6n9\Lbt#5IG?%=P[ChO1\!AmNu06Gg169c7oUNf@ZChVFG\i;&%MS]<tYOZr_<D2?jk`7!4AljaE&4&&#7oV3bp5CVUE1FJhZ@A(S&SDXm=12d=M`%XDdk,\!bu.dX&3\OQ\N)lTi7@lUXL$%%6Z]lc)1JW]49fm+N^,AoMIkP%;IcY0e^s'bq*B>Lm4AMbfDDPNAPdPOpqfC\+nG9nRe'%k_B'3K22Ca7T5`?9P?jgmJ<1Jf]1RZbD5/KpR`JdFrX.6Q#OBL6f>/88e'Qu<aL$@f2P@1ipDN)@mi+9D(9rkE*&Y3b2i%T4`-GM%/;dZkQ.X1P=UFTni^(n83JDeIpX*;V5Z/oU`+`5]n>*Go$Hh*(gN`,6h5&+%UfJ3Q`H5,LebJ<SC7dLKH]FSq=@AYK"g-jGGARQI%@<]2>ZLY/Xj<_<IhBQE]Arb5X(*tGi/7CB37NQr3?0`;-Bi)DYmq8$^P<a_US>?O^;NRuO&k%uJFOb4(.n5^LPLYj/'UmCaNk(+G%W6&]S:'U\MTMh(Tp,?_mO=fMVL2fj`BlK+=<N2*!65$0i[r\R)jM%)qoLU$jZjYs"D4&i1[])k4qR?P<[?KZg<>rOUSgr_UX#)l1%P`^tra#XXn8ZX1l&X@uC9s[^*qb2m%m8NI'+NLN,d,^:"%_q=TXQKTX$I6MtlO"3`Z=K1WZnG79ah(9<K<0>M0o)ND(q3tUJ?0&g%P\lW\Vi:8]T9hLkRo4-C02<96[E]4S%dJt%p3/$c(kmfeA$<dDM]!>m-FI9_f1bRKWt"&7l8?*OfX,7cN$4n0*5.*FO%j=Hb7lbK%"Qo/WH"U_$1LUf'7[M)..;!6qn6BF794JN9;^,HEo(gNqc>jl37E(4S?#-[8Q>JVoaZj>u/Rg_k=Sp0\V&$saOQgI^`-//tm(<:-%O>+Z`RdX"pr;'0o_S(o"H*U^+>:H02E\HJ20#(^fQAsa.>m7__W)XRlRiL2Xff1;t_&9;`Am1nO#J.1P2#?&_dWj5+j.d0*OZN>I%/8j)CTcZG+Me@0:n#nhu:T`J)fDA2bLSt'b(4M,E]YA4\^<-De*:GPq_bMJ@9U<r#)3#tq/'?FVnc_a"PG-l3_mtaR4Ggk`;_)bR%NSI=m7Dlk$bAmIVJsu!A7dXcY0<BA<eF<pXaY(B01I`JQ-477<pK%,_+Q%%q6#UJ-XBo]`^KSB?HA#^>G5Q)?GB$hg&Ik52!A`g-%!Q>7;iq6<!^.&1\*L3;Jc#X<ANfe2-6"41@U;<#/?1:.Emo5@,RZ"V<q[VgD#?B\mU^>o#iQfIfW%&$L<%uW!TD^o:J+?d<Y!s_C%oGQV)(s&3#e<;g=KG`O5)Sgo':Nd=&di3/Pol%t<]!]3A^,,r6HJP%6qsqo&oIR_XF_`0QPlm28Y\p!A#1f:.,Eoa+S<0ckht#CS%]t,6<Q$s++UN="n1$W@D-bJoi#?3D!NhG9*LJrQ)dXJInY?Y0[16rhR#s'DqNVJ)PpAf<q-`af`_RdugFV?F6S2TocN@Bf!mA4#K%eF[c"&$nk#>4qA+g&<n4jaV,HF4NT,([GmY5BEX@OLTj\6df570u.$kZ55_X=fZXDWORQjPlc"dDXg+WJ3n@gLRsuoSI9$?MU_4t%F>']jE55)/>qd34'R"%e-FkG6?q;*746Z[o"XQ$mB.43\(&"^/C*bP202!.DGPt?upaqi7\b)@<GHZ&Lj583g1mt/s$X/+p4.]Mp%+^ss(6V/=/E;+0/,i`t#Gg+>dh7^OqjqQb*\JsPrjYWlchXc'd__XfV_6IHq_q94KAX"DtSD:eu*oB*J?6)k!!V,Z!"D.q_lQHoJ%;s=F^,u!t+Ali<E#!!,[i4dE)6^KP#<0TKaXfWmG!P(QU"l#qSIoBC5jGqTuJU7KuJeBF+<?qR[hA:CGdSo9B!T_%`?/#V=W68E!%7^ANLnUfIaH8h1,)gPRZnmED:F.J)WR]UF;[)E!1D5:<(Wg0r5gIND(o2d22Vt"OJbl2-j$'RLo:J$ppN)\32p>9%MncbrB<<'ge%dK1%N#;d4t&o=8"jWla\_bAXZ,n0Boe(RkLN(JfX`@^hBD"D$Bf8,l^TT>o>\tBnP$:p["X^['1K4"b1MOCMIFPYZ/+3)=.S%ELc%PCfRcolk%'UN5p4'f/$H(Q@X]>`tKE"ojkrVHl.'j>gL"qNP%t0dF^e:A7sP1k1="3&J%/A3<%*$RYdEj_t!(FO&Ve#N0<F(u]*k%5E#eG5W&5GE,(@kKu_Pb(_O7V:.P#f`#;]mMO_,"D5Ls[rH9UdC<*#!lA65eAfkTCJjFfqX+4C0X.n$a?eOQT,6B6Zq)aOAg>:e'%#9+C%E1lX2j*3Y00.MB-4C,m=o&PSr@PienhgJ_<N:l%(bBD(e]Pj!1Yf(Vb*0iDg"j:r0j<bV1b@>t#Y#i)k+h$(P/`R4B`Sp'V%n1%MQ\_XsgX<CVQl9)f,*F)?&j2-/<ikd/SKjpHHYXF`\f>MM=$5Q/[i6\peAt+,P1e%\W$XJujlNu^5n"EL[R6JIW$BH.\a+2/\%P.(LEMa=8c2?ro(iKEm5VRiEg])g6+;`]MWj*><<kXNM%EImF5LTu:j`Wt?$'udh;dZieD+O<uUH?l(q6Ak6KgHr<Sj7`YpN2?:#%Hm7>&&MpAF468%;JB5T:7bq))YDO3C-]5m^N"X]N.:thKg4fDB`6@WHTm6(.6!Ci>q`2Fc=3H-@qgXt"r?\u\;uU,RZPW335.lU&%AhZJ%-]GYkqgUhc>du6j,RmIR]Uk;=q7DU,e[di_jO?f[NVsjO>Y?BZ>SX_60&H'G;b,5__Kk#iWB)0$EgK4@DIN.B>QqJ-qLmb<%aen%]b8i4Jp/.APRur-Z[TNe*BJ[Pu;'8j:)/I)V3DnM\/m67+N;_b)>$r'H4&Zh7N>m(5/Qb!;!$htE/_C?2-#D$TB1S%>7QE!@%OeaRHl&g^K3iH(9>BgRr.+W/Zdlje9f($-)RDWOU:3pfW"Ug++r4hs>HnUL#=83*u*L[*DQL:L6g'M!4bn`i:84X#%fKp>rK]S\M%rjgAS8ToBY.N>D"X-n%lbfju\Zu!pob*F>VQF(iOVPaUQf;Kec(t'D<`Eh0lm`(!Z"m?,3N9g6)O&`!lbFo^8:ePZ<.scnfPu[nZ%rB&"IaRTAIQ4H_<\_#)tOm/M:_Y9=bi>]e95c"4d64Zki@sm";M#MY&b$&N+F1C$&Jo7\IX5B4qqiQ*irDf*X]6\!Ad@2YXn5:e4%a?XRUq:i&WnM3&lO$>D`d1n<oeX:EsCCMed?`h(\?1FAOS&B1c8nuZt@F%]6^"$`.kkEf`H6Qi4:+ZRI?%BZYn?ul!h6*'/CK)sJ%h.ua0fAPtmEqe:$W,m9LCZHG8j,4*I&Naq%1)9EU4['_QJVnGtb0\<:9f4'<YkJ11aZDJYO!Bm3g.Y-XIZ<t(QEgO+>3"(NB]V:6%pX.:Ni`e5Kq61;u,JeLbi&\UZ82qCj7la"qaY8dT;LL&n1@?R(h<7&r6WkG0elV3nZM3*3n%j%L+3NkF[?1^%W8XEdpRO6klVQs6%p[ViMUI-%cigD0i5-l#IGa"3ed$gQlON-M\$qNNg6BhtH9&+@:7XC-o&AdLDO%bcleM*'PXrfKCHi#(0$>Z_^f`;;^Y_eCK5s^90%^)59eR^#p+m50l9f]<\6RV@urG<;0h0D8RoS+h&F-"IedL"A$Y.HUYU/1eV%O574kG;JHk1lF*to)$ZXpKRMB"\%]4Zrhe/EnB#B%9TH<[kCGA$Hu"-aR=-a>`KSEH6lHh0oC2_>amR`ui1q5;-hm1BZE"4o)6:WiU`%B4@XhS.)Q!bSJ%b&IR[M7l.eG48[%6H:V4#h'%dH%-ZXd`I-Ad9C\YIS;d>Dp#&IIoF'G/&H?`Xb]uVHuke1[DYo/1aa,Br3f:]pE("<Z:tK2BtV,m#7+fmmD$,i@2f+E>[WP5%2c=%Q'K?plO7u&c59_nOpeLQR9B!tpb^,F@g"d8aN6<DMQ,@G_JA^L6fU&jl5O(PKO4!Aoo,0fE&kJ4kLh/+NIG(`Gg1E,C0jj)s*8bo%?Lt,G\e8=J)_(N?$$]2Aj)M8`Qr4Dm1kGD@CY&G%'<f7LQUa2jZ*feW21&ZqXbYN\^Z#lXN3L,.<ffTT8ae==b6g#AUYGQ!4.'c0%$^8gq6P-:]=D2>kUu>W;Fa_A9>=[i'a@\5pZWlime&A$T>;3@B!!@r"dda#l+-]:"[5D+Dg7G$KX2?Mf>@e&Z?.jRHRBh!DrG=F3%FrMNLZ1RRbWt7'5m(b0TFakQH9%\^$>#J->AkL^,CEoZBbhV&%rRc[<nLhBYPG`_]e$Zl$Z3,a!pNR6"%+FHOmD,p<O]1u`HL&Cu%\N%(ln8%Bl*N#_G1Z\==GQ)#4E35`D1SsKSWLo@$'&4VsC%p@j\7r7n\DIeY.G_c;75JkN/e<JKDr1Q(=F%#:&_Qtc(jWa'#jdFB%dDPk+,VP,G865PiU%90`jpWoY'#/h=eCknG5s'Q2OfTVd2.h?*BC>N_EJ83UNSIDHS$Bo:dc830A2>mMB/;Z>I(;dK\$p@<CaSnb%3rAif2`<J$[D&5B1T>InL<[N(-SoRN/>f3*]5nhM&UhJr<mg;E`bQUo4Napsghh1PCh@DqDdnHf-Y1R/f[6a:[GRBrqTXiip.p?i%i,AY<7^@?-c1%p/^MqU^4ZiB-T6;S&j662g@Pasj`4?@5^@2=d8@3oIM+<U+$n]iOmdLST:.HVnAo/,><Uu1+8MT*a1kRZMbnlVo%iALrnf8D'g3Butojn@pG7^E-/P0Cs_>kj$*S#6F;W:?9-D!;PZe%<`-2W($:_/6pX6f[@E2^X\uI]jZ<WE*Ri/$\DPDK>T:iO.SD%oVG5.erokB=k[22es3tfAXK!1VU;leKN`MooHeLkPRWubX[f_odOs8XZu\:Bb]X#TppE<KY-i1rAXhY-(]D+AI+U?pDl`bb6(''\%ZIid]YQ'+`c,Pek]A#'pB"g+)RI^hrREdLV`HRO'In0,*[X*$@?n@)7N!q?@*g2W)e1*0-d;;A<(j?WWW8+#n)9uZ3&`k)sQL>Gs%3%a&kj!Z!,4KgX1Xcqj2D@?qdD$A8aD\F7?^=kG.e?7qs8bX45q<Q:8Pjr`%P5VgZ\OK][.Xk3^]l%TGXJ8cYW6DqA88f1<H&"ZR%J*e=ipiPI0JtuL[mgpfSY7T>l;F@rnp[AZd0s4:Sd"8cg6/=GZ(0MbfE\`$!YFg&9P><:X<:^Sc]g>O]UR5&4a+J&PXfih1m#qDa%NJWO;&H(MKk9<F>"Tm7^+k/umH&&%Rok:7KciQpRfZQb5@_O[<cn-?s+p2cEU&eWh+^^AZJ8#!7I"'q#ICqQHUe]K,5<\4<R#)]$%1@h_F40.3F%nMuN:^mr'r_aXDG]@.0A>]&O=h^J:QE0]-=hKFAA<.YM9(Ntre%tF7flKr9+hE5ujYiRlj3YKm$*+Qd;`*G&o:,K(%lWB]X`O$P&XNoD$HhP[u2[MG!`>^HDe&irkk^"Oh,^2h`d=@qXGg7-71;hHGZS/*qW[@856K*[dQh"3R4^:+C0d=l)g9ZG$Y7gu,%oVcU`eXYIpC8MaZ@0oCEo&Y6:"&d+RVhad[jnL<G%ZkY\\!K@7q(^&<P)MN?YFDn;^poReE]Ui7C<m#dA56dalQutrUO;]kNX]o&%Od"%T[hXW9IkV4hNOaQr1\opu.2BKZ(`n"Npp"N*S#MC3IXU_\,:BPLN-o9CEVQHpf*B[RQnq/jKLP+\0g7_85eu`tM;9JCnsoLp%k=dnJ2<@LTF/_\!oZB7]1W<Xh+sG:#no]>+#rSFo/]M^g3E,!oTSqjh,$Afe0;tBio6?aQlN-F_Rt%'#.JoTYTdH$%2eP`YWm]24%O#*i:PgPX8;3`oaNk82Se9g7GZO^'83K[=,$9;&3'n1m\k*rDj2Qs5aXX^$\?k.JQQ_h_%nXM'#iLD?\?CI-eEA#>o9EB#kgsL-T%(iuQJ-YoY,/Yi-sbNDQU6-afP)MBA[mGFHj"U(6MXooW6_/Oojo[mN>&'4eT)3N1>$:3gbeH*27S12,X1:`o(B=GP^12")IjDW9"%nlLX@$fF;+S6d.>7YC7a^c`#[I:kAb+io',SV][sk7ZXg7N*PLod4Zcs(]khgjORIeA,krq'FbJD0iYOD]#*]@>2fa/=4W%<BrIk%U0h8u:6Xh]n@Z4aq>5ToI2.@X,;CBYK$<2'm4]:-@:l-9*J"/1G*mp'ka#;m%W`1mSauE35g0_e^mHY,*>E73]72qG/h>E2:,Dp*%ZSL>;P8^![,)rS(:+e%1E#nS&_)UC(F.4q6?8a;ID0RaI#8*KSHr_Rd)X@XW+>,P+r.Xm[;bK1Kd/=E^ON%OF>gaGD"(j0bpL$G6%j["sb4GTo+\`c57Qn<-_BBF4u1MLDQb\sA5rZ^MGE\]Bk%`HGhhB`UZ#-`sbbd*Z/AE9:+pQR:jJ,Wu+/"(PRA_BbkD;e.P(;%&!%^TF-SP*=^U\#>fjU#[taf/el+$+dgo1!YoD>Vtj_d_h:7(?eSeh_5]P-EV-YI;Gj=NslfU0aRWWa;S.E]sTj=YiXa</jfC5c/7:(%gOG`]-aE;qK![mP=(1?A0[<?p9CM>ChA)jD6WjS,%eY8B7@df&\4[.2j8l&1GhUr\gpOCO4,aE:G%hi4NjZqN_lR;QLFHU2NG&&h%SWfGUknP3\>1k=Dl<I\.`aI/GOssV::*TfTX)i[q4[PIiDd-/fh^I?+\Wh$O\-`u?RR50+</)90au>Wa$U)'O:\cpGS/g@&4BDUs%\Xs(lnkD](7CTqlnEPD)+q:n*)3JP01[GoWnGd"XNV=8N:[@Z%,knYa]/W>:N]G<#ZhomH(!Sk`"tnl-c*pu;2nm"^f&%59C;:a+%>^ZVgC7GGGB,#^]+98e#p/.aQ:ugfNheT1\nG2j.faFY1aFHX;b@nZn%5lE`P[mhJMCt,W)h%1dc<]1AW,_'AVgZ%r5()fGo=fEX%mCuoQ1)O&[kUgG+6-_]F6uP(q9J(B+XZ4^40$P>r5U@&VH&EW*5A"P3VCZR4e^(S'-S.Kd3RO<"!IP]Dic&SICOKN6SS"Y`1XTDq%*9NAODuVg;B&mF:*9Q:thhT*CoYFr_9H48Mm+P7U@AYqcADF9nmI:fQ%'mSklMBaCcQ#DsMLKKeoW._+3nlIN0PfP7e?`e5%eG#;%a2[h1?k@Y,2ps[qD4uKcOKo+$b.%"1LsN=*B(F"420,)%MtJF(R<ugnL:?"Zi&cT4I&D8gg?'9J1=u=G=Y3EQ2d(8mK@OmOD8&+b%>ij(BF#Mn\?OKnHo0mFj[0i)=Z'X>p<1^0LBCehL]paP[]JWkR6=*taK!l=Q"c7'roS7.!G???Es5m!`=4Uk4W?h?.LW(e0UJFQ"%e!!CE7\Zj6H%1[RF1Y(McP`5L\O]aj6C&>re%fB!-S:%')$0Ue.11)NGIp1'QRhAj'`AnuqoUJcrbl_1Z+RsQ)qn`Ue\-f$[r4?%%GAP9.LB5EnWb452i&$=7R)[_'3BTT/#A9"SnWY@)ClD6"nNeLO@smXl<R)),N20rTrjKO+%p+N&+&;g$q[=lW$C_H:1WS+ZmI[)_%AJU[dEi)qj163f4qfcX`WnJXQJ?2H3Q+d.2M[X[p58"e$!TnFj2[_CbqK6P.=oE9q\"<3*JV^Ql]PP^e[_;`+UKLt=;h66=/a#?6%b[o+^]@KVUJSZ"Kr%Z('jXuB['l!'C-A6RC80#gF8%G39e59Vj#?0*q<</;TX)qU>BsV)jg/-rrh7roKX7832aK14!BttE0&<JD#%/,#0`.a/'JrCl[GKD?ko\UStWi8.9`^#A5?YFO3n4.&7q97ZP42:.))oi2cdlNQ[<@p.1*$b",*.q#u0c-_HpB>2JGY#`mh?MuJ`%hN"k/U']gM_BuY4E;6'H!hboeF?S_0<!KIMlgf24'!>128NH5!K+Wt;r<0<EHqhu7nQt=Z*p/m[!9T+9EY>emc[0kFDR=IP:0-5V%T./KXSR')qN$l@k9u&debCe6(C%t8%fVbImbcO%Apb9#+8B)-=gef@REq>TA9TK.OeHU7F9m@`!+tQe54Kcea+Iq9YhmT9XdnqaO%NpV329%W?p?(,(fJ,]@G/L5_Vr(DJ:ce?7/SWt&t@;0QJcH[ou9>#?:/kH"7+*8$gHiF-@Jls'T3_]RJk5cb43.f&=H1kNq*JYN[%clV-9eqa!h.IOBLgN$lm:i/$r?_.1\"hrK(NjZEFrB/T\@bkiQ>WCp,Xc8N_lg4DQ\S/[<s5X[$"`NINoh9J=5KS++#`udi++*Nm%QW!rsWZSODQe)(VfhuuH5+6]_O8DS@Me=E>c&[3)(QY'WTCFV(7_UUFT&t7KTfP&H/6kQ($CH@P)`p`G\V`)4KY5Q(H.(lpUJtbc%3cl^sLcW%Q:kib]OrJT;NBE]+S`]>Co5B^[/(f'*2or>Z%NMtH[cLs?'/%a,PGt6.'.&N)$!;=='WJ>Rks&"_e5-q&*[JnUWKc#[%:9eL5^HX^6AOD39I0-nV)NR8&SCTa)Vgi3PT-]7EEQlMtq=?eiQb-A0G]pKZB33ad([:j`k9lL]Qh'5!V'aRWfM-Y^o(o.$*3[UA%5*`hr7S]e!.sBH:=&J:5B5:A/K_<tniqh`urPdI7]:0o*5Ha:2g8iq<CR(!`X4,s!2eQbFci3+1oD@VJo'GYE5#n4kI;#ge`^/eS%jS.nA]trab7?ZI51Kl8"H8ZA!`u")i99t(04PuYhl?mZfbSIMWGUkR;c,l:pR1Fku5!:arFse/BI/a49?b\Tg'DGEIL)P!=4$ua:%%HS`NFGm\ICud)6:3a<*h>FkV48S<SVhP!U-AT#Jf5G$BY9gZan]LK:BBf/Ns(V"8DoZE=nBt!Gk(JRRRb4UX2lf?kK,Er.h.-/K%mm"::)P7KT@ITnuLIRb'cZ"?:nXilMc'Gg>Z[QmJ2"os=G,T]ZIW&oZ`5*"CM2Et\6L+A$'58a;4^e2e2Sp!2UZ'BZcA5fPHq>3O%Ls"9_,5WE.6.^^q^!ss-Tj&?"_"$b$A/hh:XuD:?c*j\u)bqk]%gZLn$Y&T"UN3%)\P8n-FNJ-<^*+_;5`tVu<-sN>m,&o/Mh6(Q%($OJ+g;GSZ>0jFnZlOIcpC1>$OVJ/3Fi3rXWe8!+=_KtNe!G:JF,MeZ%62C6Os8Ol:LKGW.O&f42O3u[5FubXNHL"V8hW@d2I5+q%"TCF#TA(>;m$B5XJ%r6sB1ti%Wsu4AJ].=5m5,XNlIFS(fXLSKE9UXH>-H\N#(U]7dY+e^dQ>H#f3ik"gAW.q?+3#+Y1WQ6d"U:q%OCqIbi+-%5Afj1H]Y<[gpNX@p5M/hJj#Z%-Z7]><3b/)kUM$3d+PT_*&mF?]l!ej(Y`u"dfjF!A4['D/IS"+D?X"$:-5(#(Ce@F8%#og$1PE+eWOV2Sm!WCSSD+#)/qr6Pf#rK2$DJNrTW006ecK*CF$gEB@dh;COSlk8GPD7%jI5TmK:,4*q`n_QrIkC*%T&>*4j1[VL%(ee$Tp!JFSQR`lCD^2_56-c!lg\-=7iB@NHbO7r"_;iSW$U'<?ct_4e:uZ$==T.$#pVkM3oNNE`K29Q:46VAZ/c"NK(;(]'r4.93%"`qaS:[rC+)&iPHr'iL@)W[/Rin]lc=<<c0dWe0.9.UUs/'PG,J].,`]TRS/pFWX4/?`_GEUQh!$n<Cb%*Vo92"0AXkpmWMk-<%h%cO$2>L"YnLZY.+MOr>0r>thi-,?GnaIP[\Pr>:FV\IT)P8$KSVE3]b`cYab`0>b4WmngTg[p*g/J"+_i:-?RqVY@(9kRN$C?"+r#%?(?Aa;6ZOK,(b.N!G;@:H*O+4/H<W2$#uFDC2r8c`S1Z'Hn/m"Rroum;SqA(1d:h'S')8mebH1Y62*3F!1VsBaRmh\fG;dKDskBc%:puKg_<CFYjrQ3KIi/TLPHgN2q]S_U+59;rAr$nF@f"X:->F;`=R_$Z9n(BG?<qB\eHj&N)ZMDt@r#n0ll5:Qc[KcJ$mq:5;l@_i%C"R+=7d"qJeAku@HN_=#khRnR*k1U#QioL!Q?ITFmLA`>B5B[Jatl\b+MmK*G:Z9=72-'Jg,l2;N!/YCfm%T_?kfl1#R<C&kkTQs%KH6Td0H-JbGI)d>,Y2"B:5#D,[u(IJmKJF^&TCf4HDc])kpNa"5`9[LW7AXGoQtV@'B*Q^bAOk50Rk_kpAL's_2s/Yqh".$N!S/K%XFoUD[?UB$9?E3EfeG1QFmg_\VV6e;i8/qd`L#m'45qCdH[j]FOaa0YWM1G&nDLHS5/-E*)J=8W>P:+;n+K286]g0u(/\<FPso-?%:7p%!3oC_<G'@kPq:ud4J@Q@jls9A+@9=):$j&`"dU-MEpr5E#*PkJ\!LI1?MR2&-^W-&QL17=akB@-HpH-j@L:NP@`io7\2jaM5%l#B<XZo9m\Sd>O,/enG3jis-U/B,?iagL_/)m-`Z^Ts9,G?A=*ChM@%DGX]#s7F?S^7=:$Lg4G$Qg'k*O"ZU3(ig>fAR$Eb9]PEp%6qU]oV5J=^/(]o!m*#@6rc\4boB21,aRjXOTbr+Ol2(]+`URqT>R+'cj0Lt2;<!]mI(+&80a<*@4@G%d?ap!9LuYNtGp<"(\;pTR%iB"slq)VMH;+OZ;;HW[g]Al*;<S0cXGo_%gG?hLd3bcUi2(ZiH<f:HFp."E1+cBhfp."s4%p9mQYrC6'*k"%/@rGo7h%*U-X0FU@%W(/b(@l<sL)(3R9ENI1:W9$`0=raTJ2ko3H6Pd^Wm#@BLl62'q2>0M)$-6q&XN'+QQE,clN[=(P$c:l$o8@lBj9!TX*Xjq+kmuXg%3ln9i2,5Hc$iGs$Qu<Z0bCG(SY*nl2GFLR<p-IKO,1lc<S42S0P<WZ>a"W)#cGXPZdg]ZgB,_H/-\*k:G7Dk`g?;M@Vqp*c9D:>*%iD4L_Lb[^I,.U(EUpULhjF%lp.ZAAUbuWaNDY@GmUt7S^c88U[g$$mWqs1H:C$s,sh^0aY1QqUGDN2Zaf<pb;>FbS8]DgAQm<Z\A%_Q4$uM_RP:psjX_i0IFk?RN"0eb]%?cIQ=P7dpoYE:N3m^ON>EMu_qVg"ee\?!e$N(XC<U>cf+HF`p\.FoG_arepeG8Y+5<:4iOq%":/9tY)T`uFY[!)L].c2>;pbs+")7sIU=,Or)K@Ud.Wt%Xjp0pWm9oO6JY`9;&G:>#dp@>$njaS@>'Cn\))`:D>su)DdC7fmqQ`$%!eC7R5@25L56:D[3cXJ(lFZq2r=iIPefr^g8=ThU+E<PuM<^G8KK)gA`tG[1+bY0%kPGOJm7]4aEo@kT1qIgPF`_nP>!Kb^3rOX(%[tKdH_)2lb6S/.ZiOm``*>eb9eXI^iNro*+66._!Tb8lM;*Ar6D?S^\BhL+8lckeB^69g+H*D;TOkB3:32nR$aF9h>8";7cg[W-l%[nVFJ@1Z;dZATk6lGA(d_+.a4W.dg[M``q;!k_0]YNS$P94A'.=!/DB^@*BK;CtTse[3*[#kOb:G='/g@PLP^Ri'8,U$s3gTLq`r%C`E],Ko^!QkQ2tQnB8l7ANGLj:ppZ:?n;=-I^p)$j910rUct?mGO/qdKa!U#aKOVFnjD$4ZZ#:5!efP46:.CXfSDn#0;5beh5V(-%GGDDA0>9m6;["khL_(Y/!0(L/%:d-_T?mnX0WJL0r7HeT*[Z$%')3T6!%a(7(mUH;4jS==l@o<9^puuH@lf3q!lKkb,_f1#iD>m#%Js7B[?Eib\8`3E3P'R*qJX,ZTjW"E]U]sceig;2l*'fj1Up)74g(Q<++SZRe9^37KRlGtc&ClsESCHV5A0!\e'MDk0-cKe+Yj^<3%f6!PdB(V.X?GDDW!k7f,ipd0n1HJ*0!:8-&E`*`li)(K/n&-@`iPluS\<;N8^h3,-aGojb5Vk(@n>$';))`*MR!o=)'Nk9d3e!6j%Scf&ILuHE9C)-kD@9t=9\Q6&dr^es5GJ3fkJ-ItEjINLWJ5cjYr?a4k3-$4(!md^aI%^NX/te>W'B$\lHl"]*X:rDYiQ+ht'HlcL%>"KP:/:JE:JKu;h;IP/GZ82NthSb4\/MUjo-pOo!i`)s]D>t^cp:Jto3.u-6-pNuF5^o]M@,:o`%V$&34HQU+*s=,%l^aU/"GI9c%3N7^0j:E+Q!ECZ@\^[Z6.7i/7[Z`E):s`Yc+s=N?,[,+8!#is&aZ=Il.@.j#:(5URB#X_daS5eXji=&:1+H-6"eLM1MVnVuO^*@r%!]$DpE(E;1`$A$&!Us5YnOrrY't/u)0L&%G"GK5m@"Lf2"Asd.b_&3D#UBG8XeRjBR.%kg$rFa8aP,TGBnE8g8ec(\+(-d%#Gc(+%_;L5t#`C-hkQmrR*kK,oYRi\X$`8:!J3ee6&"!VqSLF!Pdnq76M7q!n,-MQmnqED+AaoSq98.p7^F6J=(\ioqf=sfUF90'0dmLCi%etQCk50V`71YLQ=.(-GoI2(;VV%-.g-mVZeO(,)j7EI`$JL/l"GbLtJkb,H$06J,u<A2ICmUE/t7EI^pfZmf6lQ\!h[1Ia#2s$kG%$fIuUZQHh^C26\P&)X'XAF1Tn[C)*E'H"r'('^9Qq`Th5[MG_:n,ap\=o)O&[MGTu,4iFj_Pifr<O(')U3%Jpi)=tEXOPffp/,5M%QT8/7ZYR$PC26\XO4\$!OeiRhC25!h-lt.1=]gpC*ecpRrR)\hY34Pd@&;Ei>kIAW&E*+,0TX!W;'H>flJq`+O8tX\cJ\i,&h^70%"!h`+;8Ar`FhPpHJf]O`@M*Wb"\f;%D;iFMj,q]E+3O]iU.(/?>U1Eu3[?P77*>r?[L-_1pn=-aPu*mg\=E^S.!m41fT@do5%nUn%7F@8F^rN,'$kmJ2%/;<Jo2?(K"KR4(*n-`Ih=a,&%B,UIWC+H`$E&N7"8+plKekS?_aN5e"25*kr=jlA_().c:I23[:tHou'J\1B%?o5P/!k$0@75>4p0[]U2J?M:35K.#)Y\GR,,q(;hiY\+3..J]&7:W&61'KQ:L6mR*QtUhT^fMhYT4"lM=='1A?n<S=PF+`l+-4NS%&dEi9pr^h_0P3q5)(+'D)":Nrl),B"$!%M3dG>R+&OROm0oDD,L:np-3"=6_l2&=,'5]B2po:.^'+EFpX+\o0'KC%u`sf3h;Uhob%N(-P^`t:+9"`P_Cen9Mi[MK-q'iOlW#&Af6V-uJ='4V;l)1^E0!LjO\9$^E_-=m`f"rl(Q,%d@pX<1=Regq+MEftt8%?[VJgQNd9%2*:)X8>2%Y%#&FW),OWq/ehLSQc,Lo`f-N)>3Zo`KF`PCPEG@>(8^mVbbA3SCJco$WYQISiCakXD(SBSOgcDH$8(o[7RChgahlD9%b@2_j95Q7QpQ9>;9-:7bf"tf?PV'0p^&a3_6>=Fp[j^'&_=1GU[C%\,#t54B<hNHteCL@)+,15,/@Dl6DhuW@X(&'1`S\`JC$MHi%C26]'&=I03`DTnJURdJe1-)CB(h\+oU!Q]PF9fNU&pk.jeCoNMU-<PKVs\$be4F&q;d;T)%7sd!Z5*aTk\e1QH-E>1<(l/4'%=`b%8+BCqaB/kDgTkA<:,P$i&pmAA.Fl%1p!i1r&isnMR&fmNW[AXE$!*L$gA)%9Cd@c`8jJ,jW4pqa4W%NCZeIH]+JO;tR-P'+>nZKQ%#%W=NVO2O+-Ott"bX`L@duBTf<BUoZh&p5@G=$j$H\&`!^t0mOSmjr3=D<Y,69tYX>ptY;W<l&Y)6t<2dKEMnB'b[m7704hY=ja9%`ILXdne>$^#;l,U2F-oZ$3F!fAlUu2?lYk.a8E$K`R%FUT^.nOK---\<gm?`R$5<-lma?TBYXm`?//HQn:RHr3l4dE>[opJY=jI1%`ILXdne>"(PrtCb."ilcB=(E6:Rt-T72YM&om/_KT41&4=D<Y,dT[-KAe6^r&1lP^o9<LY><H;D?L0B[&,N!I+>h[`pq!9R;[g_M%",c'L#j;Hs(*s)jL[^'uY2b,XihCEEn^6=B@]=t=Lma#Ud041%hHFTJ1N?Z\0b!IE!H]JZZ4%Mo0Ts@W-6h:&Zu%!<"=@u[XN)<i%J<ldV??h797EgW;"_M?<PL?]?au<;.bq;1G;/YiP(^A?(DoC$=!MG$]R1YR$&EopmM8L71d'PJ&<'1d,X@F1CRfYa[]rY0A_Z49\%B-^jo<bU5(OfBI[$.^>d1+n47=K_j9F^_)!?4E3=g)#aK*JaaG,CqU:.JHT5g=9aKAHZ6EagLDl1fY!Y#jIU$]&4IF+j%g6"NM;+%N$,1;$>o[89uTIS_0VnT7bD5^6?Iboho[6"bm:L6/Dmlh.TJVG'<G7bklPJn<a5s90FX%aif([Q_t%[AUJf&u0u813OsXq[ZD;qM%E)fP7$)os:hmP0f<BV$0%-;%#q0:HV7:AU:1E?0"+[4,df?l#*_fl*_=8sM`s$U+FN]iJslaur_TcQ/ob_F(a:dS7a/"GE-8=;>h%BP-TfW.CY)%LV73neOS,>3Zp-=:P&q)3,G]>%jm"ILf.<j.f9kMNT[efH2_<BBW;aOJ"_1K;=o%jT[/V`&i$p<':Ra*9si=SLR*]%J?dt?p]0lJ,"&D6D[CoMM+o6p6a"6fO<N)Al@aAf:EO\#&uqYS?lD)6<uF%nA_,4"W.n'"C$;iJ<+c(7jL^X;"u<2+clqld^-\Wo%a"V3S>RcsOC:FsO+]F/cRsgm$,Ekq5R=ZkuC>ZVU],_o[KPJRB9HiFh`Ol0YKYdq]<EX2?k-1TTQm?]Pk7E@jMS!<V'imK%,7r+*%?Ul8)=Zi^Y6Di?K(k"UMM2d;B823_5#,>3r@a*=Y/ZBGZR<\R0&K!;]eI+.P5O_&d/l_HX,Wf^?08uT?+2(_JRW?i03lGS?-W>[2%P+AqZ-P9s*8q`jZ#*cH['VU%f&ZU-aTjABJ%8.:bTm>p%E)'/;U(C!8;K)&38!dkh=/T^2_gd0GqgJ(&peC(<fWK@>pZ(Jsa3j:8%X)jSKKH9'2c(<M'qWM%0qf<ReOKuRlg]JRA&)P*Kn-@f;0^p.#JbK]b]SCai4X<2a^h)BNnrVtk-ltmUdjHM$krA7KUcgl#EJ4@W%g(E%j?$V<7.Ypkc2Pu$:X!8Md7[Q;Lo=1##d'\NdfO5L<\(ra]IX#l:0p;Yu8.!7&*<-;th/Z%qUo=Ra58[9($d<Zp8/%VRW0]Or%8jfZ#5?JMP?P1g7j93KhVD2+>,s3*Z37&3c8D='=VSU^Sl2UX^+AmOn!-XVO'Hh8:]Q%q#-\f`D'Zf7*7)Zf@*2o/Si0-ne"\XUb%;Tbb"8NPep#DF\VM%u0Rre(`UeY:jmUbF6R=pPJ$:/i@!U_(3gElfKH3bm.nQGV-H%+D=lc2Fuipn8Y`?!>[aoBs?QPUH_WKu/gK%0lR/okWq&Z&ec/aR3TB(p%_`?@!E7R0FgC333\K21JG0h0]9#&&^:stec`&9&In:"$WDKC$Dn"G;NLY4Qp>CW7;PsfTc*W%9sCdR%XO7HND50;]Y[Q1C5n"/OUm]IU?sP_q.tjVbpdhDXIK]NbYtH7i3X2`W)/YMV&eN`UeHEI$STk?'*YYWf&!&!E)BYOlIZ2i*eZngF%jS7XiL]\9YX7]#e-Q%mNf%&n2D<nEt@_F`/WR'qCr%;+/.K\2-6]QmB"H+P$R>'p[:)n>4b#PEK`O>_Ne5\UF'<KfD3^n!J1poHR%Tuj^@_$Y&V];VcT-mi%tgS2'+cFPS3F=4$$5C6s.ZRWS;nI)j5,ld3W,)m6IQEuo7+Rj>K[,uo>_fu%FMbjJ>GC=Hu8OHk"4Oilc%TU=0o6aoCUV1.)-68(5]0U7?XqQb_t))A!R:GCDkE`/4W>*SDB^-OZ#P*Xg*aA*'an'^hk%1h\EWF*4=0CT'j&$4:36M=8YDO4Lf%*tc]N0Ni.+;6l80#m+l/,;$=3kW?dD@0(rn%"B.0GA%g2a$h>5TnjmPC+/ul"gG)ineM3@-/5=C;'9s"`JD>CMZej-Ga*"S$@u#=%1Pl9RW!Eq(T5LG=^nPB2dE"@h$7V:XS5+sjX=hNf5Ce&[`#*-2jG]#dOMqP2g)LPG*Zs-LU\.X"CAa1u`V*_Z]M*5XCKRhcrq,0N%UNP*8,+PY?X+9[nfW8.W8I[Ss;],Ii@7Jd9'*$:P<$h(O62]^iJBJo@1`1Og`Z?q``<<+*'>CW3kqbgE$,Ib6"=%1W=tM]q=f?(h%8O:f(GgPaj7NIhYTWU!->GN*G?-E3MKEo3QUQW%7a9AHXr([ZAXtXnk5E(n.KFeYW^r]@>=N8);YQ3A]0aiCM-SRLmGl1$1#,@KG%2"WX40rc"**&^QK8-21t4S!V%o0=FpUok8[RL@#0SakT"n22;LW$,dsE"qGW@[LqRn\bAU2!d#CGh+*uKF'hInoV?+'#MRS-LOOk%S-0OJ>5!PIqYS+i*9(R;RM$-adj48TN<ttS\38*_)70\m/piU&*WCkQj9RR1^jt=_*kU9'SP#*-$P+S&:Mhj"KFVH::5o%6/@<n[%K0KJFS@W<\9bppt(P:mBb3NC:+)Q\A=<>FZ>DmNMJ@H[6hm;qu8o6-e_0"aQdI]L5!YZ'<d&[i%;Ho'"IJ=psOO+WF8!_k4']SAu%'s;hm1+'e<ZQYp#/@Dl6f7sV.e?oGjQ_h,+Km5Y!=)--&L_$L8blqK-QJ,N,lN9o10Vl-@7&d:W+eF_T,aUPCB$"VC3k?`He1]DS%8U%kY#9nGF\O@[/Nb!QABH2VB7tR7:WE<nN;5t-<DeNPHJ/9*h(1QJu0!2[!)bF![[C%F5#OL*YbCsOX'O'c<@d&VX75oKWT2FZR%@X6-p>Dk7BJ3KO63A+Ma[+2?,<d55ji2aQoU(gKuJl'3K!LLj_#,0';&^;qcQn#VH'p?[(7qhs')`!odQsh?(_<h@VN5^Eh(3J:?%!]*NW]eJBFOMXdJ=;.dIYi0Of0Sqd-7u<QN9Qc)5/IDs30[]U2J?M:35K.#)Yj0)[j!-YF8_0\F+TH_)biAF/#BT:"5b@%E7;N^e%H140Y_5[fPmCAUI$5%o&OK`um$Kb7l3b:$^n@gm_n]D+ND(c=m.\uZ7%+YQ^/7^``I7)?pO"!=$`.G7u-jhN`2L=p3@;42K,.8uC%4QqnG5h3j]-i>Ecr/%oDY/d:C`S?&WKJ?:&%$h7B3fqbNIT@3iS9hGAa/#(/4#J:>\;B5m1&(#:L@<U<#STocMV+pSl(CO]!*'s=%SDBf-m.+)*L^T#dSoZo2+s2)2&L89$'QI,DhuSnf!.$Kg[kMB%P9eF9-r*)6fQY>S-rR!ZG!jW8R.4K=)_*Y9<2($C7,em9BF#65%T8Te)*Y\X%Xf3!f=>;q5TeIA,V,K58WC]VgSP/bL!M`(Z'O'cdNZQb-RZL7bdir;XJf.@G>.;Va5(#aWCC2MVg00a*!krF+A<\`'%f.NHZ`4F<4EM-*SIUM[`OeoK%A\)98dE#c='SVkL"j<H=a1<,u"r-4e35nd"M_\S*N!P,(9DsIi:)PLF"V(a$jAorfcr.UeIWR%F%Eoth;Tr!4S?72+nDL=en76eqtU11+(7@>dtadnp1C?>mUoa@WX_:3S]*jCmE9e>88AZ;e#R4_s?JD"`JjCRK-"^@PU^q+O3`S:6:%q!g\MX[SX1,0Z<D/-\UABW5>qeYOW_`jSAX09!1N.[JdlPj'@mod6$,2.'sph-IDU,iI;.QdVKrS4`)&/GeX"1#Z_$G/%(Z,Ok=B%W4Vn7'Hu:fkf0eA"Ki/i*IEnq`MfOcom9HomSV:heWS""%F@8:d?n=tLZ_Dd1.HTK7_!BHP3uj4ppu$s`%Q5`+`SKhC'e.Y7ckc9%=:Ckj@rgUL_J]%W%>r-u<[+_.QU*)1fZM2FI)oV'PpEM=j)GTC0IBorZ+.&Y_K%)7r&nYRckHL0!8tI\Fu3T#5.&iX.LB(f7c>E0%:^j#b_f$pnnf8a?.,IrSeOYN6^;KQ5UPBIS`.g=0]X$uXnFdto@K:NmEB?aBWNdlM(k[m=$^@Zih._1gn8Q$s"&fJ![03X=K5D-2%/-\rF@CG]rj:7e!KTE[b.J6gM>9<Mui\*fS&C).\/V0tS#hstLMZM=UCi*-bfMbNdL6%%J<Ak",O:ddBQcJ1q6Wi9$8eP4/EO?$.%(_a":R+b\=Z6XTUrhMp'.F]M)oB0!YFlWZ[aTS#cD\_gkJP'eO*9q0gBa]\!?)Jic(h>fkkWh72\%4k\[?Z!1Ad]6).b\Xe"I*UJ%E!Ram7B]O$WW+r(*,cIW?,o@$\TZA"P>_64/*cpeV["#2D(WnPJJ"6dS4c>Fcr.VdXV!)D1*_L,6-dtW.(%JG^G",+ke^c#4ut0p%aGcMk?.+.=.3%/"$!M$H>GIp0Vq?p5_O>:&dK46d?aRN99p@B_"Rpt0X)049[C%F1"+4O?[m1]9/bKL;(ZCXT)/9SWWI1D9ro;WU%@)]9]H0cga/bMgb(WN%%2B!B7AsPEq;Ho&7>pt-ACt<$KQMLccMdWG#1C\"n*jlo0dSa;-10q-*$XmH25nmMf(T]6@rTeV@OBgTa%9;4bHV1'<[k`?K_bXQ<7V05'p*ONL1X=Hn!&[iA_P&FAm8r*BN@0#ticll!5HNN#tJtcemKE,^Md6RM^eRWa"?l0)E^R6'lQ)2;c%V%j/7V!Ba&WAL#VTR=XlZ8bf;$j3Hc":cgi77hg"$e'rsBVh7f5me(%akoq63)$Q*o/Gl7.Df\kZnl,5d3+-teKf.5@N6^s^UY=l%h0M8CjXAA"\Fi5_Ea'AN1e>>d2/+',+,'aFDZU0>1?H%mUm4?iZI1"mKCUUp8`*@d5YSD2P;f/\!mbYWlm'=)r#j)u6SqWB@5Wl\%.N!m@e8NV:Fe:+",3T0qHa.Ghd6Y<te`:ME?l0*pJ5\=MEQhb"YQYCZpHSidlj>(6,oT0QVpc%a`J-E/jnAMD(=E0e6o8OQX9kAU%TEAZ#k(>WNAPP+L8tYB;X!coWpRJK3F:/s(":4N^P1[U6Y<a=3TQG6`.pH<b$6(BNC210aKhR%SA@AQL).[cG.V&m^+g^9Pa<3!r%::`6XeVfYj!@t*.V*AL,2#/+"3\"?'LC>q`Lack,Ok5]J1-/s-a^(s/.?.(iB$9D"6.T%\Hr<"7H@PJT#9Pjp$pJPi)1:@adVIq9%/i!`t%_phH(Jg,'U"=r'a?Y*1WGZ?:KbPg;2K.a:#+VYu6U)=pG\&cEe+%uqd3Qr/PFr=JXeJ4NW@9P+Z&"&a0a^_mUT17Hl89l'%G%G%b)8F4O<.Z0J;6)*"Anjqs60Mk-^8-912Gm');RNMr5bkCkBq>uL6I:gm=u+9X?;D3j9<Tlm2@7LR?.G/61,U@E3+RXeK2=h=%#ZX$A:p2=iNWN4R,F"9@j]+I#0N1ohIS/X(."hYb7B#K#KR1nG:.!Z19[GE')13&23qt6SFR\HR*W11X#Ci>o_4ToIi6QI_nE7@V%"::(mTAdlWFa*SJpr4YDjJ3<=cC)^\K&"r.(MY1se_kE:l?*!gYHs^1ZSjSEEHH['n`K&U`S!uQr:]@SS^ie(Y(#7Kh47h=8cASL%lkW-3<knV4qd0V[-DL@XaPsh.gA_DYq@-[~>%AI9_PrivateDataEnd